{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/img/cover_1.webp","path":"img/cover_1.webp","modified":1,"renderable":0},{"_id":"source/img/cover_10.webp","path":"img/cover_10.webp","modified":1,"renderable":0},{"_id":"source/img/cover_2.webp","path":"img/cover_2.webp","modified":1,"renderable":0},{"_id":"source/img/cover_3.webp","path":"img/cover_3.webp","modified":1,"renderable":0},{"_id":"source/img/cover_5.webp","path":"img/cover_5.webp","modified":1,"renderable":0},{"_id":"source/img/cover_4.webp","path":"img/cover_4.webp","modified":1,"renderable":0},{"_id":"source/img/cover_6.webp","path":"img/cover_6.webp","modified":1,"renderable":0},{"_id":"source/img/cover_7.webp","path":"img/cover_7.webp","modified":1,"renderable":0},{"_id":"source/img/cover_8.webp","path":"img/cover_8.webp","modified":1,"renderable":0},{"_id":"source/img/cover_9.webp","path":"img/cover_9.webp","modified":1,"renderable":0},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png.backup","path":"img/favicon.png.backup","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/.RustStudyBasic.md.swp","hash":"c3c7f50c816f9e31aaf1355901f5df85844da6be","modified":1649749105307},{"_id":"source/_posts/ReactSourceDebug.md","hash":"1fc804f930cb9b99c7f71406d9cd867b19195faa","modified":1649749105444},{"_id":"source/_posts/ReactSourceDiffDebug.md","hash":"f2d2466be61fbddd046d445bbc832c4537bc525a","modified":1649749105117},{"_id":"source/_posts/ReactSourceHookDebug.md","hash":"b724d8ad9c19f49055a604a35eb0933107e5ada1","modified":1649749110173},{"_id":"source/_posts/webpackOutFileAnalyes.md","hash":"96adc98b2a9430e5821a05f268aebcc5d7d03066","modified":1649749106191},{"_id":"source/_posts/vue2SourceDebug.md","hash":"07c7b772bbeac1af48240855100cdcb34e194f89","modified":1649749109294},{"_id":"source/_posts/RustStudyBasic.md","hash":"04805d3d51eaa81f66722149e5622f2d1bcf7914","modified":1649749110369},{"_id":"source/_posts/wirteMyPromise.md","hash":"301df694b8eea8b3ef067236cea750c3fa26e8a3","modified":1649749110642},{"_id":"source/_posts/vueReactive.md","hash":"94108ba8b818c2dcd696e93cc8aaea0c0a900ca6","modified":1649749110024},{"_id":"source/_posts/wirteMyAsync.md","hash":"ec6d505154fc132db22a3672ec455e57804b7136","modified":1649749109854},{"_id":"source/img/cover_10.webp","hash":"4071312dc348b0048dbfd79f5028f7dd500d5793","modified":1649749127864},{"_id":"source/_posts/ReactSourceDebug/1.png","hash":"8136f1e10f8c9a44f0a39ebce4b2ee95f6e624a6","modified":1649749111902},{"_id":"source/_posts/ReactSourceDebug/3.png","hash":"017784677857c4f5b5976b1a36bc7ae08304d04e","modified":1649749111737},{"_id":"source/_posts/ReactSourceDebug/2.png","hash":"9e394d1e8c0ba9355080161fdd8477a6d6968871","modified":1649749111508},{"_id":"source/_posts/ReactSourceDebug/4.png","hash":"a5590f8f0ad9be5d80d004c78133bc000972d257","modified":1649749111356},{"_id":"source/_posts/ReactSourceDebug/6.png","hash":"20278c87a9af1cd50da9c3aaff68f7df5cfacc57","modified":1649749110970},{"_id":"source/_posts/ReactSourceHookDebug/11.png","hash":"f95ac10dbe9fe712039ed49222ac508db9e17b61","modified":1649749108474},{"_id":"source/_posts/ReactSourceHookDebug/22.png","hash":"249845b6265d4994528ff86d3d3cf10f03de0800","modified":1649749108693},{"_id":"source/_posts/ReactSourceDebug/5.png","hash":"e546d911db100bdb02f9b4a588968ead8772c748","modified":1649749110905},{"_id":"source/_posts/vueReactive/1.png","hash":"ead737beee3a16a9d33409faa1483d5712cba7f9","modified":1649749107306},{"_id":"source/_posts/ReactSourceHookDebug/44.png","hash":"62aafa81a31edb226297cbf2959682ba8abac391","modified":1649749108293},{"_id":"source/_posts/ReactSourceHookDebug/33.png","hash":"2015f303a739e35ef8beeb4ffc973e43295667bf","modified":1649749108941},{"_id":"source/_posts/vueReactive/2.gif","hash":"34937ff35ddd8f54235732b951b4dc3aa0f7fd08","modified":1649749107662},{"_id":"source/_posts/wirteMyAsync/1.gif","hash":"3609cf259d1dba8fd3f3c45036e1021d1e1b3838","modified":1649749109659},{"_id":"source/_posts/wirteMyAsync/2.gif","hash":"72f2656b454284f2fc1ca6042facc7075cff43e1","modified":1649749109505},{"_id":"source/img/cover_2.webp","hash":"03718359655373b366c6d72a03d633a2b740544b","modified":1649749124627},{"_id":"source/img/cover_5.webp","hash":"670967d0461756328a5cd5a1ce082a5ffb8da211","modified":1649749125345},{"_id":"source/img/cover_3.webp","hash":"5ed634e994979007c4efa5b64a15ebc432c23be1","modified":1649749125966},{"_id":"source/img/cover_4.webp","hash":"b526b248b81831a36e4f4274b65ee7719a76f4b5","modified":1649749124819},{"_id":"source/img/cover_6.webp","hash":"682e774b35bf4f373d6bc1efaca38ef2c4ed1ab4","modified":1649749126749},{"_id":"source/img/cover_7.webp","hash":"d1591af6733819d88aa4e6142356d152c3932be0","modified":1649749125210},{"_id":"source/img/cover_9.webp","hash":"86b7a04c3f92a4c4153164c67b7d4e90ebdaeedf","modified":1649749128470},{"_id":"source/img/cover_8.webp","hash":"fe7bae47d770a7ec17005a2348e0ff4f6d3f9a02","modified":1649749126606},{"_id":"source/_posts/vueReactive/4.gif","hash":"6880e9ee9cc3e5daeaf532d3e53f57d697a922f0","modified":1649749106636},{"_id":"source/img/cover_1.webp","hash":"356cb6ab08918cb0b8aeb46b11d727e72d5f7a3f","modified":1649749126226},{"_id":"source/_posts/vueReactive/5.gif","hash":"46d1ed876a12c1601decaa251894306dd6a48a72","modified":1649749108130},{"_id":"source/_posts/vueReactive/3.gif","hash":"d55ca1654a9d731f7494c7c7693e85992324d885","modified":1649749107395},{"_id":"themes/butterfly/package.json","hash":"80ebdf46caa7266fc43cd51c96c97731adbc5694","modified":1649749129755},{"_id":"themes/butterfly/README.md","hash":"6ee27baf95a5741abbc224ef8938d679b6597665","modified":1649749153094},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1649749114407},{"_id":"themes/butterfly/.github/stale.yml","hash":"05a55a87fa7f122c59683e41c8b2e37e79f688f0","modified":1649749174694},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1649749154612},{"_id":"themes/butterfly/README_CN.md","hash":"49ace5208f98783344f17a00adab7641cda43280","modified":1649749113125},{"_id":"themes/butterfly/languages/default.yml","hash":"7fd2950554e99a6f15232267621f36f026a85380","modified":1649749154204},{"_id":"themes/butterfly/_config.yml","hash":"8239544985a87481bf4c6c4775e8a3b4745d0bcb","modified":1649749114748},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1649749171935},{"_id":"themes/butterfly/languages/en.yml","hash":"4b2c351f2b5fd4f8497e806085364928e1af0b5b","modified":1649749154077},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1649749174223},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1649749171696},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1649749154875},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ef035065ebb37fce3e56e51f8b56deb596db78b2","modified":1649749153842},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1649749175301},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"6c35255c196ea8e9817b85b6d7729d00cf18f231","modified":1649749153695},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/custom.md","hash":"eff495eb1584cf4586e33c76e8b2fa6a469a179b","modified":1649749175933},{"_id":"themes/butterfly/scripts/events/config.js","hash":"a72c2020c87c4998aa124a16e9f8560875b9f86d","modified":1649749123328},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1649749123380},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1649749123630},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1649749175504},{"_id":"themes/butterfly/scripts/events/init.js","hash":"a7f567b3d3110afe2f99c967b8e15351a7f5bd6d","modified":1649749123751},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1649749154338},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.md","hash":"476802922b774b679225102ac30a9d9183394701","modified":1649749175660},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1649749123052},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1649749160538},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1649749155243},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1649749118286},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"ab3bdeb6e0acd3d58091698c1335afb069eea7e5","modified":1649749161075},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"847a5cbc13db1a435a4f762a7c0007d9bcbb79a2","modified":1649749157314},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1649749160474},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1649749157016},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1649749118453},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1649749122998},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"f093ab771257a6a939b194f68607a2038c8d7da3","modified":1649749157961},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1649749122729},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1649749122392},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1649749116835},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"6a103a2472903289bdecd5240eb89cac0b9e13d9","modified":1649749122322},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"21556f9cb412ddc500ad12ecfd419f3ea6c9f663","modified":1649749122777},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1649749155157},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1649749116461},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1649749117290},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1649749115558},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1649749117641},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1649749116054},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1649749117949},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1649749116295},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1649749115915},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1649749116596},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1649749139360},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1649749129426},{"_id":"themes/butterfly/source/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1649749128755},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1649749129085},{"_id":"themes/butterfly/source/css/var.styl","hash":"4890a40366d6443f8b8942a4e9a6dce9fe3494f5","modified":1649749134747},{"_id":"themes/butterfly/source/img/favicon.png.backup","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1649749125702},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1649749159042},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1649749128253},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1649749159312},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1649749125580},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1649749159060},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1649749159637},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1649749159357},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1649749158755},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9e58c80af8bbd0c66ccb4f94d3781818cebf0d66","modified":1649749158442},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1649749156555},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1649749159554},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"78a3abd90bb3c18cd773d3d5abac3541e7f415e5","modified":1649749156322},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1649749158788},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1649749161866},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1649749156198},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1649749161538},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"dc3913c1a6dd207051c3d3414a33851ae8bc0a45","modified":1649749155967},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"b9ebb02af8ccf43e3f73be43db19254fa913c57b","modified":1649749156893},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1649749159916},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1649749160129},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1649749155921},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1649749157693},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1649749169279},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1649749156686},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"fed069baa9b383f57db32bb631115071d29bdc60","modified":1649749159814},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1649749168022},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1649749157585},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1649749168949},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1649749162997},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1649749172047},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1649749160230},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"b63fd8ec48d782f51ee11226753fed1998bbf34a","modified":1649749165712},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d4072f9ab79f4ac49aa251ae470abc45a2fddbd6","modified":1649749162203},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1649749173863},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1649749172844},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1649749172527},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1649749172635},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1649749172972},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1649749173298},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0380a1e048e6219ea4b4a8a4eadba960edf308f0","modified":1649749172250},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1649749173481},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1649749173138},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1649749172393},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f7fd855593396b30932a06627287a73a407aff88","modified":1649749134201},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"656f9007d94cf29a20532705d94fb7f22827e6fe","modified":1649749139960},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1649749173596},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0290605c4984882990059eefe3ad18d2ac6a19ef","modified":1649749140231},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1649749134406},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1649749173991},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1649749135722},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1649749133380},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1649749131875},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"e4c987c0202162b50dec91e1df74665d0fa933c9","modified":1649749139866},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"2d3b0386c8b62a61734e10bab2cf86842cbb1673","modified":1649749136002},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1649749136662},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ef21990de28bd75dcd0f88b8d616e1a7a137502f","modified":1649749137253},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1649749136929},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"84d4f27fde933bdf839629eb3bddcbc0f4592836","modified":1649749136287},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"d97c1722ce0fcc319f1f90ec2d51f9d746748e2b","modified":1649749136927},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1649749137475},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1649749136337},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"f67177310f5594954b25a591d186d28d5d450b18","modified":1649749134952},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1649749137190},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"e5008f43897d8482b4831cd4c13a0af40e496762","modified":1649749136005},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1649749130833},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1649749131519},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"1bcbc80dff19cd53d0b367c3b9a3c751d3a1f10d","modified":1649749136603},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1649749135043},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1649749135731},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1649749131001},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1649749131191},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1649749130544},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1649749131675},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1649749137856},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1649749138846},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1649749137807},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1649749138446},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1649749138218},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"826dae759062d8f84eb2bf5ab8fdb80e0f79d58b","modified":1649749131345},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"08493b66b9f31f2bd3e9a3115017a0ce16142b20","modified":1649749138717},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1649749137540},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1649749134045},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1649749139066},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1649749139176},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1649749129349},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1649749164750},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1649749129087},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1649749165384},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1649749165130},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1649749165446},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1649749164927},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1649749167218},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1649749164611},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1649749167723},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1649749166916},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1649749167417},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1649749167551},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1649749167085},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"143236e395c18d80ab8dc794821eb337c85f6b32","modified":1649749170654},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1649749169787},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"fe684aaad4c99b908dc4499c85afd9a2cd893aae","modified":1649749170299},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"0764709381fa29778f6390d645ed137d2f91228f","modified":1649749169488},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"9c96e6e67931977268b218b99084b98597c2e42b","modified":1649749170851},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"e4850f2c9ba5f6b2248808f7257662679e0fab0a","modified":1649749170989},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1649749166782},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"c271cacbac14ed665bbf47aa9c6e74e94c69dcef","modified":1649749170126},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"9302837f1e35f153323bb4f166514c7e96e8ecdd","modified":1649749170457},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"c1c75abe5c899618ed6699c97ac999544840098a","modified":1649749169599},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1649749169930},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1649749166141},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"59c22ebf3aaee90152e7cdb17ff5841c888fcd82","modified":1649749171246},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"c92df4f9d0611cf44c1a4491e226f242ec80f5bb","modified":1649749162448},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"8ce336a4c8cae81b58ee26ff51040ca650ff1519","modified":1649749162617},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7648e4cb0b224f480b5f1356d64f62c9235f6723","modified":1649749171393},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"0a7587a0211011b5942edba2aa80d51169561d30","modified":1649749166570},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1649749166454},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1649749162814},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1649749164082},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1649749163525},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1649749163879},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1649749168629},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"ac811c1d6e0bf08aeb933ade1b9557e0c560d0c9","modified":1649749163720},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1649749168372},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1649749168702},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1649749168295},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"9028efac78e4122acd734edd5ef9110ef3f05cd1","modified":1649749164291},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"5e32d903903c76db55a625640f9417d15a3a312f","modified":1649749164397},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1649749132670},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1649749133137},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1649749132466},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1649749132973},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1649749132777},{"_id":"themes/butterfly/source/img/favicon.png","hash":"83ca32ec14ef6a2cdb95fb85ff12bca748e6a673","modified":1649749127986},{"_id":"public/search.xml","hash":"fd959fc4e1a24b9a17e9b13df276b100d2c7659c","modified":1649839938629},{"_id":"public/2022/04/06/ReactSourceDiffDebug/index.html","hash":"cfc8193ca9318c076e2644f9c52e336cc577e600","modified":1649839938629},{"_id":"public/2022/03/27/ReactSourceHookDebug/index.html","hash":"eb21036a9359317a2196756ce86a2e9fd96f3344","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/index.html","hash":"ed5640762bde4240dc86dc59837fddcc34abbde2","modified":1649839938629},{"_id":"public/2022/02/22/RustStudyBasic/index.html","hash":"c6ac1295ee165fa0a0b78fff3ace9d30bbac33cd","modified":1649839938629},{"_id":"public/2021/05/31/wirteMyAsync/index.html","hash":"1453a85ec713c94a06521898b16c40f1f3e8da82","modified":1649839938629},{"_id":"public/2021/11/15/vue2SourceDebug/index.html","hash":"953ca6fd58df920f87247a82497a33f93a4fa191","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/index.html","hash":"9dc686ef73ce32ace7996a3f680dec6338fce073","modified":1649839938629},{"_id":"public/2021/05/25/webpackOutFileAnalyes/index.html","hash":"c9c862cb40bc52d7ee6ae7912096a1d55cea3334","modified":1649839938629},{"_id":"public/archives/index.html","hash":"ed751eb4aedf4ee926b028c627aab12990d725cc","modified":1649839938629},{"_id":"public/2021/05/19/wirteMyPromise/index.html","hash":"1f96cf654707671adaa4b5102a336e3d93ae59c2","modified":1649839938629},{"_id":"public/archives/2021/index.html","hash":"ca8a410aee906f09777bbcb919bdbb86e4299a66","modified":1649839938629},{"_id":"public/archives/2021/05/index.html","hash":"b69d9161ea3a747466947b94eafc9931e16e8596","modified":1649839938629},{"_id":"public/archives/2021/06/index.html","hash":"b6f73ca0c4ea5172a83916d0f9466f904f5cf12f","modified":1649839938629},{"_id":"public/archives/2021/11/index.html","hash":"34a6854d267169236e1553fec01247a3321ab859","modified":1649839938629},{"_id":"public/archives/2022/index.html","hash":"aeafe3dfe6b82f146e30a340356647b57b6eaa6f","modified":1649839938629},{"_id":"public/archives/2022/02/index.html","hash":"ea0e1a1a35cfaaa27d709cb8c0a01b035a26994e","modified":1649839938629},{"_id":"public/archives/2022/03/index.html","hash":"1be5e46def4fced47da850e9acb548d3fb50c06a","modified":1649839938629},{"_id":"public/archives/2022/04/index.html","hash":"a41b33515b842e15b2ee0222b2e7272cc61a3550","modified":1649839938629},{"_id":"public/categories/React/index.html","hash":"9e8831c392c1d37310a2c752678e1892370868b1","modified":1649839938629},{"_id":"public/categories/Rust/index.html","hash":"bde37cd9079fd4e21e9026ded4ed92d2f2faab6d","modified":1649839938629},{"_id":"public/categories/Vue/index.html","hash":"f772d44910e6b2585ed11b07a2459da7cb3a5586","modified":1649839938629},{"_id":"public/index.html","hash":"be24f90ac73b23ebb77fd56cf5b17a3221e4f3d5","modified":1649839938629},{"_id":"public/categories/javascript/index.html","hash":"341636657120bdf5db0949c78084433f550c6279","modified":1649839938629},{"_id":"public/tags/React/index.html","hash":"cd746f24db9e75d647bd2b03f1a1bbcbb4050d53","modified":1649839938629},{"_id":"public/tags/Javascript/index.html","hash":"ce6040b6f3ca09925acb937cacff95bfafc4c254","modified":1649839938629},{"_id":"public/tags/source/index.html","hash":"eecf117c1b869f39a7bb8ec7adc88cb9f1ef8e19","modified":1649839938629},{"_id":"public/tags/Diff/index.html","hash":"159fbd0bbbd8854c5d387e5a359e6bc62865db85","modified":1649839938629},{"_id":"public/tags/javascript/index.html","hash":"1e2bcba9830ad9d55d8742a7e2212dc4d828d3cf","modified":1649839938629},{"_id":"public/tags/Rust/index.html","hash":"9e3bbe721ba0bb7b9db95d682ca87903419a7ef9","modified":1649839938629},{"_id":"public/tags/basic/index.html","hash":"08717ad27da2c19b5a0978deb2b97c506432c3c7","modified":1649839938629},{"_id":"public/tags/Vue/index.html","hash":"066501838dbe8af3651369e32e6a31e7dd36457c","modified":1649839938629},{"_id":"public/tags/webpack/index.html","hash":"96d4d814f2dac4c67aa5e267db5bb3becf1fdb1c","modified":1649839938629},{"_id":"public/tags/promise/index.html","hash":"b4f1b2575f7dd190ed9da40f4ad2187ecc5fa20c","modified":1649839938629},{"_id":"public/tags/async/index.html","hash":"56eeb4318ea33ac48d44e372f1a692c291b05961","modified":1649839938629},{"_id":"public/img/cover_10.webp","hash":"4071312dc348b0048dbfd79f5028f7dd500d5793","modified":1649839938629},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1649839938629},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1649839938629},{"_id":"public/img/favicon.png.backup","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/1.png","hash":"8136f1e10f8c9a44f0a39ebce4b2ee95f6e624a6","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/2.png","hash":"9e394d1e8c0ba9355080161fdd8477a6d6968871","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/3.png","hash":"017784677857c4f5b5976b1a36bc7ae08304d04e","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/5.png","hash":"e546d911db100bdb02f9b4a588968ead8772c748","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/4.png","hash":"a5590f8f0ad9be5d80d004c78133bc000972d257","modified":1649839938629},{"_id":"public/2022/03/21/ReactSourceDebug/6.png","hash":"20278c87a9af1cd50da9c3aaff68f7df5cfacc57","modified":1649839938629},{"_id":"public/2022/03/27/ReactSourceHookDebug/22.png","hash":"249845b6265d4994528ff86d3d3cf10f03de0800","modified":1649839938629},{"_id":"public/2022/03/27/ReactSourceHookDebug/11.png","hash":"f95ac10dbe9fe712039ed49222ac508db9e17b61","modified":1649839938629},{"_id":"public/2022/03/27/ReactSourceHookDebug/44.png","hash":"62aafa81a31edb226297cbf2959682ba8abac391","modified":1649839938629},{"_id":"public/2022/03/27/ReactSourceHookDebug/33.png","hash":"2015f303a739e35ef8beeb4ffc973e43295667bf","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/1.png","hash":"ead737beee3a16a9d33409faa1483d5712cba7f9","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/2.gif","hash":"34937ff35ddd8f54235732b951b4dc3aa0f7fd08","modified":1649839938629},{"_id":"public/img/cover_3.webp","hash":"5ed634e994979007c4efa5b64a15ebc432c23be1","modified":1649839938629},{"_id":"public/img/cover_5.webp","hash":"670967d0461756328a5cd5a1ce082a5ffb8da211","modified":1649839938629},{"_id":"public/img/cover_2.webp","hash":"03718359655373b366c6d72a03d633a2b740544b","modified":1649839938629},{"_id":"public/img/cover_4.webp","hash":"b526b248b81831a36e4f4274b65ee7719a76f4b5","modified":1649839938629},{"_id":"public/img/cover_7.webp","hash":"d1591af6733819d88aa4e6142356d152c3932be0","modified":1649839938629},{"_id":"public/img/cover_6.webp","hash":"682e774b35bf4f373d6bc1efaca38ef2c4ed1ab4","modified":1649839938629},{"_id":"public/img/cover_9.webp","hash":"86b7a04c3f92a4c4153164c67b7d4e90ebdaeedf","modified":1649839938629},{"_id":"public/img/cover_8.webp","hash":"fe7bae47d770a7ec17005a2348e0ff4f6d3f9a02","modified":1649839938629},{"_id":"public/2021/05/31/wirteMyAsync/1.gif","hash":"3609cf259d1dba8fd3f3c45036e1021d1e1b3838","modified":1649839938629},{"_id":"public/2021/05/31/wirteMyAsync/2.gif","hash":"72f2656b454284f2fc1ca6042facc7075cff43e1","modified":1649839938629},{"_id":"public/js/search/algolia.js","hash":"aaa5e44125dcf321866bc2355a73773b11db8c9c","modified":1649839938629},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1649839938629},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1649839938629},{"_id":"public/js/search/local-search.js","hash":"ec62117f38e095425f295b1170c222c7a1399425","modified":1649839938629},{"_id":"public/css/index.css","hash":"949b3360d57d0eae277b8b608ecf631681c72937","modified":1649839938629},{"_id":"public/js/main.js","hash":"04efcbd28b37875cfec88eb87cab7256a9ebb327","modified":1649839938629},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1649839938629},{"_id":"public/img/cover_1.webp","hash":"356cb6ab08918cb0b8aeb46b11d727e72d5f7a3f","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/4.gif","hash":"6880e9ee9cc3e5daeaf532d3e53f57d697a922f0","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/5.gif","hash":"46d1ed876a12c1601decaa251894306dd6a48a72","modified":1649839938629},{"_id":"public/2021/06/04/vueReactive/3.gif","hash":"d55ca1654a9d731f7494c7c7693e85992324d885","modified":1649839938629},{"_id":"public/img/favicon.png","hash":"83ca32ec14ef6a2cdb95fb85ff12bca748e6a673","modified":1649839938629}],"Category":[{"name":"React","_id":"cl1xc3oup00021wuq550686h7"},{"name":"Rust","_id":"cl1xc3ov1000g1wuq7u90cbrs"},{"name":"Vue","_id":"cl1xc3ov3000l1wuq9unz59lo"},{"name":"javascript","_id":"cl1xc3ov4000q1wuq27ig6xn6"}],"Data":[],"Page":[],"Post":[{"title":"ReactSourceDebug","date":"2022-03-20T23:52:01.000Z","description":"React的一次源码debug学习","top_image":"https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100","cover":"/img/cover_5.webp","_content":"## 前言\n\n- React源码版本：`17.0.2`\n- Debug Demo 如下：\n\n```typescript\nclass Test extends React.Component<any, { text: string }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      text: \"hello\",\n    };\n  }\n  render() {\n    return (\n      <div>\n        <span>{this.state.text}</span>\n        <span>normal</span>\n        <button\n          onClick={() => {\n            debugger;\n            this.setState({ text: \"check\" });\n          }}\n        >\n          setState\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n```\n\n- 根据DEMO，本次学习仅针对React在Web层的渲染\n  - 页面的初始渲染\n  - 点击按钮后的一次更新渲染\n- 辅助学习文章——[Lam大佬的React源码解析文章](https://www.zhihu.com/people/lam-14-21-74)\n- **本文仅是学习记录，记录一些源码的理解，并非详细分析源码**\n\n## 初次渲染\n\n### 入口\n\n```typescript\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n```\n\n- 通过传入入口组件（通常是`<App />`）进行整体页面的渲染\n\n### JSX处理\n\n- 注意下`webpack`对所有的JSX进行了处理，比如入口代打包成了这样\n\n```typescript\nreact_dom__WEBPACK_IMPORTED_MODULE_1__.render( /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Test, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 17\n}, undefined), document.getElementById(\"root\"));\n```\n\n- 可以看到所有的JSX都包裹在了一个函数中，函数中有两个关键动作\n  - 对JSX写法进行验证，是否符合语法\n  - 对JSX进行解析\n\n```typescript\n// DEMO中的Test解析返回的结果\n{\n  $$typeof: Symbol(react.element),\n  type: class Test /* 这里省略Test的结构 */,\n  key: null,\n  ref: null,\n  props: {\n  },\n  _owner: null,\n  _store: {\n  },\n}\n```\n\n### render\n\n- 首次渲染时会去创建`root`，同时代码首次涉及到React16加入的`Fiber`数据结构\n\n```typescript\n// 创建FiberRoot的函数\nfunction createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate);\n  var uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n```\n\n附上此时的调用栈\n\n![3](3.png)\n\n#### Fiber\n\n- 源码整体Debug下来，每一个Fiber对应`JSX`的每一个节点（不同于真实DOM树），Fiber树包括了`<App />`这样的组件\n- React整体基于Fiber树进行更新，可以说Fiber树就是React的虚拟DOM\n- Fiber树的结构如下，以DEMO为例：\n\n![1](1.png)\n\n- **每个Fiber只有一个父节点、一个子节点、一个兄弟节点**，可能没有父节点（root），可能没有子节点（两个span和button）、可能没有兄弟节点，但有也不会超过一个\n\n  - 所以Fiber有以下的数据结构：\n\n  ```typescript\n  interface Fiber {\n      return:FiberNode, //父节点\n      sibiling:FiberNode, //兄弟节点\n      child:FiberNode, //子节点\n  }\n  ```\n\n- Fiber节点上记录了对应节点的所有需要渲染的属性，例如：rootFiber有下面这些属性（**某些属性是rootFiber独有的**）：\n\n![2](2.png)\n\n#### 事件监听\n\n- React会在root节点上监听所有可能的事件\n\n```typescript\n// 创建rootFiber之后，调用的监听函数\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  {\n    if (rootContainerElement[listeningMarker]) {\n      return;\n    }\n    rootContainerElement[listeningMarker] = true;\n    allNativeEvents.forEach(function (domEventName) {\n      if (!nonDelegatedEvents.has(domEventName)) {\n        listenToNativeEvent(domEventName, false, rootContainerElement, null);\n      }\n\n      listenToNativeEvent(domEventName, true, rootContainerElement, null);\n    });\n  }\n}\n```\n\n- `allNativeEvents`包含了React预定的所有事件，React将事件分成了三组，分为三种优先级，例如优先级最低的一组为：\n\n```typescript\nvar discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close',/*...其余好多事件*/];\n```\n\n- 在`root`上监听事件之后，所有事件都会在`root`上触发对应处理函数，并后续调用`dispatchEvent`函数，**这个函数会统一调度和处理所有事件，并在最后进行更新**\n\n### updateContainer\n\n- 更新（处理Fiber）函数\n  - `unbatchedUpdates`涉及到了React的合成事件系统（没有详细了解...）\n\n```typescript\nunbatchedUpdates(function () {\n    updateContainer(children, fiberRoot, parentComponent, callback);\n});\n```\n\n- 函数内部对React的更新算法进行了初始化\n  - `updatequeue`\n  - `lane`算法\n\n### workLoopSync\n\n- 此函数对Fiber树进行遍历，同时**创建和处理**所有的Fiber节点\n\n```typescript\nfunction workLoopSync() {\n    // Already timed out, so perform work without checking if we need to yield.\n    while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n    }\n}\n```\n\n此时的调用栈：\n\n![4](4.png)\n\n### Fiber遍历\n\n- `workLoopSync`对**Fiber树的遍历（此时其实还只有一个rootFiber根）**主要调用了两个函数\n  - `beginWork`\n  - `completeUnitOfWork`\n\n- 这两个函数都会根据Fiber节点的不同，进行不同的处理\n  - **`beginWork`函数会对每一种Fiber节点调用`reconcileChildren`函数，通过传入Fiber的child（这里的child是通过JSX解析获取的，还不是Fiber）创建对应的Fiber并且返回这个Fiber**\n  - **`completeUnitOfWork`函数则会根据Fiber的类型真正创建DOM节点，并对其初始化**\n- 同时在`workLoopSync`内部会按照下面的顺序进行遍历（**b代表`beginWork`，b1代表第一步调用`beginWork`处理对应节点**）：![5](5.png)\n\n- 可以看出，Fiber树遍历之后，`workLoopSync`会返回Fiber树的根节点，也就是`root`节点\n\n### commitRoot\n\n- `commitRoot`函数则会真正将Fiber树对应的真实DOM结构渲染到页面上\n\n```typescript\n// commitRoot函数内部调用渲染真实DOM的部分代码\ndo {\n    {\n        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);\n        if (hasCaughtError()) {\n            if (!(nextEffect !== null)) {\n                {\n                    throw Error( \"Should be working on an effect.\" );\n                }\n            }\n            var _error = clearCaughtError();\n            captureCommitPhaseError(nextEffect, _error);\n            nextEffect = nextEffect.nextEffect;\n        }\n    }\n} while (nextEffect !== null);\n```\n\n- 代码中还执行了另外两次相似函数，分别在上述代码前后执行\n  - `invokeGuardedCallback(null, commitBeforeMutationEffects, null);`\n  - `invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);`\n\n此时的调用栈：![6](6.png)\n\n- 在上述代码执行过后，页面上才会真正渲染出真实DOM\n\n","source":"_posts/ReactSourceDebug.md","raw":"---\ntitle: ReactSourceDebug\ndate: 2022-03-21 07:52:01\ntags:\n - React\n - Javascript\n - source\ncategories:\n - React\ndescription: React的一次源码debug学习\ntop_image: https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100\ncover: /img/cover_5.webp\n\n---\n## 前言\n\n- React源码版本：`17.0.2`\n- Debug Demo 如下：\n\n```typescript\nclass Test extends React.Component<any, { text: string }> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      text: \"hello\",\n    };\n  }\n  render() {\n    return (\n      <div>\n        <span>{this.state.text}</span>\n        <span>normal</span>\n        <button\n          onClick={() => {\n            debugger;\n            this.setState({ text: \"check\" });\n          }}\n        >\n          setState\n        </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n```\n\n- 根据DEMO，本次学习仅针对React在Web层的渲染\n  - 页面的初始渲染\n  - 点击按钮后的一次更新渲染\n- 辅助学习文章——[Lam大佬的React源码解析文章](https://www.zhihu.com/people/lam-14-21-74)\n- **本文仅是学习记录，记录一些源码的理解，并非详细分析源码**\n\n## 初次渲染\n\n### 入口\n\n```typescript\nReactDOM.render(<Test />, document.getElementById(\"root\"));\n```\n\n- 通过传入入口组件（通常是`<App />`）进行整体页面的渲染\n\n### JSX处理\n\n- 注意下`webpack`对所有的JSX进行了处理，比如入口代打包成了这样\n\n```typescript\nreact_dom__WEBPACK_IMPORTED_MODULE_1__.render( /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(Test, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 17\n}, undefined), document.getElementById(\"root\"));\n```\n\n- 可以看到所有的JSX都包裹在了一个函数中，函数中有两个关键动作\n  - 对JSX写法进行验证，是否符合语法\n  - 对JSX进行解析\n\n```typescript\n// DEMO中的Test解析返回的结果\n{\n  $$typeof: Symbol(react.element),\n  type: class Test /* 这里省略Test的结构 */,\n  key: null,\n  ref: null,\n  props: {\n  },\n  _owner: null,\n  _store: {\n  },\n}\n```\n\n### render\n\n- 首次渲染时会去创建`root`，同时代码首次涉及到React16加入的`Fiber`数据结构\n\n```typescript\n// 创建FiberRoot的函数\nfunction createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {\n  var root = new FiberRootNode(containerInfo, tag, hydrate);\n  var uninitializedFiber = createHostRootFiber(tag);\n  root.current = uninitializedFiber;\n  uninitializedFiber.stateNode = root;\n  initializeUpdateQueue(uninitializedFiber);\n  return root;\n}\n```\n\n附上此时的调用栈\n\n![3](3.png)\n\n#### Fiber\n\n- 源码整体Debug下来，每一个Fiber对应`JSX`的每一个节点（不同于真实DOM树），Fiber树包括了`<App />`这样的组件\n- React整体基于Fiber树进行更新，可以说Fiber树就是React的虚拟DOM\n- Fiber树的结构如下，以DEMO为例：\n\n![1](1.png)\n\n- **每个Fiber只有一个父节点、一个子节点、一个兄弟节点**，可能没有父节点（root），可能没有子节点（两个span和button）、可能没有兄弟节点，但有也不会超过一个\n\n  - 所以Fiber有以下的数据结构：\n\n  ```typescript\n  interface Fiber {\n      return:FiberNode, //父节点\n      sibiling:FiberNode, //兄弟节点\n      child:FiberNode, //子节点\n  }\n  ```\n\n- Fiber节点上记录了对应节点的所有需要渲染的属性，例如：rootFiber有下面这些属性（**某些属性是rootFiber独有的**）：\n\n![2](2.png)\n\n#### 事件监听\n\n- React会在root节点上监听所有可能的事件\n\n```typescript\n// 创建rootFiber之后，调用的监听函数\nfunction listenToAllSupportedEvents(rootContainerElement) {\n  {\n    if (rootContainerElement[listeningMarker]) {\n      return;\n    }\n    rootContainerElement[listeningMarker] = true;\n    allNativeEvents.forEach(function (domEventName) {\n      if (!nonDelegatedEvents.has(domEventName)) {\n        listenToNativeEvent(domEventName, false, rootContainerElement, null);\n      }\n\n      listenToNativeEvent(domEventName, true, rootContainerElement, null);\n    });\n  }\n}\n```\n\n- `allNativeEvents`包含了React预定的所有事件，React将事件分成了三组，分为三种优先级，例如优先级最低的一组为：\n\n```typescript\nvar discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close',/*...其余好多事件*/];\n```\n\n- 在`root`上监听事件之后，所有事件都会在`root`上触发对应处理函数，并后续调用`dispatchEvent`函数，**这个函数会统一调度和处理所有事件，并在最后进行更新**\n\n### updateContainer\n\n- 更新（处理Fiber）函数\n  - `unbatchedUpdates`涉及到了React的合成事件系统（没有详细了解...）\n\n```typescript\nunbatchedUpdates(function () {\n    updateContainer(children, fiberRoot, parentComponent, callback);\n});\n```\n\n- 函数内部对React的更新算法进行了初始化\n  - `updatequeue`\n  - `lane`算法\n\n### workLoopSync\n\n- 此函数对Fiber树进行遍历，同时**创建和处理**所有的Fiber节点\n\n```typescript\nfunction workLoopSync() {\n    // Already timed out, so perform work without checking if we need to yield.\n    while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n    }\n}\n```\n\n此时的调用栈：\n\n![4](4.png)\n\n### Fiber遍历\n\n- `workLoopSync`对**Fiber树的遍历（此时其实还只有一个rootFiber根）**主要调用了两个函数\n  - `beginWork`\n  - `completeUnitOfWork`\n\n- 这两个函数都会根据Fiber节点的不同，进行不同的处理\n  - **`beginWork`函数会对每一种Fiber节点调用`reconcileChildren`函数，通过传入Fiber的child（这里的child是通过JSX解析获取的，还不是Fiber）创建对应的Fiber并且返回这个Fiber**\n  - **`completeUnitOfWork`函数则会根据Fiber的类型真正创建DOM节点，并对其初始化**\n- 同时在`workLoopSync`内部会按照下面的顺序进行遍历（**b代表`beginWork`，b1代表第一步调用`beginWork`处理对应节点**）：![5](5.png)\n\n- 可以看出，Fiber树遍历之后，`workLoopSync`会返回Fiber树的根节点，也就是`root`节点\n\n### commitRoot\n\n- `commitRoot`函数则会真正将Fiber树对应的真实DOM结构渲染到页面上\n\n```typescript\n// commitRoot函数内部调用渲染真实DOM的部分代码\ndo {\n    {\n        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);\n        if (hasCaughtError()) {\n            if (!(nextEffect !== null)) {\n                {\n                    throw Error( \"Should be working on an effect.\" );\n                }\n            }\n            var _error = clearCaughtError();\n            captureCommitPhaseError(nextEffect, _error);\n            nextEffect = nextEffect.nextEffect;\n        }\n    }\n} while (nextEffect !== null);\n```\n\n- 代码中还执行了另外两次相似函数，分别在上述代码前后执行\n  - `invokeGuardedCallback(null, commitBeforeMutationEffects, null);`\n  - `invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);`\n\n此时的调用栈：![6](6.png)\n\n- 在上述代码执行过后，页面上才会真正渲染出真实DOM\n\n","slug":"ReactSourceDebug","published":1,"updated":"2022-04-12T07:38:25.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3oug00001wuq65hpdyv8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>React源码版本：<code>17.0.2</code></li>\n<li>Debug Demo 如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"built_in\">any</span>, &#123; <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> &#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>normal<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            debugger;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.setState(&#123; text: &quot;check&quot; &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setState</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据DEMO，本次学习仅针对React在Web层的渲染<ul>\n<li>页面的初始渲染</li>\n<li>点击按钮后的一次更新渲染</li>\n</ul>\n</li>\n<li>辅助学习文章——<a href=\"https://www.zhihu.com/people/lam-14-21-74\">Lam大佬的React源码解析文章</a></li>\n<li><strong>本文仅是学习记录，记录一些源码的理解，并非详细分析源码</strong></li>\n</ul>\n<h2 id=\"初次渲染\"><a href=\"#初次渲染\" class=\"headerlink\" title=\"初次渲染\"></a>初次渲染</h2><h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过传入入口组件（通常是<code>&lt;App /&gt;</code>）进行整体页面的渲染</li>\n</ul>\n<h3 id=\"JSX处理\"><a href=\"#JSX处理\" class=\"headerlink\" title=\"JSX处理\"></a>JSX处理</h3><ul>\n<li>注意下<code>webpack</code>对所有的JSX进行了处理，比如入口代打包成了这样</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react_dom__WEBPACK_IMPORTED_MODULE_1__.<span class=\"title function_\">render</span>( <span class=\"comment\">/*#__PURE__*/</span>(<span class=\"number\">0</span>,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.<span class=\"property\">jsxDEV</span>)(<span class=\"title class_\">Test</span>, &#123;&#125;, <span class=\"built_in\">void</span> <span class=\"number\">0</span>, <span class=\"literal\">false</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">  <span class=\"attr\">lineNumber</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"attr\">columnNumber</span>: <span class=\"number\">17</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">undefined</span>), <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到所有的JSX都包裹在了一个函数中，函数中有两个关键动作<ul>\n<li>对JSX写法进行验证，是否符合语法</li>\n<li>对JSX进行解析</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DEMO中的Test解析返回的结果</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">$$typeof</span>: <span class=\"title class_\">Symbol</span>(react.<span class=\"property\">element</span>),</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"comment\">/* 这里省略Test的结构 */</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">_owner</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">_store</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li>首次渲染时会去创建<code>root</code>，同时代码首次涉及到React16加入的<code>Fiber</code>数据结构</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建FiberRoot的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo, tag, hydrate, hydrationCallbacks</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo, tag, hydrate);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>(tag);</span><br><span class=\"line\">  root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">  uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\">  <span class=\"title function_\">initializeUpdateQueue</span>(uninitializedFiber);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>附上此时的调用栈</p>\n<p><img src=\"/3.png\" alt=\"3\"></p>\n<h4 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h4><ul>\n<li>源码整体Debug下来，每一个Fiber对应<code>JSX</code>的每一个节点（不同于真实DOM树），Fiber树包括了<code>&lt;App /&gt;</code>这样的组件</li>\n<li>React整体基于Fiber树进行更新，可以说Fiber树就是React的虚拟DOM</li>\n<li>Fiber树的结构如下，以DEMO为例：</li>\n</ul>\n<p><img src=\"/1.png\" alt=\"1\"></p>\n<ul>\n<li><p><strong>每个Fiber只有一个父节点、一个子节点、一个兄弟节点</strong>，可能没有父节点（root），可能没有子节点（两个span和button）、可能没有兄弟节点，但有也不会超过一个</p>\n<ul>\n<li>所以Fiber有以下的数据结构：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">return</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//父节点</span></span><br><span class=\"line\">    <span class=\"attr\">sibiling</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//兄弟节点</span></span><br><span class=\"line\">    <span class=\"attr\">child</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//子节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Fiber节点上记录了对应节点的所有需要渲染的属性，例如：rootFiber有下面这些属性（<strong>某些属性是rootFiber独有的</strong>）：</p>\n</li>\n</ul>\n<p><img src=\"/2.png\" alt=\"2\"></p>\n<h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><ul>\n<li>React会在root节点上监听所有可能的事件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建rootFiber之后，调用的监听函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenToAllSupportedEvents</span>(<span class=\"params\">rootContainerElement</span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootContainerElement[listeningMarker]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rootContainerElement[listeningMarker] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    allNativeEvents.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">domEventName</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!nonDelegatedEvents.<span class=\"title function_\">has</span>(domEventName)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">listenToNativeEvent</span>(domEventName, <span class=\"literal\">false</span>, rootContainerElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">listenToNativeEvent</span>(domEventName, <span class=\"literal\">true</span>, rootContainerElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>allNativeEvents</code>包含了React预定的所有事件，React将事件分成了三组，分为三种优先级，例如优先级最低的一组为：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> discreteEventPairsForSimpleEventPlugin = [<span class=\"string\">&#x27;cancel&#x27;</span>, <span class=\"string\">&#x27;cancel&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;close&#x27;</span>, <span class=\"string\">&#x27;close&#x27;</span>,<span class=\"comment\">/*...其余好多事件*/</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>root</code>上监听事件之后，所有事件都会在<code>root</code>上触发对应处理函数，并后续调用<code>dispatchEvent</code>函数，<strong>这个函数会统一调度和处理所有事件，并在最后进行更新</strong></li>\n</ul>\n<h3 id=\"updateContainer\"><a href=\"#updateContainer\" class=\"headerlink\" title=\"updateContainer\"></a>updateContainer</h3><ul>\n<li>更新（处理Fiber）函数<ul>\n<li><code>unbatchedUpdates</code>涉及到了React的合成事件系统（没有详细了解…）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">unbatchedUpdates</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateContainer</span>(children, fiberRoot, parentComponent, callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数内部对React的更新算法进行了初始化<ul>\n<li><code>updatequeue</code></li>\n<li><code>lane</code>算法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"workLoopSync\"><a href=\"#workLoopSync\" class=\"headerlink\" title=\"workLoopSync\"></a>workLoopSync</h3><ul>\n<li>此函数对Fiber树进行遍历，同时<strong>创建和处理</strong>所有的Fiber节点</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Already timed out, so perform work without checking if we need to yield.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的调用栈：</p>\n<p><img src=\"/4.png\" alt=\"4\"></p>\n<h3 id=\"Fiber遍历\"><a href=\"#Fiber遍历\" class=\"headerlink\" title=\"Fiber遍历\"></a>Fiber遍历</h3><ul>\n<li><p><code>workLoopSync</code>对<strong>Fiber树的遍历（此时其实还只有一个rootFiber根）</strong>主要调用了两个函数</p>\n<ul>\n<li><code>beginWork</code></li>\n<li><code>completeUnitOfWork</code></li>\n</ul>\n</li>\n<li><p>这两个函数都会根据Fiber节点的不同，进行不同的处理</p>\n<ul>\n<li><strong><code>beginWork</code>函数会对每一种Fiber节点调用<code>reconcileChildren</code>函数，通过传入Fiber的child（这里的child是通过JSX解析获取的，还不是Fiber）创建对应的Fiber并且返回这个Fiber</strong></li>\n<li><strong><code>completeUnitOfWork</code>函数则会根据Fiber的类型真正创建DOM节点，并对其初始化</strong></li>\n</ul>\n</li>\n<li><p>同时在<code>workLoopSync</code>内部会按照下面的顺序进行遍历（<strong>b代表<code>beginWork</code>，b1代表第一步调用<code>beginWork</code>处理对应节点</strong>）：<img src=\"/5.png\" alt=\"5\"></p>\n</li>\n<li><p>可以看出，Fiber树遍历之后，<code>workLoopSync</code>会返回Fiber树的根节点，也就是<code>root</code>节点</p>\n</li>\n</ul>\n<h3 id=\"commitRoot\"><a href=\"#commitRoot\" class=\"headerlink\" title=\"commitRoot\"></a>commitRoot</h3><ul>\n<li><code>commitRoot</code>函数则会真正将Fiber树对应的真实DOM结构渲染到页面上</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commitRoot函数内部调用渲染真实DOM的部分代码</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_\">invokeGuardedCallback</span>(<span class=\"literal\">null</span>, commitMutationEffects, <span class=\"literal\">null</span>, root, renderPriorityLevel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasCaughtError</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(nextEffect !== <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>( <span class=\"string\">&quot;Should be working on an effect.&quot;</span> );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _error = <span class=\"title function_\">clearCaughtError</span>();</span><br><span class=\"line\">            <span class=\"title function_\">captureCommitPhaseError</span>(nextEffect, _error);</span><br><span class=\"line\">            nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码中还执行了另外两次相似函数，分别在上述代码前后执行<ul>\n<li><code>invokeGuardedCallback(null, commitBeforeMutationEffects, null);</code></li>\n<li><code>invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);</code></li>\n</ul>\n</li>\n</ul>\n<p>此时的调用栈：<img src=\"/6.png\" alt=\"6\"></p>\n<ul>\n<li>在上述代码执行过后，页面上才会真正渲染出真实DOM</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>React源码版本：<code>17.0.2</code></li>\n<li>Debug Demo 如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span>&lt;<span class=\"built_in\">any</span>, &#123; <span class=\"attr\">text</span>: <span class=\"built_in\">string</span> &#125;&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;hello&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;this.state.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>normal<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            debugger;</span></span><br><span class=\"line\"><span class=\"language-xml\">            this.setState(&#123; text: &quot;check&quot; &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setState</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>根据DEMO，本次学习仅针对React在Web层的渲染<ul>\n<li>页面的初始渲染</li>\n<li>点击按钮后的一次更新渲染</li>\n</ul>\n</li>\n<li>辅助学习文章——<a href=\"https://www.zhihu.com/people/lam-14-21-74\">Lam大佬的React源码解析文章</a></li>\n<li><strong>本文仅是学习记录，记录一些源码的理解，并非详细分析源码</strong></li>\n</ul>\n<h2 id=\"初次渲染\"><a href=\"#初次渲染\" class=\"headerlink\" title=\"初次渲染\"></a>初次渲染</h2><h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Test</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通过传入入口组件（通常是<code>&lt;App /&gt;</code>）进行整体页面的渲染</li>\n</ul>\n<h3 id=\"JSX处理\"><a href=\"#JSX处理\" class=\"headerlink\" title=\"JSX处理\"></a>JSX处理</h3><ul>\n<li>注意下<code>webpack</code>对所有的JSX进行了处理，比如入口代打包成了这样</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react_dom__WEBPACK_IMPORTED_MODULE_1__.<span class=\"title function_\">render</span>( <span class=\"comment\">/*#__PURE__*/</span>(<span class=\"number\">0</span>,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.<span class=\"property\">jsxDEV</span>)(<span class=\"title class_\">Test</span>, &#123;&#125;, <span class=\"built_in\">void</span> <span class=\"number\">0</span>, <span class=\"literal\">false</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">  <span class=\"attr\">lineNumber</span>: <span class=\"number\">52</span>,</span><br><span class=\"line\">  <span class=\"attr\">columnNumber</span>: <span class=\"number\">17</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">undefined</span>), <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;root&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到所有的JSX都包裹在了一个函数中，函数中有两个关键动作<ul>\n<li>对JSX写法进行验证，是否符合语法</li>\n<li>对JSX进行解析</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DEMO中的Test解析返回的结果</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">$$typeof</span>: <span class=\"title class_\">Symbol</span>(react.<span class=\"property\">element</span>),</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"comment\">/* 这里省略Test的结构 */</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">_owner</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">_store</span>: &#123;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><ul>\n<li>首次渲染时会去创建<code>root</code>，同时代码首次涉及到React16加入的<code>Fiber</code>数据结构</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建FiberRoot的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createFiberRoot</span>(<span class=\"params\">containerInfo, tag, hydrate, hydrationCallbacks</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> root = <span class=\"keyword\">new</span> <span class=\"title class_\">FiberRootNode</span>(containerInfo, tag, hydrate);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> uninitializedFiber = <span class=\"title function_\">createHostRootFiber</span>(tag);</span><br><span class=\"line\">  root.<span class=\"property\">current</span> = uninitializedFiber;</span><br><span class=\"line\">  uninitializedFiber.<span class=\"property\">stateNode</span> = root;</span><br><span class=\"line\">  <span class=\"title function_\">initializeUpdateQueue</span>(uninitializedFiber);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>附上此时的调用栈</p>\n<p><img src=\"/3.png\" alt=\"3\"></p>\n<h4 id=\"Fiber\"><a href=\"#Fiber\" class=\"headerlink\" title=\"Fiber\"></a>Fiber</h4><ul>\n<li>源码整体Debug下来，每一个Fiber对应<code>JSX</code>的每一个节点（不同于真实DOM树），Fiber树包括了<code>&lt;App /&gt;</code>这样的组件</li>\n<li>React整体基于Fiber树进行更新，可以说Fiber树就是React的虚拟DOM</li>\n<li>Fiber树的结构如下，以DEMO为例：</li>\n</ul>\n<p><img src=\"/1.png\" alt=\"1\"></p>\n<ul>\n<li><p><strong>每个Fiber只有一个父节点、一个子节点、一个兄弟节点</strong>，可能没有父节点（root），可能没有子节点（两个span和button）、可能没有兄弟节点，但有也不会超过一个</p>\n<ul>\n<li>所以Fiber有以下的数据结构：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Fiber</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">return</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//父节点</span></span><br><span class=\"line\">    <span class=\"attr\">sibiling</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//兄弟节点</span></span><br><span class=\"line\">    <span class=\"attr\">child</span>:<span class=\"title class_\">FiberNode</span>, <span class=\"comment\">//子节点</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Fiber节点上记录了对应节点的所有需要渲染的属性，例如：rootFiber有下面这些属性（<strong>某些属性是rootFiber独有的</strong>）：</p>\n</li>\n</ul>\n<p><img src=\"/2.png\" alt=\"2\"></p>\n<h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><ul>\n<li>React会在root节点上监听所有可能的事件</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建rootFiber之后，调用的监听函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">listenToAllSupportedEvents</span>(<span class=\"params\">rootContainerElement</span>) &#123;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rootContainerElement[listeningMarker]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rootContainerElement[listeningMarker] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    allNativeEvents.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">domEventName</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!nonDelegatedEvents.<span class=\"title function_\">has</span>(domEventName)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">listenToNativeEvent</span>(domEventName, <span class=\"literal\">false</span>, rootContainerElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">listenToNativeEvent</span>(domEventName, <span class=\"literal\">true</span>, rootContainerElement, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>allNativeEvents</code>包含了React预定的所有事件，React将事件分成了三组，分为三种优先级，例如优先级最低的一组为：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> discreteEventPairsForSimpleEventPlugin = [<span class=\"string\">&#x27;cancel&#x27;</span>, <span class=\"string\">&#x27;cancel&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;click&#x27;</span>, <span class=\"string\">&#x27;close&#x27;</span>, <span class=\"string\">&#x27;close&#x27;</span>,<span class=\"comment\">/*...其余好多事件*/</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<code>root</code>上监听事件之后，所有事件都会在<code>root</code>上触发对应处理函数，并后续调用<code>dispatchEvent</code>函数，<strong>这个函数会统一调度和处理所有事件，并在最后进行更新</strong></li>\n</ul>\n<h3 id=\"updateContainer\"><a href=\"#updateContainer\" class=\"headerlink\" title=\"updateContainer\"></a>updateContainer</h3><ul>\n<li>更新（处理Fiber）函数<ul>\n<li><code>unbatchedUpdates</code>涉及到了React的合成事件系统（没有详细了解…）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">unbatchedUpdates</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateContainer</span>(children, fiberRoot, parentComponent, callback);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数内部对React的更新算法进行了初始化<ul>\n<li><code>updatequeue</code></li>\n<li><code>lane</code>算法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"workLoopSync\"><a href=\"#workLoopSync\" class=\"headerlink\" title=\"workLoopSync\"></a>workLoopSync</h3><ul>\n<li>此函数对Fiber树进行遍历，同时<strong>创建和处理</strong>所有的Fiber节点</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">workLoopSync</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Already timed out, so perform work without checking if we need to yield.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (workInProgress !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">performUnitOfWork</span>(workInProgress);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的调用栈：</p>\n<p><img src=\"/4.png\" alt=\"4\"></p>\n<h3 id=\"Fiber遍历\"><a href=\"#Fiber遍历\" class=\"headerlink\" title=\"Fiber遍历\"></a>Fiber遍历</h3><ul>\n<li><p><code>workLoopSync</code>对<strong>Fiber树的遍历（此时其实还只有一个rootFiber根）</strong>主要调用了两个函数</p>\n<ul>\n<li><code>beginWork</code></li>\n<li><code>completeUnitOfWork</code></li>\n</ul>\n</li>\n<li><p>这两个函数都会根据Fiber节点的不同，进行不同的处理</p>\n<ul>\n<li><strong><code>beginWork</code>函数会对每一种Fiber节点调用<code>reconcileChildren</code>函数，通过传入Fiber的child（这里的child是通过JSX解析获取的，还不是Fiber）创建对应的Fiber并且返回这个Fiber</strong></li>\n<li><strong><code>completeUnitOfWork</code>函数则会根据Fiber的类型真正创建DOM节点，并对其初始化</strong></li>\n</ul>\n</li>\n<li><p>同时在<code>workLoopSync</code>内部会按照下面的顺序进行遍历（<strong>b代表<code>beginWork</code>，b1代表第一步调用<code>beginWork</code>处理对应节点</strong>）：<img src=\"/5.png\" alt=\"5\"></p>\n</li>\n<li><p>可以看出，Fiber树遍历之后，<code>workLoopSync</code>会返回Fiber树的根节点，也就是<code>root</code>节点</p>\n</li>\n</ul>\n<h3 id=\"commitRoot\"><a href=\"#commitRoot\" class=\"headerlink\" title=\"commitRoot\"></a>commitRoot</h3><ul>\n<li><code>commitRoot</code>函数则会真正将Fiber树对应的真实DOM结构渲染到页面上</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// commitRoot函数内部调用渲染真实DOM的部分代码</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_\">invokeGuardedCallback</span>(<span class=\"literal\">null</span>, commitMutationEffects, <span class=\"literal\">null</span>, root, renderPriorityLevel);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasCaughtError</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!(nextEffect !== <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"title class_\">Error</span>( <span class=\"string\">&quot;Should be working on an effect.&quot;</span> );</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> _error = <span class=\"title function_\">clearCaughtError</span>();</span><br><span class=\"line\">            <span class=\"title function_\">captureCommitPhaseError</span>(nextEffect, _error);</span><br><span class=\"line\">            nextEffect = nextEffect.<span class=\"property\">nextEffect</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>代码中还执行了另外两次相似函数，分别在上述代码前后执行<ul>\n<li><code>invokeGuardedCallback(null, commitBeforeMutationEffects, null);</code></li>\n<li><code>invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);</code></li>\n</ul>\n</li>\n</ul>\n<p>此时的调用栈：<img src=\"/6.png\" alt=\"6\"></p>\n<ul>\n<li>在上述代码执行过后，页面上才会真正渲染出真实DOM</li>\n</ul>\n"},{"title":"ReactSourceDiffDebug","date":"2022-04-05T23:28:32.000Z","description":"React Diff 算法的一次源码Debug学习","top_img":"https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100b","cover":"/img/cover_1.webp","_content":"## 前言\n\n- React源码版本：`17.0.2`\n\n- DEMO如下\n\n```tsx\nconst Test = () => {\n  debugger;\n  const [list, setList] = useState<ListItemType[]>([\n    { text: \"22 a\", key: \"a\" },\n    { text: \"13 b\", key: \"b\" },\n    { text: \"21 c\", key: \"c\" },\n    { text: \"12 d\", key: \"d\" },\n    { text: \"32 e\", key: \"e\" },\n    { text: \"44 f\", key: \"f\" },\n  ]);\n\n  return (\n    <>\n      <ul>\n        {list.map((item) => {\n          return item ? <li key={item.key}>{item.text}</li> : null;\n        })}\n      </ul>\n      <button\n        onClick={() => {\n          debugger;\n          setList((prev) => {\n            let newArr: ListItemType[] = [];\n            // 点击按钮之后，随机删除一个li节点，随机挑选一个节点放到第一行\n            prev.splice(Math.floor(Math.random() * 5), 1);\n            newArr.push(...prev.splice(Math.floor(Math.random() * 4), 1));\n            newArr = newArr.concat(prev);\n            return newArr;\n          });\n        }}\n      >\n        random all\n      </button>\n    </>\n  );\n};\n```\n\n## Diff解析\n\n### Debug时机\n\n- **首次渲染之后**，点击`random all`按钮随机处理`state`之后执行`performSyncWorkOnRoot`函数时进行Debug\n- **`Test`组件根据`hook`获取最新的`state`，后续先对Fiber更新**\n\n### reconcileChildren\n\n- `beginWork`对`ul`标签进行处理时，**会对其`children`进行一次Diff操作**\n\n```typescript\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n    // current是当前已经渲染过的Fiber（workInProcess.alternate）\n    if (current === null) {\n        // 这个是初始化时进行的操作\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n    } else {\n        // 这个是Fiber已经存在时的处理（后续更新）\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n    }\n}\n```\n\n- `reconcileChildFibers`针对不同的`child`调用不同的函数去处理`Fiber`，**这里我们主要看 React 对多个同级DOM的删除、更新怎么处理的（DOM Diff）**\n\n```typescript\nfunction reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    var isObject = typeof newChild === 'object' && newChild !== null;\n    if (isObject) {\n        switch (newChild.$$typeof) {\n            // 这里处理单个child\n            case REACT_ELEMENT_TYPE:\n                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\t\t   // ......... 例如：Fragment\n        }\n    }\n\t// child是字符串或者数字的处理\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\t// DOM Diff\n    if (isArray$1(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n    }\n\t// ...........其他类型\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n}\n```\n\n### reconcileChildrenArray\n\n- **`reconcileChildrenArray`对`childs`进行处理（创建或者复用DOM）**\n- 算法浅析如下：\n\n```typescript\nfunction reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n\t// 首先对每个child的key进行验证，是否重复等\n    // 代码省略\n\n    var resultingFirstChild = null; // 最后返回的Fiber，用于构建Fiber树\n    var previousNewFiber = null; // 保存遍历过程中的上一个newFiber\n    var oldFiber = currentFirstChild; // 第一个oldFiber\n    // React只允许DOM节点复用时向右移动\n    // 只要oldFiber的下标比lastPlacedIndex大，就说明这个节点需要右移\n    // 具体算法看 placeChild 这个函数\n    var lastPlacedIndex = 0; // 标记newFiber中最新已处理节点的下标\n    var newIdx = 0; // 新Child的索引\n    var nextOldFiber = null; // 下一个oldFiber\n\t// 第一次遍历，oldChild和newChild同步遍历\n    // 比如：oldChild[0]和newChild[0]尝试是否可以复用\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n        if (oldFiber.index > newIdx) { // 旧节点在新节点右边，不了解这种情况什么时候发生...\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n        } else {\n\t\t   // 获取下个旧节点，比如oldChild[0]的sibling就是oldChild[1]，Fiber树的原因\n            nextOldFiber = oldFiber.sibling;\n        }\n\t    // 尝试复用旧Fiber\n        // updateSlot内部通过检测key值是否相同来判断是否能够复用\n        // 如果能够复用，oldFiber保留，并根据newChild更新下属性即可\n        // 同时还有处理别的newFiber的代码，比如newFiber是个textNode，或者newFiber是个Fragment\n        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\t    //如果不能复用，newFiber为null，此时直接跳出第一次循环\n        if (newFiber === null) {\n            if (oldFiber === null) {\n                oldFiber = nextOldFiber;\n            }\n            break;\n        }\n\t    // 需要删除这个Fiber\n        if (shouldTrackSideEffects) { // shouldTrackSideEffetcs在更新操作中始终为true\n            if (oldFiber && newFiber.alternate === null) {\n                deleteChild(returnFiber, oldFiber);\n            }\n        }\n\t    //更新lastPlacedIndex\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        // 获取第一个newFiber用于构建Fiber树，并将上一个newFiber的sibling指向这个newFiber\n        if (previousNewFiber === null) { // 第一次循环才会进入这个\n            resultingFirstChild = newFiber;\n        } else {\n            previousNewFiber.sibling = newFiber;\n        }\n\t   // 进入下一次循环，更新标识变量\n        previousNewFiber = newFiber;\n        oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n        //.... 新Child遍历完毕，说明剩下的oldFiber在新DOM树中不存在，直接删除（这里只是标记，DOM操作都在 commitRoot 函数里）\n    }\n\n    if (oldFiber === null) {\n        //.... 旧Child遍历完毕，说明剩下的newFiber是新添加的，没有可复用Fiber，直接创建Fiber即可\n    }\n    // 遍历旧Fiber创建set，键为key值，值为Fiber\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\t// 第二次遍历，对于每一个newChild，直接从set里找有没有key值相同可以复用的Fiber\n    for (; newIdx < newChildren.length; newIdx++) {\n        // updateFromMap 直接去上面生成的map里面去找有没有key值相同的Fiber，如果有直接复用，否则直接新建一个\n        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\t    // 删除map中的oldFiber\n        if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n                if (_newFiber2.alternate !== null) {\n                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                }\n            }\n\t\t   // 更新lastPlacedIndex\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\t\t  // 和第一次遍历时的操作一样\n            if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber2;\n            } else {\n                previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n        }\n    }\n\t// 删除没有用到的旧ChildFiber\n    if (shouldTrackSideEffects) {\n        existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n        });\n    }\n\n    return resultingFirstChild;\n}\n```\n\n- **两次遍历**\n  - **第一次同步遍历找可复用节点**\n  - **第二次利用`Set`找可复用节点**\n\n### placeChild\n\n- **用于比较`newFiber`和`oldFiber`的`index`，来确定`newFiber`具体的DOM操作**\n- 代码解析如下：\n\n```typescript\nfunction placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex; // 设置newFiber的index\n    if (!shouldTrackSideEffects) { // 初始化时不需要标记节点是否需要移动\n        return lastPlacedIndex;\n    }\n    var current = newFiber.alternate; // oldFiber\n    if (current !== null) {\n        var oldIndex = current.index; // oldFiber下标\n        if (oldIndex < lastPlacedIndex) {\n            // 旧节点在最新节点下标左边，说明在新DOM中需要右移\n            newFiber.flags = Placement; // 标记\n            return lastPlacedIndex;\n        } else {\n            // 返回覆盖lastPlacedIndex\n            return oldIndex; // 这个节点不需要移动，在更新后的DOM树中保持原位即可(因为React中同级DOM节点Diff时只右移)，标记下这是新DOM中最新Fiber的index\n        }\n    } else {\n        // 插入操作\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n    }\n}\n```\n\n### commitMutationEffects\n\n- **`commitRoot`阶段用于更新真实DOM的函数，看下`Diff`阶段标记Fiber之后，真实DOM怎么操作**\n- **`nextEffect`构成一个更新链（所有需要操作的Fiber会形成一个链表，一个接一个处理），还没搞懂这个根据什么顺序连接起来......**\n- 已省略部分代码\n\n```typescript\nfunction commitMutationEffects(root, renderPriorityLevel) {\n  while (nextEffect !== null) {\n    setCurrentFiber(nextEffect); // nextEffect 就是需要更新的Fiber\n    var flags = nextEffect.flags; // flags Fiber的标记，比如placeChild设置的移动标记\n    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating); // 计算flags\n    switch (primaryFlags) {\n      case Placement:\n        {\n          commitPlacement(nextEffect); // 移动节点的函数\n          nextEffect.flags &= ~Placement;\n          break;\n        }\n      case PlacementAndUpdate:\n        // ...\n      case Hydrating:\n       \t// ...\n      case HydratingAndUpdate:\n        // ...\n      case Update:\n        // ...\n      case Deletion:\n        // ...\n    }\n    resetCurrentFiber();\n    nextEffect = nextEffect.nextEffect; // 获取下一个需要更新的Fiber\n  }\n}\n```\n\n### commitPlacement\n\n- **`commitPlacement`函数内部真正调用DOM操作处理DOM节点**\n- 已省略部分代码\n\n```javascript\nfunction commitPlacement(finishedWork) {\n  var parentFiber = getHostParentFiber(finishedWork); // 获取父级DOM，本DEMO中就是 ul 节点\n  var parent;\n  var isContainer;\n  var parentStateNode = parentFiber.stateNode; // 获取父节点的真实DOM\n\n  switch (parentFiber.tag) { //根据父节点类型，设置变量\n    case HostComponent: // 本DEMO中会走这个\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      //...\n    case HostPortal:\n      //...\n    case FundamentalComponent:\n      //...\n    default:\n      // ... 没找到合适的节点类型而报错\n  }\n\n  var before = getHostSibling(finishedWork); // 获取Fiber的sibling链中第一个flags不是Placement的节点(即不需要移动的节点)\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    // 本DEMO调用这个函数\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n```\n\n- **最后的`insertOrAppendPlacementNode`会根据`before`变量是否存在执行以下操作：**\n  - **`before`存在，直接调用`parent.insertBefore(current,before)`将`current`放到`before`之前**\n  - **`before`不存在，直接调用`parent.appendChild(current)`**\n\n\n","source":"_posts/ReactSourceDiffDebug.md","raw":"---\ntitle: ReactSourceDiffDebug\ndate: 2022-04-06 07:28:32\ntags:\n- React\n- Diff\ncategories:\n- React\ndescription: React Diff 算法的一次源码Debug学习\ntop_img: https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100b\ncover: /img/cover_1.webp\n\n---\n## 前言\n\n- React源码版本：`17.0.2`\n\n- DEMO如下\n\n```tsx\nconst Test = () => {\n  debugger;\n  const [list, setList] = useState<ListItemType[]>([\n    { text: \"22 a\", key: \"a\" },\n    { text: \"13 b\", key: \"b\" },\n    { text: \"21 c\", key: \"c\" },\n    { text: \"12 d\", key: \"d\" },\n    { text: \"32 e\", key: \"e\" },\n    { text: \"44 f\", key: \"f\" },\n  ]);\n\n  return (\n    <>\n      <ul>\n        {list.map((item) => {\n          return item ? <li key={item.key}>{item.text}</li> : null;\n        })}\n      </ul>\n      <button\n        onClick={() => {\n          debugger;\n          setList((prev) => {\n            let newArr: ListItemType[] = [];\n            // 点击按钮之后，随机删除一个li节点，随机挑选一个节点放到第一行\n            prev.splice(Math.floor(Math.random() * 5), 1);\n            newArr.push(...prev.splice(Math.floor(Math.random() * 4), 1));\n            newArr = newArr.concat(prev);\n            return newArr;\n          });\n        }}\n      >\n        random all\n      </button>\n    </>\n  );\n};\n```\n\n## Diff解析\n\n### Debug时机\n\n- **首次渲染之后**，点击`random all`按钮随机处理`state`之后执行`performSyncWorkOnRoot`函数时进行Debug\n- **`Test`组件根据`hook`获取最新的`state`，后续先对Fiber更新**\n\n### reconcileChildren\n\n- `beginWork`对`ul`标签进行处理时，**会对其`children`进行一次Diff操作**\n\n```typescript\nfunction reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n    // current是当前已经渲染过的Fiber（workInProcess.alternate）\n    if (current === null) {\n        // 这个是初始化时进行的操作\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n    } else {\n        // 这个是Fiber已经存在时的处理（后续更新）\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n    }\n}\n```\n\n- `reconcileChildFibers`针对不同的`child`调用不同的函数去处理`Fiber`，**这里我们主要看 React 对多个同级DOM的删除、更新怎么处理的（DOM Diff）**\n\n```typescript\nfunction reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n    var isObject = typeof newChild === 'object' && newChild !== null;\n    if (isObject) {\n        switch (newChild.$$typeof) {\n            // 这里处理单个child\n            case REACT_ELEMENT_TYPE:\n                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n\t\t   // ......... 例如：Fragment\n        }\n    }\n\t// child是字符串或者数字的处理\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n        return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));\n    }\n\t// DOM Diff\n    if (isArray$1(newChild)) {\n        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n    }\n\t// ...........其他类型\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n}\n```\n\n### reconcileChildrenArray\n\n- **`reconcileChildrenArray`对`childs`进行处理（创建或者复用DOM）**\n- 算法浅析如下：\n\n```typescript\nfunction reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n\t// 首先对每个child的key进行验证，是否重复等\n    // 代码省略\n\n    var resultingFirstChild = null; // 最后返回的Fiber，用于构建Fiber树\n    var previousNewFiber = null; // 保存遍历过程中的上一个newFiber\n    var oldFiber = currentFirstChild; // 第一个oldFiber\n    // React只允许DOM节点复用时向右移动\n    // 只要oldFiber的下标比lastPlacedIndex大，就说明这个节点需要右移\n    // 具体算法看 placeChild 这个函数\n    var lastPlacedIndex = 0; // 标记newFiber中最新已处理节点的下标\n    var newIdx = 0; // 新Child的索引\n    var nextOldFiber = null; // 下一个oldFiber\n\t// 第一次遍历，oldChild和newChild同步遍历\n    // 比如：oldChild[0]和newChild[0]尝试是否可以复用\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n        if (oldFiber.index > newIdx) { // 旧节点在新节点右边，不了解这种情况什么时候发生...\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n        } else {\n\t\t   // 获取下个旧节点，比如oldChild[0]的sibling就是oldChild[1]，Fiber树的原因\n            nextOldFiber = oldFiber.sibling;\n        }\n\t    // 尝试复用旧Fiber\n        // updateSlot内部通过检测key值是否相同来判断是否能够复用\n        // 如果能够复用，oldFiber保留，并根据newChild更新下属性即可\n        // 同时还有处理别的newFiber的代码，比如newFiber是个textNode，或者newFiber是个Fragment\n        var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n\t    //如果不能复用，newFiber为null，此时直接跳出第一次循环\n        if (newFiber === null) {\n            if (oldFiber === null) {\n                oldFiber = nextOldFiber;\n            }\n            break;\n        }\n\t    // 需要删除这个Fiber\n        if (shouldTrackSideEffects) { // shouldTrackSideEffetcs在更新操作中始终为true\n            if (oldFiber && newFiber.alternate === null) {\n                deleteChild(returnFiber, oldFiber);\n            }\n        }\n\t    //更新lastPlacedIndex\n        lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n        // 获取第一个newFiber用于构建Fiber树，并将上一个newFiber的sibling指向这个newFiber\n        if (previousNewFiber === null) { // 第一次循环才会进入这个\n            resultingFirstChild = newFiber;\n        } else {\n            previousNewFiber.sibling = newFiber;\n        }\n\t   // 进入下一次循环，更新标识变量\n        previousNewFiber = newFiber;\n        oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n        //.... 新Child遍历完毕，说明剩下的oldFiber在新DOM树中不存在，直接删除（这里只是标记，DOM操作都在 commitRoot 函数里）\n    }\n\n    if (oldFiber === null) {\n        //.... 旧Child遍历完毕，说明剩下的newFiber是新添加的，没有可复用Fiber，直接创建Fiber即可\n    }\n    // 遍历旧Fiber创建set，键为key值，值为Fiber\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\t// 第二次遍历，对于每一个newChild，直接从set里找有没有key值相同可以复用的Fiber\n    for (; newIdx < newChildren.length; newIdx++) {\n        // updateFromMap 直接去上面生成的map里面去找有没有key值相同的Fiber，如果有直接复用，否则直接新建一个\n        var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n\t    // 删除map中的oldFiber\n        if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n                if (_newFiber2.alternate !== null) {\n                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n                }\n            }\n\t\t   // 更新lastPlacedIndex\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\t\t  // 和第一次遍历时的操作一样\n            if (previousNewFiber === null) {\n                resultingFirstChild = _newFiber2;\n            } else {\n                previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n        }\n    }\n\t// 删除没有用到的旧ChildFiber\n    if (shouldTrackSideEffects) {\n        existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n        });\n    }\n\n    return resultingFirstChild;\n}\n```\n\n- **两次遍历**\n  - **第一次同步遍历找可复用节点**\n  - **第二次利用`Set`找可复用节点**\n\n### placeChild\n\n- **用于比较`newFiber`和`oldFiber`的`index`，来确定`newFiber`具体的DOM操作**\n- 代码解析如下：\n\n```typescript\nfunction placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex; // 设置newFiber的index\n    if (!shouldTrackSideEffects) { // 初始化时不需要标记节点是否需要移动\n        return lastPlacedIndex;\n    }\n    var current = newFiber.alternate; // oldFiber\n    if (current !== null) {\n        var oldIndex = current.index; // oldFiber下标\n        if (oldIndex < lastPlacedIndex) {\n            // 旧节点在最新节点下标左边，说明在新DOM中需要右移\n            newFiber.flags = Placement; // 标记\n            return lastPlacedIndex;\n        } else {\n            // 返回覆盖lastPlacedIndex\n            return oldIndex; // 这个节点不需要移动，在更新后的DOM树中保持原位即可(因为React中同级DOM节点Diff时只右移)，标记下这是新DOM中最新Fiber的index\n        }\n    } else {\n        // 插入操作\n        newFiber.flags = Placement;\n        return lastPlacedIndex;\n    }\n}\n```\n\n### commitMutationEffects\n\n- **`commitRoot`阶段用于更新真实DOM的函数，看下`Diff`阶段标记Fiber之后，真实DOM怎么操作**\n- **`nextEffect`构成一个更新链（所有需要操作的Fiber会形成一个链表，一个接一个处理），还没搞懂这个根据什么顺序连接起来......**\n- 已省略部分代码\n\n```typescript\nfunction commitMutationEffects(root, renderPriorityLevel) {\n  while (nextEffect !== null) {\n    setCurrentFiber(nextEffect); // nextEffect 就是需要更新的Fiber\n    var flags = nextEffect.flags; // flags Fiber的标记，比如placeChild设置的移动标记\n    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating); // 计算flags\n    switch (primaryFlags) {\n      case Placement:\n        {\n          commitPlacement(nextEffect); // 移动节点的函数\n          nextEffect.flags &= ~Placement;\n          break;\n        }\n      case PlacementAndUpdate:\n        // ...\n      case Hydrating:\n       \t// ...\n      case HydratingAndUpdate:\n        // ...\n      case Update:\n        // ...\n      case Deletion:\n        // ...\n    }\n    resetCurrentFiber();\n    nextEffect = nextEffect.nextEffect; // 获取下一个需要更新的Fiber\n  }\n}\n```\n\n### commitPlacement\n\n- **`commitPlacement`函数内部真正调用DOM操作处理DOM节点**\n- 已省略部分代码\n\n```javascript\nfunction commitPlacement(finishedWork) {\n  var parentFiber = getHostParentFiber(finishedWork); // 获取父级DOM，本DEMO中就是 ul 节点\n  var parent;\n  var isContainer;\n  var parentStateNode = parentFiber.stateNode; // 获取父节点的真实DOM\n\n  switch (parentFiber.tag) { //根据父节点类型，设置变量\n    case HostComponent: // 本DEMO中会走这个\n      parent = parentStateNode;\n      isContainer = false;\n      break;\n    case HostRoot:\n      //...\n    case HostPortal:\n      //...\n    case FundamentalComponent:\n      //...\n    default:\n      // ... 没找到合适的节点类型而报错\n  }\n\n  var before = getHostSibling(finishedWork); // 获取Fiber的sibling链中第一个flags不是Placement的节点(即不需要移动的节点)\n  if (isContainer) {\n    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);\n  } else {\n    // 本DEMO调用这个函数\n    insertOrAppendPlacementNode(finishedWork, before, parent);\n  }\n}\n```\n\n- **最后的`insertOrAppendPlacementNode`会根据`before`变量是否存在执行以下操作：**\n  - **`before`存在，直接调用`parent.insertBefore(current,before)`将`current`放到`before`之前**\n  - **`before`不存在，直接调用`parent.appendChild(current)`**\n\n\n","slug":"ReactSourceDiffDebug","published":1,"updated":"2022-04-12T07:38:25.117Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3oum00011wuqfpjy4fhc","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><p>React源码版本：<code>17.0.2</code></p>\n</li>\n<li><p>DEMO如下</p>\n</li>\n</ul>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [list, setList] = useState&lt;<span class=\"title class_\">ListItemType</span>[]&gt;([</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;22 a&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;a&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;13 b&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;b&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;21 c&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;c&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;12 d&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;d&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;32 e&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;e&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;44 f&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;f&quot;</span> &#125;,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;list.map((item) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return item ? <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item.key&#125;</span>&gt;</span>&#123;item.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span> : null;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          debugger;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setList((prev) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            let newArr: ListItemType[] = [];</span></span><br><span class=\"line\"><span class=\"language-xml\">            // 点击按钮之后，随机删除一个li节点，随机挑选一个节点放到第一行</span></span><br><span class=\"line\"><span class=\"language-xml\">            prev.splice(Math.floor(Math.random() * 5), 1);</span></span><br><span class=\"line\"><span class=\"language-xml\">            newArr.push(...prev.splice(Math.floor(Math.random() * 4), 1));</span></span><br><span class=\"line\"><span class=\"language-xml\">            newArr = newArr.concat(prev);</span></span><br><span class=\"line\"><span class=\"language-xml\">            return newArr;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        random all</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Diff解析\"><a href=\"#Diff解析\" class=\"headerlink\" title=\"Diff解析\"></a>Diff解析</h2><h3 id=\"Debug时机\"><a href=\"#Debug时机\" class=\"headerlink\" title=\"Debug时机\"></a>Debug时机</h3><ul>\n<li><strong>首次渲染之后</strong>，点击<code>random all</code>按钮随机处理<code>state</code>之后执行<code>performSyncWorkOnRoot</code>函数时进行Debug</li>\n<li><strong><code>Test</code>组件根据<code>hook</code>获取最新的<code>state</code>，后续先对Fiber更新</strong></li>\n</ul>\n<h3 id=\"reconcileChildren\"><a href=\"#reconcileChildren\" class=\"headerlink\" title=\"reconcileChildren\"></a>reconcileChildren</h3><ul>\n<li><code>beginWork</code>对<code>ul</code>标签进行处理时，<strong>会对其<code>children</code>进行一次Diff操作</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">current, workInProgress, nextChildren, renderLanes</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// current是当前已经渲染过的Fiber（workInProcess.alternate）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是初始化时进行的操作</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(workInProgress, <span class=\"literal\">null</span>, nextChildren, renderLanes);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是Fiber已经存在时的处理（后续更新）</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(workInProgress, current.<span class=\"property\">child</span>, nextChildren, renderLanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>reconcileChildFibers</code>针对不同的<code>child</code>调用不同的函数去处理<code>Fiber</code>，<strong>这里我们主要看 React 对多个同级DOM的删除、更新怎么处理的（DOM Diff）</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\">returnFiber, currentFirstChild, newChild, lanes</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isObject = <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (newChild.<span class=\"property\">$$typeof</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里处理单个child</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(<span class=\"title function_\">reconcileSingleElement</span>(returnFiber, currentFirstChild, newChild, lanes));</span><br><span class=\"line\">\t\t   <span class=\"comment\">// ......... 例如：Fragment</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// child是字符串或者数字的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;string&#x27;</span> || <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(<span class=\"title function_\">reconcileSingleTextNode</span>(returnFiber, currentFirstChild, <span class=\"string\">&#x27;&#x27;</span> + newChild, lanes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// DOM Diff</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray$1</span>(newChild)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileChildrenArray</span>(returnFiber, currentFirstChild, newChild, lanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...........其他类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, currentFirstChild);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reconcileChildrenArray\"><a href=\"#reconcileChildrenArray\" class=\"headerlink\" title=\"reconcileChildrenArray\"></a>reconcileChildrenArray</h3><ul>\n<li><strong><code>reconcileChildrenArray</code>对<code>childs</code>进行处理（创建或者复用DOM）</strong></li>\n<li>算法浅析如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildrenArray</span>(<span class=\"params\">returnFiber, currentFirstChild, newChildren, lanes</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 首先对每个child的key进行验证，是否重复等</span></span><br><span class=\"line\">    <span class=\"comment\">// 代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultingFirstChild = <span class=\"literal\">null</span>; <span class=\"comment\">// 最后返回的Fiber，用于构建Fiber树</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previousNewFiber = <span class=\"literal\">null</span>; <span class=\"comment\">// 保存遍历过程中的上一个newFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldFiber = currentFirstChild; <span class=\"comment\">// 第一个oldFiber</span></span><br><span class=\"line\">    <span class=\"comment\">// React只允许DOM节点复用时向右移动</span></span><br><span class=\"line\">    <span class=\"comment\">// 只要oldFiber的下标比lastPlacedIndex大，就说明这个节点需要右移</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体算法看 placeChild 这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastPlacedIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 标记newFiber中最新已处理节点的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newIdx = <span class=\"number\">0</span>; <span class=\"comment\">// 新Child的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextOldFiber = <span class=\"literal\">null</span>; <span class=\"comment\">// 下一个oldFiber</span></span><br><span class=\"line\">\t<span class=\"comment\">// 第一次遍历，oldChild和newChild同步遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如：oldChild[0]和newChild[0]尝试是否可以复用</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; oldFiber !== <span class=\"literal\">null</span> &amp;&amp; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldFiber.<span class=\"property\">index</span> &gt; newIdx) &#123; <span class=\"comment\">// 旧节点在新节点右边，不了解这种情况什么时候发生...</span></span><br><span class=\"line\">            nextOldFiber = oldFiber;</span><br><span class=\"line\">            oldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 获取下个旧节点，比如oldChild[0]的sibling就是oldChild[1]，Fiber树的原因</span></span><br><span class=\"line\">            nextOldFiber = oldFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">// 尝试复用旧Fiber</span></span><br><span class=\"line\">        <span class=\"comment\">// updateSlot内部通过检测key值是否相同来判断是否能够复用</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果能够复用，oldFiber保留，并根据newChild更新下属性即可</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时还有处理别的newFiber的代码，比如newFiber是个textNode，或者newFiber是个Fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> newFiber = <span class=\"title function_\">updateSlot</span>(returnFiber, oldFiber, newChildren[newIdx], lanes);</span><br><span class=\"line\">\t    <span class=\"comment\">//如果不能复用，newFiber为null，此时直接跳出第一次循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldFiber = nextOldFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">// 需要删除这个Fiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123; <span class=\"comment\">// shouldTrackSideEffetcs在更新操作中始终为true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">deleteChild</span>(returnFiber, oldFiber);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">//更新lastPlacedIndex</span></span><br><span class=\"line\">        lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取第一个newFiber用于构建Fiber树，并将上一个newFiber的sibling指向这个newFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// 第一次循环才会进入这个</span></span><br><span class=\"line\">            resultingFirstChild = newFiber;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t   <span class=\"comment\">// 进入下一次循环，更新标识变量</span></span><br><span class=\"line\">        previousNewFiber = newFiber;</span><br><span class=\"line\">        oldFiber = nextOldFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIdx === newChildren.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//.... 新Child遍历完毕，说明剩下的oldFiber在新DOM树中不存在，直接删除（这里只是标记，DOM操作都在 commitRoot 函数里）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//.... 旧Child遍历完毕，说明剩下的newFiber是新添加的，没有可复用Fiber，直接创建Fiber即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历旧Fiber创建set，键为key值，值为Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingChildren = <span class=\"title function_\">mapRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">\t<span class=\"comment\">// 第二次遍历，对于每一个newChild，直接从set里找有没有key值相同可以复用的Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// updateFromMap 直接去上面生成的map里面去找有没有key值相同的Fiber，如果有直接复用，否则直接新建一个</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _newFiber2 = <span class=\"title function_\">updateFromMap</span>(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);</span><br><span class=\"line\">\t    <span class=\"comment\">// 删除map中的oldFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_newFiber2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_newFiber2.<span class=\"property\">alternate</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    existingChildren.<span class=\"title function_\">delete</span>(_newFiber2.<span class=\"property\">key</span> === <span class=\"literal\">null</span> ? newIdx : _newFiber2.<span class=\"property\">key</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 更新lastPlacedIndex</span></span><br><span class=\"line\">            lastPlacedIndex = <span class=\"title function_\">placeChild</span>(_newFiber2, lastPlacedIndex, newIdx);</span><br><span class=\"line\">\t\t  <span class=\"comment\">// 和第一次遍历时的操作一样</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                resultingFirstChild = _newFiber2;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                previousNewFiber.<span class=\"property\">sibling</span> = _newFiber2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            previousNewFiber = _newFiber2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除没有用到的旧ChildFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">        existingChildren.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">child</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">deleteChild</span>(returnFiber, child);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>两次遍历</strong><ul>\n<li><strong>第一次同步遍历找可复用节点</strong></li>\n<li><strong>第二次利用<code>Set</code>找可复用节点</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"placeChild\"><a href=\"#placeChild\" class=\"headerlink\" title=\"placeChild\"></a>placeChild</h3><ul>\n<li><strong>用于比较<code>newFiber</code>和<code>oldFiber</code>的<code>index</code>，来确定<code>newFiber</code>具体的DOM操作</strong></li>\n<li>代码解析如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">placeChild</span>(<span class=\"params\">newFiber, lastPlacedIndex, newIndex</span>) &#123;</span><br><span class=\"line\">    newFiber.<span class=\"property\">index</span> = newIndex; <span class=\"comment\">// 设置newFiber的index</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!shouldTrackSideEffects) &#123; <span class=\"comment\">// 初始化时不需要标记节点是否需要移动</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = newFiber.<span class=\"property\">alternate</span>; <span class=\"comment\">// oldFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldIndex = current.<span class=\"property\">index</span>; <span class=\"comment\">// oldFiber下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldIndex &lt; lastPlacedIndex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 旧节点在最新节点下标左边，说明在新DOM中需要右移</span></span><br><span class=\"line\">            newFiber.<span class=\"property\">flags</span> = <span class=\"title class_\">Placement</span>; <span class=\"comment\">// 标记</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 返回覆盖lastPlacedIndex</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldIndex; <span class=\"comment\">// 这个节点不需要移动，在更新后的DOM树中保持原位即可(因为React中同级DOM节点Diff时只右移)，标记下这是新DOM中最新Fiber的index</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入操作</span></span><br><span class=\"line\">        newFiber.<span class=\"property\">flags</span> = <span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitMutationEffects\"><a href=\"#commitMutationEffects\" class=\"headerlink\" title=\"commitMutationEffects\"></a>commitMutationEffects</h3><ul>\n<li><strong><code>commitRoot</code>阶段用于更新真实DOM的函数，看下<code>Diff</code>阶段标记Fiber之后，真实DOM怎么操作</strong></li>\n<li><strong><code>nextEffect</code>构成一个更新链（所有需要操作的Fiber会形成一个链表，一个接一个处理），还没搞懂这个根据什么顺序连接起来……</strong></li>\n<li>已省略部分代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitMutationEffects</span>(<span class=\"params\">root, renderPriorityLevel</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentFiber</span>(nextEffect); <span class=\"comment\">// nextEffect 就是需要更新的Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flags = nextEffect.<span class=\"property\">flags</span>; <span class=\"comment\">// flags Fiber的标记，比如placeChild设置的移动标记</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> primaryFlags = flags &amp; (<span class=\"title class_\">Placement</span> | <span class=\"title class_\">Update</span> | <span class=\"title class_\">Deletion</span> | <span class=\"title class_\">Hydrating</span>); <span class=\"comment\">// 计算flags</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (primaryFlags) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Placement</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"title function_\">commitPlacement</span>(nextEffect); <span class=\"comment\">// 移动节点的函数</span></span><br><span class=\"line\">          nextEffect.<span class=\"property\">flags</span> &amp;= ~<span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">PlacementAndUpdate</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Hydrating</span>:</span><br><span class=\"line\">       \t<span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">HydratingAndUpdate</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Update</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Deletion</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">resetCurrentFiber</span>();</span><br><span class=\"line\">    nextEffect = nextEffect.<span class=\"property\">nextEffect</span>; <span class=\"comment\">// 获取下一个需要更新的Fiber</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitPlacement\"><a href=\"#commitPlacement\" class=\"headerlink\" title=\"commitPlacement\"></a>commitPlacement</h3><ul>\n<li><strong><code>commitPlacement</code>函数内部真正调用DOM操作处理DOM节点</strong></li>\n<li>已省略部分代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitPlacement</span>(<span class=\"params\">finishedWork</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentFiber = <span class=\"title function_\">getHostParentFiber</span>(finishedWork); <span class=\"comment\">// 获取父级DOM，本DEMO中就是 ul 节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parent;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isContainer;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentStateNode = parentFiber.<span class=\"property\">stateNode</span>; <span class=\"comment\">// 获取父节点的真实DOM</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (parentFiber.<span class=\"property\">tag</span>) &#123; <span class=\"comment\">//根据父节点类型，设置变量</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: <span class=\"comment\">// 本DEMO中会走这个</span></span><br><span class=\"line\">      parent = parentStateNode;</span><br><span class=\"line\">      isContainer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostPortal</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">FundamentalComponent</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"comment\">// ... 没找到合适的节点类型而报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> before = <span class=\"title function_\">getHostSibling</span>(finishedWork); <span class=\"comment\">// 获取Fiber的sibling链中第一个flags不是Placement的节点(即不需要移动的节点)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isContainer) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">insertOrAppendPlacementNodeIntoContainer</span>(finishedWork, before, parent);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 本DEMO调用这个函数</span></span><br><span class=\"line\">    <span class=\"title function_\">insertOrAppendPlacementNode</span>(finishedWork, before, parent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>最后的<code>insertOrAppendPlacementNode</code>会根据<code>before</code>变量是否存在执行以下操作：</strong><ul>\n<li><strong><code>before</code>存在，直接调用<code>parent.insertBefore(current,before)</code>将<code>current</code>放到<code>before</code>之前</strong></li>\n<li><strong><code>before</code>不存在，直接调用<code>parent.appendChild(current)</code></strong></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li><p>React源码版本：<code>17.0.2</code></p>\n</li>\n<li><p>DEMO如下</p>\n</li>\n</ul>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [list, setList] = useState&lt;<span class=\"title class_\">ListItemType</span>[]&gt;([</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;22 a&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;a&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;13 b&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;b&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;21 c&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;c&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;12 d&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;d&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;32 e&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;e&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">text</span>: <span class=\"string\">&quot;44 f&quot;</span>, <span class=\"attr\">key</span>: <span class=\"string\">&quot;f&quot;</span> &#125;,</span><br><span class=\"line\">  ]);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;list.map((item) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return item ? <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;item.key&#125;</span>&gt;</span>&#123;item.text&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span> : null;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          debugger;</span></span><br><span class=\"line\"><span class=\"language-xml\">          setList((prev) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">            let newArr: ListItemType[] = [];</span></span><br><span class=\"line\"><span class=\"language-xml\">            // 点击按钮之后，随机删除一个li节点，随机挑选一个节点放到第一行</span></span><br><span class=\"line\"><span class=\"language-xml\">            prev.splice(Math.floor(Math.random() * 5), 1);</span></span><br><span class=\"line\"><span class=\"language-xml\">            newArr.push(...prev.splice(Math.floor(Math.random() * 4), 1));</span></span><br><span class=\"line\"><span class=\"language-xml\">            newArr = newArr.concat(prev);</span></span><br><span class=\"line\"><span class=\"language-xml\">            return newArr;</span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        random all</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Diff解析\"><a href=\"#Diff解析\" class=\"headerlink\" title=\"Diff解析\"></a>Diff解析</h2><h3 id=\"Debug时机\"><a href=\"#Debug时机\" class=\"headerlink\" title=\"Debug时机\"></a>Debug时机</h3><ul>\n<li><strong>首次渲染之后</strong>，点击<code>random all</code>按钮随机处理<code>state</code>之后执行<code>performSyncWorkOnRoot</code>函数时进行Debug</li>\n<li><strong><code>Test</code>组件根据<code>hook</code>获取最新的<code>state</code>，后续先对Fiber更新</strong></li>\n</ul>\n<h3 id=\"reconcileChildren\"><a href=\"#reconcileChildren\" class=\"headerlink\" title=\"reconcileChildren\"></a>reconcileChildren</h3><ul>\n<li><code>beginWork</code>对<code>ul</code>标签进行处理时，<strong>会对其<code>children</code>进行一次Diff操作</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildren</span>(<span class=\"params\">current, workInProgress, nextChildren, renderLanes</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// current是当前已经渲染过的Fiber（workInProcess.alternate）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是初始化时进行的操作</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">mountChildFibers</span>(workInProgress, <span class=\"literal\">null</span>, nextChildren, renderLanes);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个是Fiber已经存在时的处理（后续更新）</span></span><br><span class=\"line\">        workInProgress.<span class=\"property\">child</span> = <span class=\"title function_\">reconcileChildFibers</span>(workInProgress, current.<span class=\"property\">child</span>, nextChildren, renderLanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>reconcileChildFibers</code>针对不同的<code>child</code>调用不同的函数去处理<code>Fiber</code>，<strong>这里我们主要看 React 对多个同级DOM的删除、更新怎么处理的（DOM Diff）</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildFibers</span>(<span class=\"params\">returnFiber, currentFirstChild, newChild, lanes</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> isObject = <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;object&#x27;</span> &amp;&amp; newChild !== <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (newChild.<span class=\"property\">$$typeof</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里处理单个child</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"attr\">REACT_ELEMENT_TYPE</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(<span class=\"title function_\">reconcileSingleElement</span>(returnFiber, currentFirstChild, newChild, lanes));</span><br><span class=\"line\">\t\t   <span class=\"comment\">// ......... 例如：Fragment</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// child是字符串或者数字的处理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;string&#x27;</span> || <span class=\"keyword\">typeof</span> newChild === <span class=\"string\">&#x27;number&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">placeSingleChild</span>(<span class=\"title function_\">reconcileSingleTextNode</span>(returnFiber, currentFirstChild, <span class=\"string\">&#x27;&#x27;</span> + newChild, lanes));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// DOM Diff</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isArray$1</span>(newChild)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reconcileChildrenArray</span>(returnFiber, currentFirstChild, newChild, lanes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...........其他类型</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">deleteRemainingChildren</span>(returnFiber, currentFirstChild);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reconcileChildrenArray\"><a href=\"#reconcileChildrenArray\" class=\"headerlink\" title=\"reconcileChildrenArray\"></a>reconcileChildrenArray</h3><ul>\n<li><strong><code>reconcileChildrenArray</code>对<code>childs</code>进行处理（创建或者复用DOM）</strong></li>\n<li>算法浅析如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">reconcileChildrenArray</span>(<span class=\"params\">returnFiber, currentFirstChild, newChildren, lanes</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 首先对每个child的key进行验证，是否重复等</span></span><br><span class=\"line\">    <span class=\"comment\">// 代码省略</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> resultingFirstChild = <span class=\"literal\">null</span>; <span class=\"comment\">// 最后返回的Fiber，用于构建Fiber树</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previousNewFiber = <span class=\"literal\">null</span>; <span class=\"comment\">// 保存遍历过程中的上一个newFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oldFiber = currentFirstChild; <span class=\"comment\">// 第一个oldFiber</span></span><br><span class=\"line\">    <span class=\"comment\">// React只允许DOM节点复用时向右移动</span></span><br><span class=\"line\">    <span class=\"comment\">// 只要oldFiber的下标比lastPlacedIndex大，就说明这个节点需要右移</span></span><br><span class=\"line\">    <span class=\"comment\">// 具体算法看 placeChild 这个函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> lastPlacedIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 标记newFiber中最新已处理节点的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newIdx = <span class=\"number\">0</span>; <span class=\"comment\">// 新Child的索引</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextOldFiber = <span class=\"literal\">null</span>; <span class=\"comment\">// 下一个oldFiber</span></span><br><span class=\"line\">\t<span class=\"comment\">// 第一次遍历，oldChild和newChild同步遍历</span></span><br><span class=\"line\">    <span class=\"comment\">// 比如：oldChild[0]和newChild[0]尝试是否可以复用</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; oldFiber !== <span class=\"literal\">null</span> &amp;&amp; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldFiber.<span class=\"property\">index</span> &gt; newIdx) &#123; <span class=\"comment\">// 旧节点在新节点右边，不了解这种情况什么时候发生...</span></span><br><span class=\"line\">            nextOldFiber = oldFiber;</span><br><span class=\"line\">            oldFiber = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 获取下个旧节点，比如oldChild[0]的sibling就是oldChild[1]，Fiber树的原因</span></span><br><span class=\"line\">            nextOldFiber = oldFiber.<span class=\"property\">sibling</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">// 尝试复用旧Fiber</span></span><br><span class=\"line\">        <span class=\"comment\">// updateSlot内部通过检测key值是否相同来判断是否能够复用</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果能够复用，oldFiber保留，并根据newChild更新下属性即可</span></span><br><span class=\"line\">        <span class=\"comment\">// 同时还有处理别的newFiber的代码，比如newFiber是个textNode，或者newFiber是个Fragment</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> newFiber = <span class=\"title function_\">updateSlot</span>(returnFiber, oldFiber, newChildren[newIdx], lanes);</span><br><span class=\"line\">\t    <span class=\"comment\">//如果不能复用，newFiber为null，此时直接跳出第一次循环</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                oldFiber = nextOldFiber;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">// 需要删除这个Fiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123; <span class=\"comment\">// shouldTrackSideEffetcs在更新操作中始终为true</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (oldFiber &amp;&amp; newFiber.<span class=\"property\">alternate</span> === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">deleteChild</span>(returnFiber, oldFiber);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t    <span class=\"comment\">//更新lastPlacedIndex</span></span><br><span class=\"line\">        lastPlacedIndex = <span class=\"title function_\">placeChild</span>(newFiber, lastPlacedIndex, newIdx);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取第一个newFiber用于构建Fiber树，并将上一个newFiber的sibling指向这个newFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// 第一次循环才会进入这个</span></span><br><span class=\"line\">            resultingFirstChild = newFiber;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            previousNewFiber.<span class=\"property\">sibling</span> = newFiber;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t   <span class=\"comment\">// 进入下一次循环，更新标识变量</span></span><br><span class=\"line\">        previousNewFiber = newFiber;</span><br><span class=\"line\">        oldFiber = nextOldFiber;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newIdx === newChildren.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//.... 新Child遍历完毕，说明剩下的oldFiber在新DOM树中不存在，直接删除（这里只是标记，DOM操作都在 commitRoot 函数里）</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (oldFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//.... 旧Child遍历完毕，说明剩下的newFiber是新添加的，没有可复用Fiber，直接创建Fiber即可</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 遍历旧Fiber创建set，键为key值，值为Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> existingChildren = <span class=\"title function_\">mapRemainingChildren</span>(returnFiber, oldFiber);</span><br><span class=\"line\">\t<span class=\"comment\">// 第二次遍历，对于每一个newChild，直接从set里找有没有key值相同可以复用的Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; newIdx &lt; newChildren.<span class=\"property\">length</span>; newIdx++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// updateFromMap 直接去上面生成的map里面去找有没有key值相同的Fiber，如果有直接复用，否则直接新建一个</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> _newFiber2 = <span class=\"title function_\">updateFromMap</span>(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);</span><br><span class=\"line\">\t    <span class=\"comment\">// 删除map中的oldFiber</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_newFiber2 !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (_newFiber2.<span class=\"property\">alternate</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    existingChildren.<span class=\"title function_\">delete</span>(_newFiber2.<span class=\"property\">key</span> === <span class=\"literal\">null</span> ? newIdx : _newFiber2.<span class=\"property\">key</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 更新lastPlacedIndex</span></span><br><span class=\"line\">            lastPlacedIndex = <span class=\"title function_\">placeChild</span>(_newFiber2, lastPlacedIndex, newIdx);</span><br><span class=\"line\">\t\t  <span class=\"comment\">// 和第一次遍历时的操作一样</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (previousNewFiber === <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                resultingFirstChild = _newFiber2;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                previousNewFiber.<span class=\"property\">sibling</span> = _newFiber2;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            previousNewFiber = _newFiber2;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 删除没有用到的旧ChildFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldTrackSideEffects) &#123;</span><br><span class=\"line\">        existingChildren.<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">child</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"title function_\">deleteChild</span>(returnFiber, child);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> resultingFirstChild;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>两次遍历</strong><ul>\n<li><strong>第一次同步遍历找可复用节点</strong></li>\n<li><strong>第二次利用<code>Set</code>找可复用节点</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"placeChild\"><a href=\"#placeChild\" class=\"headerlink\" title=\"placeChild\"></a>placeChild</h3><ul>\n<li><strong>用于比较<code>newFiber</code>和<code>oldFiber</code>的<code>index</code>，来确定<code>newFiber</code>具体的DOM操作</strong></li>\n<li>代码解析如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">placeChild</span>(<span class=\"params\">newFiber, lastPlacedIndex, newIndex</span>) &#123;</span><br><span class=\"line\">    newFiber.<span class=\"property\">index</span> = newIndex; <span class=\"comment\">// 设置newFiber的index</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!shouldTrackSideEffects) &#123; <span class=\"comment\">// 初始化时不需要标记节点是否需要移动</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> current = newFiber.<span class=\"property\">alternate</span>; <span class=\"comment\">// oldFiber</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> oldIndex = current.<span class=\"property\">index</span>; <span class=\"comment\">// oldFiber下标</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (oldIndex &lt; lastPlacedIndex) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 旧节点在最新节点下标左边，说明在新DOM中需要右移</span></span><br><span class=\"line\">            newFiber.<span class=\"property\">flags</span> = <span class=\"title class_\">Placement</span>; <span class=\"comment\">// 标记</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 返回覆盖lastPlacedIndex</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> oldIndex; <span class=\"comment\">// 这个节点不需要移动，在更新后的DOM树中保持原位即可(因为React中同级DOM节点Diff时只右移)，标记下这是新DOM中最新Fiber的index</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 插入操作</span></span><br><span class=\"line\">        newFiber.<span class=\"property\">flags</span> = <span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lastPlacedIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitMutationEffects\"><a href=\"#commitMutationEffects\" class=\"headerlink\" title=\"commitMutationEffects\"></a>commitMutationEffects</h3><ul>\n<li><strong><code>commitRoot</code>阶段用于更新真实DOM的函数，看下<code>Diff</code>阶段标记Fiber之后，真实DOM怎么操作</strong></li>\n<li><strong><code>nextEffect</code>构成一个更新链（所有需要操作的Fiber会形成一个链表，一个接一个处理），还没搞懂这个根据什么顺序连接起来……</strong></li>\n<li>已省略部分代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitMutationEffects</span>(<span class=\"params\">root, renderPriorityLevel</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (nextEffect !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setCurrentFiber</span>(nextEffect); <span class=\"comment\">// nextEffect 就是需要更新的Fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> flags = nextEffect.<span class=\"property\">flags</span>; <span class=\"comment\">// flags Fiber的标记，比如placeChild设置的移动标记</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> primaryFlags = flags &amp; (<span class=\"title class_\">Placement</span> | <span class=\"title class_\">Update</span> | <span class=\"title class_\">Deletion</span> | <span class=\"title class_\">Hydrating</span>); <span class=\"comment\">// 计算flags</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (primaryFlags) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Placement</span>:</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"title function_\">commitPlacement</span>(nextEffect); <span class=\"comment\">// 移动节点的函数</span></span><br><span class=\"line\">          nextEffect.<span class=\"property\">flags</span> &amp;= ~<span class=\"title class_\">Placement</span>;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">PlacementAndUpdate</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Hydrating</span>:</span><br><span class=\"line\">       \t<span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">HydratingAndUpdate</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Update</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"title class_\">Deletion</span>:</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">resetCurrentFiber</span>();</span><br><span class=\"line\">    nextEffect = nextEffect.<span class=\"property\">nextEffect</span>; <span class=\"comment\">// 获取下一个需要更新的Fiber</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitPlacement\"><a href=\"#commitPlacement\" class=\"headerlink\" title=\"commitPlacement\"></a>commitPlacement</h3><ul>\n<li><strong><code>commitPlacement</code>函数内部真正调用DOM操作处理DOM节点</strong></li>\n<li>已省略部分代码</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">commitPlacement</span>(<span class=\"params\">finishedWork</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentFiber = <span class=\"title function_\">getHostParentFiber</span>(finishedWork); <span class=\"comment\">// 获取父级DOM，本DEMO中就是 ul 节点</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parent;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isContainer;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentStateNode = parentFiber.<span class=\"property\">stateNode</span>; <span class=\"comment\">// 获取父节点的真实DOM</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (parentFiber.<span class=\"property\">tag</span>) &#123; <span class=\"comment\">//根据父节点类型，设置变量</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostComponent</span>: <span class=\"comment\">// 本DEMO中会走这个</span></span><br><span class=\"line\">      parent = parentStateNode;</span><br><span class=\"line\">      isContainer = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostRoot</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">HostPortal</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">FundamentalComponent</span>:</span><br><span class=\"line\">      <span class=\"comment\">//...</span></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"comment\">// ... 没找到合适的节点类型而报错</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> before = <span class=\"title function_\">getHostSibling</span>(finishedWork); <span class=\"comment\">// 获取Fiber的sibling链中第一个flags不是Placement的节点(即不需要移动的节点)</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isContainer) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">insertOrAppendPlacementNodeIntoContainer</span>(finishedWork, before, parent);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 本DEMO调用这个函数</span></span><br><span class=\"line\">    <span class=\"title function_\">insertOrAppendPlacementNode</span>(finishedWork, before, parent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>最后的<code>insertOrAppendPlacementNode</code>会根据<code>before</code>变量是否存在执行以下操作：</strong><ul>\n<li><strong><code>before</code>存在，直接调用<code>parent.insertBefore(current,before)</code>将<code>current</code>放到<code>before</code>之前</strong></li>\n<li><strong><code>before</code>不存在，直接调用<code>parent.appendChild(current)</code></strong></li>\n</ul>\n</li>\n</ul>\n"},{"title":"ReactSourceHookDebug","date":"2022-03-27T02:51:50.000Z","description":"React源码Debug学习体会——Hook篇","top_image":"https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100","cover":"/img/cover_3.webp","_content":"## 前言\n\n- React源码版本：`17.0.2`\n- Debug Demo 如下：\n\n```typescript\nconst Test = () => {\n  const [num, setNum] = useState(0);\n  useEffect(() => {\n    console.log(\"effect!\");\n  });\n  return (\n    <button\n      onClick={() => {\n        setNum((prev) => {\n          return prev + 1;\n        });\n      }}\n    >\n      {num}\n    </button>\n  );\n};\n```\n\n- **本文章记录学习React Hook源码时的一些收获**\n\n## Hook流程\n\n### beginWork\n\n- 跳过`rootContainer`的创建，lanes算法初始化等等代码，首先关注`<Test />`组件的Fiber初始化，根据DEMO，**此时`beginWork`已经处理rootFiber并创建了`<Test />`组件的Fiber**，现在要对其进行初始化\n\n此时`<Test />`的Fiber（已省略部分属性）\n\n```typescript\n{\n  tag: 2,\n  key: null,\n  /*可以看到webpack处理后的Test函数中的JSX都被jsxDev解析函数包裹*/\n  elementType: () => {\n    _s();\n    const [num, setNum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      debugger;\n      console.log(\"effect!\");\n    });\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(\"button\", {\n      onClick: () => {\n        debugger;\n        setNum(prev => {\n          return prev + 1;\n        });\n      },\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, undefined);\n  },\n  type: () => {/*webpack处理后的Test函数和elementType一致*/},\n  stateNode: null,\n  return: {/*rootFiber*/},\n  child: null,\n  sibling: null,\n  index: 0,\n  ref: null,\n  pendingProps: {},\n  memoizedProps: null,\n  updateQueue: null,\n  memoizedState: null,\n  dependencies: null,\n  mode: 8,\n  flags: 2,\n  nextEffect: null,\n  firstEffect: null,\n  lastEffect: null,\n  alternate: null,\n}\n```\n\n此时的调用栈\n\n![1](11.png)\n\n- Fiber的tag为2，由如下源码可知，是因为React还不知道是`class`还是`function`\n\n> var IndeterminateComponent = 2; *// Before we know whether it is function or class*\n\n### renderWithHooks\n\n- 后续调用函数去专门处理tag为2的组件，以下是React判断组件时`class`还是`function`的代码\n\n```typescript\nif (Component.prototype && typeof Component.prototype.render === 'function'){\n    //是class组件，...\n}\n```\n\n- 然后保存Fiber进行处理\n\n```typescript\nReactCurrentOwner$1.current = workInProgress; // workInProgress 就是当前处理的Fiber\nvalue = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n```\n\n- **之后会调用这个代码，为当前环境设置hook，之后会使用`throwError`版本覆盖，这也是为什么hook只能在`function`组件中使用的原因**\n\n```typescript\nReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n// 而HooksDispatchOnMountInDEV则保存了所有React的hook（当然也有update版本）\n```\n\n下图为部分hook\n\n![22](22.png)\n\n- 之后调用`function`组件，执行用户代码，获取`child`\n\n调用栈如图\n\n![33](33.png)\n\n### useState\n\n```typescript\n// useState源码 省略部分源码\nuseState: function (initialState) {\n    var prevDispatcher = ReactCurrentDispatcher$1.current; // 这里就会获取正常运行的Hook代码\n    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n    try {\n        return mountState(initialState); // useState主要执行的逻辑\n    } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n    }\n}\n```\n\n- 接受用户的值作为`initialState`，并最后调用`mountState`\n\n```typescript\n//mountState 源码\nfunction mountState(initialState) {\n    var hook = mountWorkInProgressHook(); // 生成hook对象\n\n    if (typeof initialState === 'function') { // 如果initialState是函数，就会执行并获取返回值\n        // $FlowFixMe: Flow doesn't like mixed types\n        initialState = initialState();\n    }\n\n    hook.memoizedState = hook.baseState = initialState; // 获取初始值，并保存（闭包）\n    var queue = hook.queue = {\n        pending: null,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer, // 更新函数\n        lastRenderedState: initialState\n    };\n    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue); // useState返回的更新函数，已经硬绑定了2个参数\n    return [hook.memoizedState, dispatch]; // 返回形式，也是为什么使用 const [val,setVal] = useState(0); 的原因\n}\n```\n\n- 首先初始化hook对象，用来保存`state`数据、调用队列等\n\n- **`dispatch`函数绑定了当前Fiber，并且调用`lastRenderedReducer`（也就是`basicStateReducer`），最后进行`scheduleUpdateOnFiber`（发起调度更新）**\n\n```typescript\n// 已省略大部分代码\nfunction dispatchAction(fiber, queue, action) {\n    try {\n        var currentState = queue.lastRenderedState; // 获取保存的state\n        var eagerState = lastRenderedReducer(currentState, action); // 获取新的state\n\t\t// 准备update\n        update.eagerReducer = lastRenderedReducer;\n        update.eagerState = eagerState;\n    } catch (error) {// Suppress the error. It will throw again in the render phase.\n    } finally {\n        {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n        }\n    }\n\t// 执行调度更新\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n}\n```\n\n- **`action`是用户传入的函数，以下是`lastRenderReducer`源码，所以函数内部可以获取之前的state**\n\n```typescript\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  // 如果是函数，就传入之前state并调用，否则直接使用新的state\n  return typeof action === 'function' ? action(state) : action;\n}\n```\n\n### useEffect\n\n```typescript\n// useEffect源码\nuseEffect: function (create, deps) {\n    currentHookNameInDev = 'useEffect';\n    mountHookTypesDev(); // 添加 hookName 到 hookTpyeDev\n    checkDepsAreArrayDev(deps); // 检查useEffect的deps格式是否为数组\n    return mountEffect(create, deps); // useEffect的主要逻辑\n},\n```\n\n- `mountEffect`检查一下`jest`会调用下面这个函数，执行逻辑\n\n```typescript\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n    // create就是用户订阅的effect函数\n    var hook = mountWorkInProgressHook(); // 生成hook对象\n    var nextDeps = deps === undefined ? null : deps;\n    currentlyRenderingFiber$1.flags |= fiberFlags;\n    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n```\n\n- `hook`的`memoizedState`不同于`useState`，`useEffect`会记录当前的`create`函数、`deps`依赖数据和调用顺序\n\n### commitRoot\n\n- `commitRoot`在执行挂载真正DOM树的操作之前还会执行一个额外的程序\n\n> invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n\n- **`invokeGuardedCallback`是React中用于`DEV`环境下触发事件的，附带有各种错误捕获和消息提示**\n\n- 在经过一系列我看不懂的调用之后，会执行`flushPassiveEffects`函数，在这个函数内部会执行用户定义的`effect函数`\n\n此时的调用栈\n\n![44](44.png)\n\n### commitBeforeMutationEffects\n\n- 经过测试后，debug操作不同，下面`flushPassiveEffects`函数调用时机不同，这里看得很迷（应该是不懂React详细更新算法和逻辑的问题）\n  - 单步进入，`flushPassiveEffects`函数会在`commitBeforeMutationEffects`函数中直接执行\n  - 单步跳过`commitBeforeMutationEffects`，会在React渲染完成之后单独执行\n\n#### flushPassiveEffects\n\n- 省略了其他代码（例如：这里还处理了`unMountEffects`，只不过没有执行）\n\n```typescript\nvar mountEffects = pendingPassiveHookEffectsMount; // 这里是收集到的effects，并且实在mount阶段执行的effects\npendingPassiveHookEffectsMount = [];\nfor (var _i = 0; _i < mountEffects.length; _i += 2) {\n    // effects数组每两个一组，前一个是effects，后一个是当前effects对应的fiber\n    var _effect2 = mountEffects[_i];\n    var _fiber = mountEffects[_i + 1];\n    {\n        setCurrentFiber(_fiber); // 设置当前环境fiber\n        {\n            // 使用invokePassiveEffectCreate执行effects函数\n            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);\n        }\n        if (hasCaughtError()) {\n            // ...\n        }\n        resetCurrentFiber();\n    }\n}\n```\n\n- 函数最后还会调用下面这个函数，这样会去清除`syncQueue`队列内部的更新事件，这也是为什么如果在`useEffect`中设置`state`会导致无限更新的原因\n\n```typescript\nflushSyncCallbackQueue(); \n// 这个函数内部会调用flushSyncCallbackQueue()\n```\n\n#### invokePassiveEffectCreate\n\n- 真正执行`effects`函数的代码\n\n```typescript\nfunction invokePassiveEffectCreate(effect) {\n    var create = effect.create;\n    effect.destroy = create();\n}\n// effects如下\n{\n  tag: 5, // 标识hook类型\n  create: () => { // 这个就是用户的effect函数\n    debugger;\n    console.log(\"effect!\");\n  },\n  destroy: undefined, // 存储可能存在的销毁函数\n  deps: null, // 依赖数组\n  next: [Circular], // 下一个effect\n}\n```\n\n### commitMutationEffects\n\n- **之前说过，React在这个函数中把Fiber树对应渲染好的真实DOM树添加到页面上，除此之外还会执行一次特定`effects`**\n\n#### commitHookEffectListUnmount\n\n- **执行所有`effects`的销毁函数，因为组件进行了一次更新**\n\n```typescript\n// 部分源码\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        var destroy = effect.destroy; // effect 对象\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy(); // 这个就是销毁函数\n        }\n      }\n      effect = effect.next; // 执行下一个effect\n    } while (effect !== firstEffect);\n```\n\n### commitLayoutEffects\n\n- 在真实DOM渲染完成之后类似方式调用的函数\n\n> invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n\n#### commitLifeCycles\n\n- 如同函数名称一样，会处理各种生命周期函数（包括：effects）\n\n- `commitHookEffectListMount`函数在满足某种条件下（没看懂...），执行`effect`函数\n\n```typescript\n// 部分源码\nif ((effect.tag & tag) === tag) {\n    // Mount\n    var create = effect.create;\n    effect.destroy = create();\n    {\n        var destroy = effect.destroy;\n        if (destroy !== undefined && typeof destroy !== 'function') {\n            // ... 很多对返回的destroy函数使用不当的warn\n        }\n    }\n}\n```\n\n#### schedulePassiveEffects\n\n- `schedulePassiveEffects`函数会将需要执行的`effect`保存下来，在后续调用？\n\n```typescript\n// 部分源码\ndo {\n    var _effect = effect,\n        next = _effect.next,\n        tag = _effect.tag;\n    if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {\n        // 下面两个函数分别将fiber和hook存入pendingPassiveHookEffectsUnmount和pendingPassiveHookEffectsMount\n        // 而pendingPassiveHookEffectsMount就是在flushPassiveEffects函数中获取effect的数组\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n    }\n    effect = next;\n} while (effect !== firstEffect);\n```\n\n\n","source":"_posts/ReactSourceHookDebug.md","raw":"---\ntitle: ReactSourceHookDebug\ndate: 2022-03-27 10:51:50\ntags:\n - React\n - source\n - javascript\ncategories:\n - React\ndescription: React源码Debug学习体会——Hook篇\ntop_image: https://pic2.zhimg.com/v2-8c3223d9228013e069df6a302e81c38f_720w.png?source=d16d100\ncover: /img/cover_3.webp\n\n---\n## 前言\n\n- React源码版本：`17.0.2`\n- Debug Demo 如下：\n\n```typescript\nconst Test = () => {\n  const [num, setNum] = useState(0);\n  useEffect(() => {\n    console.log(\"effect!\");\n  });\n  return (\n    <button\n      onClick={() => {\n        setNum((prev) => {\n          return prev + 1;\n        });\n      }}\n    >\n      {num}\n    </button>\n  );\n};\n```\n\n- **本文章记录学习React Hook源码时的一些收获**\n\n## Hook流程\n\n### beginWork\n\n- 跳过`rootContainer`的创建，lanes算法初始化等等代码，首先关注`<Test />`组件的Fiber初始化，根据DEMO，**此时`beginWork`已经处理rootFiber并创建了`<Test />`组件的Fiber**，现在要对其进行初始化\n\n此时`<Test />`的Fiber（已省略部分属性）\n\n```typescript\n{\n  tag: 2,\n  key: null,\n  /*可以看到webpack处理后的Test函数中的JSX都被jsxDev解析函数包裹*/\n  elementType: () => {\n    _s();\n    const [num, setNum] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      debugger;\n      console.log(\"effect!\");\n    });\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(\"button\", {\n      onClick: () => {\n        debugger;\n        setNum(prev => {\n          return prev + 1;\n        });\n      },\n      children: num\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, undefined);\n  },\n  type: () => {/*webpack处理后的Test函数和elementType一致*/},\n  stateNode: null,\n  return: {/*rootFiber*/},\n  child: null,\n  sibling: null,\n  index: 0,\n  ref: null,\n  pendingProps: {},\n  memoizedProps: null,\n  updateQueue: null,\n  memoizedState: null,\n  dependencies: null,\n  mode: 8,\n  flags: 2,\n  nextEffect: null,\n  firstEffect: null,\n  lastEffect: null,\n  alternate: null,\n}\n```\n\n此时的调用栈\n\n![1](11.png)\n\n- Fiber的tag为2，由如下源码可知，是因为React还不知道是`class`还是`function`\n\n> var IndeterminateComponent = 2; *// Before we know whether it is function or class*\n\n### renderWithHooks\n\n- 后续调用函数去专门处理tag为2的组件，以下是React判断组件时`class`还是`function`的代码\n\n```typescript\nif (Component.prototype && typeof Component.prototype.render === 'function'){\n    //是class组件，...\n}\n```\n\n- 然后保存Fiber进行处理\n\n```typescript\nReactCurrentOwner$1.current = workInProgress; // workInProgress 就是当前处理的Fiber\nvalue = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n```\n\n- **之后会调用这个代码，为当前环境设置hook，之后会使用`throwError`版本覆盖，这也是为什么hook只能在`function`组件中使用的原因**\n\n```typescript\nReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n// 而HooksDispatchOnMountInDEV则保存了所有React的hook（当然也有update版本）\n```\n\n下图为部分hook\n\n![22](22.png)\n\n- 之后调用`function`组件，执行用户代码，获取`child`\n\n调用栈如图\n\n![33](33.png)\n\n### useState\n\n```typescript\n// useState源码 省略部分源码\nuseState: function (initialState) {\n    var prevDispatcher = ReactCurrentDispatcher$1.current; // 这里就会获取正常运行的Hook代码\n    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n\n    try {\n        return mountState(initialState); // useState主要执行的逻辑\n    } finally {\n        ReactCurrentDispatcher$1.current = prevDispatcher;\n    }\n}\n```\n\n- 接受用户的值作为`initialState`，并最后调用`mountState`\n\n```typescript\n//mountState 源码\nfunction mountState(initialState) {\n    var hook = mountWorkInProgressHook(); // 生成hook对象\n\n    if (typeof initialState === 'function') { // 如果initialState是函数，就会执行并获取返回值\n        // $FlowFixMe: Flow doesn't like mixed types\n        initialState = initialState();\n    }\n\n    hook.memoizedState = hook.baseState = initialState; // 获取初始值，并保存（闭包）\n    var queue = hook.queue = {\n        pending: null,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer, // 更新函数\n        lastRenderedState: initialState\n    };\n    var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue); // useState返回的更新函数，已经硬绑定了2个参数\n    return [hook.memoizedState, dispatch]; // 返回形式，也是为什么使用 const [val,setVal] = useState(0); 的原因\n}\n```\n\n- 首先初始化hook对象，用来保存`state`数据、调用队列等\n\n- **`dispatch`函数绑定了当前Fiber，并且调用`lastRenderedReducer`（也就是`basicStateReducer`），最后进行`scheduleUpdateOnFiber`（发起调度更新）**\n\n```typescript\n// 已省略大部分代码\nfunction dispatchAction(fiber, queue, action) {\n    try {\n        var currentState = queue.lastRenderedState; // 获取保存的state\n        var eagerState = lastRenderedReducer(currentState, action); // 获取新的state\n\t\t// 准备update\n        update.eagerReducer = lastRenderedReducer;\n        update.eagerState = eagerState;\n    } catch (error) {// Suppress the error. It will throw again in the render phase.\n    } finally {\n        {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n        }\n    }\n\t// 执行调度更新\n    scheduleUpdateOnFiber(fiber, lane, eventTime);\n}\n```\n\n- **`action`是用户传入的函数，以下是`lastRenderReducer`源码，所以函数内部可以获取之前的state**\n\n```typescript\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  // 如果是函数，就传入之前state并调用，否则直接使用新的state\n  return typeof action === 'function' ? action(state) : action;\n}\n```\n\n### useEffect\n\n```typescript\n// useEffect源码\nuseEffect: function (create, deps) {\n    currentHookNameInDev = 'useEffect';\n    mountHookTypesDev(); // 添加 hookName 到 hookTpyeDev\n    checkDepsAreArrayDev(deps); // 检查useEffect的deps格式是否为数组\n    return mountEffect(create, deps); // useEffect的主要逻辑\n},\n```\n\n- `mountEffect`检查一下`jest`会调用下面这个函数，执行逻辑\n\n```typescript\nfunction mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n    // create就是用户订阅的effect函数\n    var hook = mountWorkInProgressHook(); // 生成hook对象\n    var nextDeps = deps === undefined ? null : deps;\n    currentlyRenderingFiber$1.flags |= fiberFlags;\n    hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);\n}\n```\n\n- `hook`的`memoizedState`不同于`useState`，`useEffect`会记录当前的`create`函数、`deps`依赖数据和调用顺序\n\n### commitRoot\n\n- `commitRoot`在执行挂载真正DOM树的操作之前还会执行一个额外的程序\n\n> invokeGuardedCallback(null, commitBeforeMutationEffects, null);\n\n- **`invokeGuardedCallback`是React中用于`DEV`环境下触发事件的，附带有各种错误捕获和消息提示**\n\n- 在经过一系列我看不懂的调用之后，会执行`flushPassiveEffects`函数，在这个函数内部会执行用户定义的`effect函数`\n\n此时的调用栈\n\n![44](44.png)\n\n### commitBeforeMutationEffects\n\n- 经过测试后，debug操作不同，下面`flushPassiveEffects`函数调用时机不同，这里看得很迷（应该是不懂React详细更新算法和逻辑的问题）\n  - 单步进入，`flushPassiveEffects`函数会在`commitBeforeMutationEffects`函数中直接执行\n  - 单步跳过`commitBeforeMutationEffects`，会在React渲染完成之后单独执行\n\n#### flushPassiveEffects\n\n- 省略了其他代码（例如：这里还处理了`unMountEffects`，只不过没有执行）\n\n```typescript\nvar mountEffects = pendingPassiveHookEffectsMount; // 这里是收集到的effects，并且实在mount阶段执行的effects\npendingPassiveHookEffectsMount = [];\nfor (var _i = 0; _i < mountEffects.length; _i += 2) {\n    // effects数组每两个一组，前一个是effects，后一个是当前effects对应的fiber\n    var _effect2 = mountEffects[_i];\n    var _fiber = mountEffects[_i + 1];\n    {\n        setCurrentFiber(_fiber); // 设置当前环境fiber\n        {\n            // 使用invokePassiveEffectCreate执行effects函数\n            invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);\n        }\n        if (hasCaughtError()) {\n            // ...\n        }\n        resetCurrentFiber();\n    }\n}\n```\n\n- 函数最后还会调用下面这个函数，这样会去清除`syncQueue`队列内部的更新事件，这也是为什么如果在`useEffect`中设置`state`会导致无限更新的原因\n\n```typescript\nflushSyncCallbackQueue(); \n// 这个函数内部会调用flushSyncCallbackQueue()\n```\n\n#### invokePassiveEffectCreate\n\n- 真正执行`effects`函数的代码\n\n```typescript\nfunction invokePassiveEffectCreate(effect) {\n    var create = effect.create;\n    effect.destroy = create();\n}\n// effects如下\n{\n  tag: 5, // 标识hook类型\n  create: () => { // 这个就是用户的effect函数\n    debugger;\n    console.log(\"effect!\");\n  },\n  destroy: undefined, // 存储可能存在的销毁函数\n  deps: null, // 依赖数组\n  next: [Circular], // 下一个effect\n}\n```\n\n### commitMutationEffects\n\n- **之前说过，React在这个函数中把Fiber树对应渲染好的真实DOM树添加到页面上，除此之外还会执行一次特定`effects`**\n\n#### commitHookEffectListUnmount\n\n- **执行所有`effects`的销毁函数，因为组件进行了一次更新**\n\n```typescript\n// 部分源码\n    do {\n      if ((effect.tag & tag) === tag) {\n        // Unmount\n        var destroy = effect.destroy; // effect 对象\n        effect.destroy = undefined;\n        if (destroy !== undefined) {\n          destroy(); // 这个就是销毁函数\n        }\n      }\n      effect = effect.next; // 执行下一个effect\n    } while (effect !== firstEffect);\n```\n\n### commitLayoutEffects\n\n- 在真实DOM渲染完成之后类似方式调用的函数\n\n> invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);\n\n#### commitLifeCycles\n\n- 如同函数名称一样，会处理各种生命周期函数（包括：effects）\n\n- `commitHookEffectListMount`函数在满足某种条件下（没看懂...），执行`effect`函数\n\n```typescript\n// 部分源码\nif ((effect.tag & tag) === tag) {\n    // Mount\n    var create = effect.create;\n    effect.destroy = create();\n    {\n        var destroy = effect.destroy;\n        if (destroy !== undefined && typeof destroy !== 'function') {\n            // ... 很多对返回的destroy函数使用不当的warn\n        }\n    }\n}\n```\n\n#### schedulePassiveEffects\n\n- `schedulePassiveEffects`函数会将需要执行的`effect`保存下来，在后续调用？\n\n```typescript\n// 部分源码\ndo {\n    var _effect = effect,\n        next = _effect.next,\n        tag = _effect.tag;\n    if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {\n        // 下面两个函数分别将fiber和hook存入pendingPassiveHookEffectsUnmount和pendingPassiveHookEffectsMount\n        // 而pendingPassiveHookEffectsMount就是在flushPassiveEffects函数中获取effect的数组\n        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);\n        enqueuePendingPassiveHookEffectMount(finishedWork, effect);\n    }\n    effect = next;\n} while (effect !== firstEffect);\n```\n\n\n","slug":"ReactSourceHookDebug","published":1,"updated":"2022-04-12T07:38:30.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3our00041wuq03n6far8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>React源码版本：<code>17.0.2</code></li>\n<li>Debug Demo 如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [num, setNum] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        setNum((prev) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return prev + 1;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;num&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>本文章记录学习React Hook源码时的一些收获</strong></li>\n</ul>\n<h2 id=\"Hook流程\"><a href=\"#Hook流程\" class=\"headerlink\" title=\"Hook流程\"></a>Hook流程</h2><h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><ul>\n<li>跳过<code>rootContainer</code>的创建，lanes算法初始化等等代码，首先关注<code>&lt;Test /&gt;</code>组件的Fiber初始化，根据DEMO，<strong>此时<code>beginWork</code>已经处理rootFiber并创建了<code>&lt;Test /&gt;</code>组件的Fiber</strong>，现在要对其进行初始化</li>\n</ul>\n<p>此时<code>&lt;Test /&gt;</code>的Fiber（已省略部分属性）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">/*可以看到webpack处理后的Test函数中的JSX都被jsxDev解析函数包裹*/</span></span><br><span class=\"line\">  <span class=\"attr\">elementType</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">_s</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, setNum] = (<span class=\"number\">0</span>,react__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">useState</span>)(<span class=\"number\">0</span>);</span><br><span class=\"line\">    (<span class=\"number\">0</span>,react__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">useEffect</span>)(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">/*#__PURE__*/</span>(<span class=\"number\">0</span>,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.<span class=\"property\">jsxDEV</span>)(<span class=\"string\">&quot;button&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">onClick</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"title function_\">setNum</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> prev + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: num</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">void</span> <span class=\"number\">0</span>, <span class=\"literal\">false</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">59</span>,</span><br><span class=\"line\">      <span class=\"attr\">columnNumber</span>: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"function\">() =&gt;</span> &#123;<span class=\"comment\">/*webpack处理后的Test函数和elementType一致*/</span>&#125;,</span><br><span class=\"line\">  <span class=\"attr\">stateNode</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">return</span>: &#123;<span class=\"comment\">/*rootFiber*/</span>&#125;,</span><br><span class=\"line\">  <span class=\"attr\">child</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">sibling</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">index</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">pendingProps</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">memoizedProps</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">updateQueue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">dependencies</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">flags</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">firstEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">alternate</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的调用栈</p>\n<p><img src=\"/11.png\" alt=\"1\"></p>\n<ul>\n<li>Fiber的tag为2，由如下源码可知，是因为React还不知道是<code>class</code>还是<code>function</code></li>\n</ul>\n<blockquote>\n<p>var IndeterminateComponent &#x3D; 2; <em>&#x2F;&#x2F; Before we know whether it is function or class</em></p>\n</blockquote>\n<h3 id=\"renderWithHooks\"><a href=\"#renderWithHooks\" class=\"headerlink\" title=\"renderWithHooks\"></a>renderWithHooks</h3><ul>\n<li>后续调用函数去专门处理tag为2的组件，以下是React判断组件时<code>class</code>还是<code>function</code>的代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Component</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Component</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">render</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//是class组件，...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后保存Fiber进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactCurrentOwner</span>$<span class=\"number\">1.</span>current = workInProgress; <span class=\"comment\">// workInProgress 就是当前处理的Fiber</span></span><br><span class=\"line\">value = <span class=\"title function_\">renderWithHooks</span>(<span class=\"literal\">null</span>, workInProgress, <span class=\"title class_\">Component</span>, props, context, renderLanes);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>之后会调用这个代码，为当前环境设置hook，之后会使用<code>throwError</code>版本覆盖，这也是为什么hook只能在<code>function</code>组件中使用的原因</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = <span class=\"title class_\">HooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\"><span class=\"comment\">// 而HooksDispatchOnMountInDEV则保存了所有React的hook（当然也有update版本）</span></span><br></pre></td></tr></table></figure>\n\n<p>下图为部分hook</p>\n<p><img src=\"/22.png\" alt=\"22\"></p>\n<ul>\n<li>之后调用<code>function</code>组件，执行用户代码，获取<code>child</code></li>\n</ul>\n<p>调用栈如图</p>\n<p><img src=\"/33.png\" alt=\"33\"></p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useState源码 省略部分源码</span></span><br><span class=\"line\"><span class=\"attr\">useState</span>: <span class=\"keyword\">function</span> (<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current; <span class=\"comment\">// 这里就会获取正常运行的Hook代码</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = <span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountState</span>(initialState); <span class=\"comment\">// useState主要执行的逻辑</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = prevDispatcher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接受用户的值作为<code>initialState</code>，并最后调用<code>mountState</code></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mountState 源码</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountState</span>(<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>(); <span class=\"comment\">// 生成hook对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">&#x27;function&#x27;</span>) &#123; <span class=\"comment\">// 如果initialState是函数，就会执行并获取返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">        initialState = <span class=\"title function_\">initialState</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = hook.<span class=\"property\">baseState</span> = initialState; <span class=\"comment\">// 获取初始值，并保存（闭包）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue = hook.<span class=\"property\">queue</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastRenderedReducer</span>: basicStateReducer, <span class=\"comment\">// 更新函数</span></span><br><span class=\"line\">        <span class=\"attr\">lastRenderedState</span>: initialState</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = queue.<span class=\"property\">dispatch</span> = dispatchAction.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, currentlyRenderingFiber$<span class=\"number\">1</span>, queue); <span class=\"comment\">// useState返回的更新函数，已经硬绑定了2个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch]; <span class=\"comment\">// 返回形式，也是为什么使用 const [val,setVal] = useState(0); 的原因</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先初始化hook对象，用来保存<code>state</code>数据、调用队列等</p>\n</li>\n<li><p><strong><code>dispatch</code>函数绑定了当前Fiber，并且调用<code>lastRenderedReducer</code>（也就是<code>basicStateReducer</code>），最后进行<code>scheduleUpdateOnFiber</code>（发起调度更新）</strong></p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已省略大部分代码</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatchAction</span>(<span class=\"params\">fiber, queue, action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentState = queue.<span class=\"property\">lastRenderedState</span>; <span class=\"comment\">// 获取保存的state</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> eagerState = <span class=\"title function_\">lastRenderedReducer</span>(currentState, action); <span class=\"comment\">// 获取新的state</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 准备update</span></span><br><span class=\"line\">        update.<span class=\"property\">eagerReducer</span> = lastRenderedReducer;</span><br><span class=\"line\">        update.<span class=\"property\">eagerState</span> = eagerState;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;<span class=\"comment\">// Suppress the error. It will throw again in the render phase.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = prevDispatcher;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行调度更新</span></span><br><span class=\"line\">    <span class=\"title function_\">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>action</code>是用户传入的函数，以下是<code>lastRenderReducer</code>源码，所以函数内部可以获取之前的state</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">basicStateReducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果是函数，就传入之前state并调用，否则直接使用新的state</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">action</span>(state) : action;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useEffect源码</span></span><br><span class=\"line\"><span class=\"attr\">useEffect</span>: <span class=\"keyword\">function</span> (<span class=\"params\">create, deps</span>) &#123;</span><br><span class=\"line\">    currentHookNameInDev = <span class=\"string\">&#x27;useEffect&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">mountHookTypesDev</span>(); <span class=\"comment\">// 添加 hookName 到 hookTpyeDev</span></span><br><span class=\"line\">    <span class=\"title function_\">checkDepsAreArrayDev</span>(deps); <span class=\"comment\">// 检查useEffect的deps格式是否为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mountEffect</span>(create, deps); <span class=\"comment\">// useEffect的主要逻辑</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>mountEffect</code>检查一下<code>jest</code>会调用下面这个函数，执行逻辑</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountEffectImpl</span>(<span class=\"params\">fiberFlags, hookFlags, create, deps</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// create就是用户订阅的effect函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>(); <span class=\"comment\">// 生成hook对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    currentlyRenderingFiber$<span class=\"number\">1.</span>flags |= fiberFlags;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = <span class=\"title function_\">pushEffect</span>(<span class=\"title class_\">HasEffect</span> | hookFlags, create, <span class=\"literal\">undefined</span>, nextDeps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>hook</code>的<code>memoizedState</code>不同于<code>useState</code>，<code>useEffect</code>会记录当前的<code>create</code>函数、<code>deps</code>依赖数据和调用顺序</li>\n</ul>\n<h3 id=\"commitRoot\"><a href=\"#commitRoot\" class=\"headerlink\" title=\"commitRoot\"></a>commitRoot</h3><ul>\n<li><code>commitRoot</code>在执行挂载真正DOM树的操作之前还会执行一个额外的程序</li>\n</ul>\n<blockquote>\n<p>invokeGuardedCallback(null, commitBeforeMutationEffects, null);</p>\n</blockquote>\n<ul>\n<li><p><strong><code>invokeGuardedCallback</code>是React中用于<code>DEV</code>环境下触发事件的，附带有各种错误捕获和消息提示</strong></p>\n</li>\n<li><p>在经过一系列我看不懂的调用之后，会执行<code>flushPassiveEffects</code>函数，在这个函数内部会执行用户定义的<code>effect函数</code></p>\n</li>\n</ul>\n<p>此时的调用栈</p>\n<p><img src=\"/44.png\" alt=\"44\"></p>\n<h3 id=\"commitBeforeMutationEffects\"><a href=\"#commitBeforeMutationEffects\" class=\"headerlink\" title=\"commitBeforeMutationEffects\"></a>commitBeforeMutationEffects</h3><ul>\n<li>经过测试后，debug操作不同，下面<code>flushPassiveEffects</code>函数调用时机不同，这里看得很迷（应该是不懂React详细更新算法和逻辑的问题）<ul>\n<li>单步进入，<code>flushPassiveEffects</code>函数会在<code>commitBeforeMutationEffects</code>函数中直接执行</li>\n<li>单步跳过<code>commitBeforeMutationEffects</code>，会在React渲染完成之后单独执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flushPassiveEffects\"><a href=\"#flushPassiveEffects\" class=\"headerlink\" title=\"flushPassiveEffects\"></a>flushPassiveEffects</h4><ul>\n<li>省略了其他代码（例如：这里还处理了<code>unMountEffects</code>，只不过没有执行）</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mountEffects = pendingPassiveHookEffectsMount; <span class=\"comment\">// 这里是收集到的effects，并且实在mount阶段执行的effects</span></span><br><span class=\"line\">pendingPassiveHookEffectsMount = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> _i = <span class=\"number\">0</span>; _i &lt; mountEffects.<span class=\"property\">length</span>; _i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// effects数组每两个一组，前一个是effects，后一个是当前effects对应的fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _effect2 = mountEffects[_i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _fiber = mountEffects[_i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentFiber</span>(_fiber); <span class=\"comment\">// 设置当前环境fiber</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用invokePassiveEffectCreate执行effects函数</span></span><br><span class=\"line\">            <span class=\"title function_\">invokeGuardedCallback</span>(<span class=\"literal\">null</span>, invokePassiveEffectCreate, <span class=\"literal\">null</span>, _effect2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasCaughtError</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">resetCurrentFiber</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数最后还会调用下面这个函数，这样会去清除<code>syncQueue</code>队列内部的更新事件，这也是为什么如果在<code>useEffect</code>中设置<code>state</code>会导致无限更新的原因</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">flushSyncCallbackQueue</span>(); </span><br><span class=\"line\"><span class=\"comment\">// 这个函数内部会调用flushSyncCallbackQueue()</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"invokePassiveEffectCreate\"><a href=\"#invokePassiveEffectCreate\" class=\"headerlink\" title=\"invokePassiveEffectCreate\"></a>invokePassiveEffectCreate</h4><ul>\n<li>真正执行<code>effects</code>函数的代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokePassiveEffectCreate</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> create = effect.<span class=\"property\">create</span>;</span><br><span class=\"line\">    effect.<span class=\"property\">destroy</span> = <span class=\"title function_\">create</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// effects如下</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 标识hook类型</span></span><br><span class=\"line\">  <span class=\"attr\">create</span>: <span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 这个就是用户的effect函数</span></span><br><span class=\"line\">    <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">destroy</span>: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 存储可能存在的销毁函数</span></span><br><span class=\"line\">  <span class=\"attr\">deps</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\">  <span class=\"attr\">next</span>: [<span class=\"title class_\">Circular</span>], <span class=\"comment\">// 下一个effect</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitMutationEffects\"><a href=\"#commitMutationEffects\" class=\"headerlink\" title=\"commitMutationEffects\"></a>commitMutationEffects</h3><ul>\n<li><strong>之前说过，React在这个函数中把Fiber树对应渲染好的真实DOM树添加到页面上，除此之外还会执行一次特定<code>effects</code></strong></li>\n</ul>\n<h4 id=\"commitHookEffectListUnmount\"><a href=\"#commitHookEffectListUnmount\" class=\"headerlink\" title=\"commitHookEffectListUnmount\"></a>commitHookEffectListUnmount</h4><ul>\n<li><strong>执行所有<code>effects</code>的销毁函数，因为组件进行了一次更新</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; tag) === tag) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Unmount</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> destroy = effect.<span class=\"property\">destroy</span>; <span class=\"comment\">// effect 对象</span></span><br><span class=\"line\">        effect.<span class=\"property\">destroy</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroy !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">destroy</span>(); <span class=\"comment\">// 这个就是销毁函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      effect = effect.<span class=\"property\">next</span>; <span class=\"comment\">// 执行下一个effect</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (effect !== firstEffect);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitLayoutEffects\"><a href=\"#commitLayoutEffects\" class=\"headerlink\" title=\"commitLayoutEffects\"></a>commitLayoutEffects</h3><ul>\n<li>在真实DOM渲染完成之后类似方式调用的函数</li>\n</ul>\n<blockquote>\n<p>invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);</p>\n</blockquote>\n<h4 id=\"commitLifeCycles\"><a href=\"#commitLifeCycles\" class=\"headerlink\" title=\"commitLifeCycles\"></a>commitLifeCycles</h4><ul>\n<li><p>如同函数名称一样，会处理各种生命周期函数（包括：effects）</p>\n</li>\n<li><p><code>commitHookEffectListMount</code>函数在满足某种条件下（没看懂…），执行<code>effect</code>函数</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; tag) === tag) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Mount</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> create = effect.<span class=\"property\">create</span>;</span><br><span class=\"line\">    effect.<span class=\"property\">destroy</span> = <span class=\"title function_\">create</span>();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destroy = effect.<span class=\"property\">destroy</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroy !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">typeof</span> destroy !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ... 很多对返回的destroy函数使用不当的warn</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"schedulePassiveEffects\"><a href=\"#schedulePassiveEffects\" class=\"headerlink\" title=\"schedulePassiveEffects\"></a>schedulePassiveEffects</h4><ul>\n<li><code>schedulePassiveEffects</code>函数会将需要执行的<code>effect</code>保存下来，在后续调用？</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _effect = effect,</span><br><span class=\"line\">        next = _effect.<span class=\"property\">next</span>,</span><br><span class=\"line\">        tag = _effect.<span class=\"property\">tag</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tag &amp; <span class=\"title class_\">Passive</span>$<span class=\"number\">1</span>) !== <span class=\"title class_\">NoFlags</span>$<span class=\"number\">1</span> &amp;&amp; (tag &amp; <span class=\"title class_\">HasEffect</span>) !== <span class=\"title class_\">NoFlags</span>$<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面两个函数分别将fiber和hook存入pendingPassiveHookEffectsUnmount和pendingPassiveHookEffectsMount</span></span><br><span class=\"line\">        <span class=\"comment\">// 而pendingPassiveHookEffectsMount就是在flushPassiveEffects函数中获取effect的数组</span></span><br><span class=\"line\">        <span class=\"title function_\">enqueuePendingPassiveHookEffectUnmount</span>(finishedWork, effect);</span><br><span class=\"line\">        <span class=\"title function_\">enqueuePendingPassiveHookEffectMount</span>(finishedWork, effect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    effect = next;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (effect !== firstEffect);</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ul>\n<li>React源码版本：<code>17.0.2</code></li>\n<li>Debug Demo 如下：</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Test</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [num, setNum] = <span class=\"title function_\">useState</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        setNum((prev) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">          return prev + 1;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &#125;);</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;num&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>本文章记录学习React Hook源码时的一些收获</strong></li>\n</ul>\n<h2 id=\"Hook流程\"><a href=\"#Hook流程\" class=\"headerlink\" title=\"Hook流程\"></a>Hook流程</h2><h3 id=\"beginWork\"><a href=\"#beginWork\" class=\"headerlink\" title=\"beginWork\"></a>beginWork</h3><ul>\n<li>跳过<code>rootContainer</code>的创建，lanes算法初始化等等代码，首先关注<code>&lt;Test /&gt;</code>组件的Fiber初始化，根据DEMO，<strong>此时<code>beginWork</code>已经处理rootFiber并创建了<code>&lt;Test /&gt;</code>组件的Fiber</strong>，现在要对其进行初始化</li>\n</ul>\n<p>此时<code>&lt;Test /&gt;</code>的Fiber（已省略部分属性）</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">key</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"comment\">/*可以看到webpack处理后的Test函数中的JSX都被jsxDev解析函数包裹*/</span></span><br><span class=\"line\">  <span class=\"attr\">elementType</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">_s</span>();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> [num, setNum] = (<span class=\"number\">0</span>,react__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">useState</span>)(<span class=\"number\">0</span>);</span><br><span class=\"line\">    (<span class=\"number\">0</span>,react__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">useEffect</span>)(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">/*#__PURE__*/</span>(<span class=\"number\">0</span>,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.<span class=\"property\">jsxDEV</span>)(<span class=\"string\">&quot;button&quot;</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">onClick</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">        <span class=\"title function_\">setNum</span>(<span class=\"function\"><span class=\"params\">prev</span> =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> prev + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">children</span>: num</span><br><span class=\"line\">    &#125;, <span class=\"built_in\">void</span> <span class=\"number\">0</span>, <span class=\"literal\">false</span>, &#123;</span><br><span class=\"line\">      <span class=\"attr\">fileName</span>: _jsxFileName,</span><br><span class=\"line\">      <span class=\"attr\">lineNumber</span>: <span class=\"number\">59</span>,</span><br><span class=\"line\">      <span class=\"attr\">columnNumber</span>: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;, <span class=\"literal\">undefined</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"function\">() =&gt;</span> &#123;<span class=\"comment\">/*webpack处理后的Test函数和elementType一致*/</span>&#125;,</span><br><span class=\"line\">  <span class=\"attr\">stateNode</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">return</span>: &#123;<span class=\"comment\">/*rootFiber*/</span>&#125;,</span><br><span class=\"line\">  <span class=\"attr\">child</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">sibling</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">index</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">ref</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">pendingProps</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">memoizedProps</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">updateQueue</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">memoizedState</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">dependencies</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">  <span class=\"attr\">flags</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">nextEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">firstEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">lastEffect</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">  <span class=\"attr\">alternate</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的调用栈</p>\n<p><img src=\"/11.png\" alt=\"1\"></p>\n<ul>\n<li>Fiber的tag为2，由如下源码可知，是因为React还不知道是<code>class</code>还是<code>function</code></li>\n</ul>\n<blockquote>\n<p>var IndeterminateComponent &#x3D; 2; <em>&#x2F;&#x2F; Before we know whether it is function or class</em></p>\n</blockquote>\n<h3 id=\"renderWithHooks\"><a href=\"#renderWithHooks\" class=\"headerlink\" title=\"renderWithHooks\"></a>renderWithHooks</h3><ul>\n<li>后续调用函数去专门处理tag为2的组件，以下是React判断组件时<code>class</code>还是<code>function</code>的代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Component</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"title class_\">Component</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">render</span> === <span class=\"string\">&#x27;function&#x27;</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//是class组件，...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>然后保存Fiber进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactCurrentOwner</span>$<span class=\"number\">1.</span>current = workInProgress; <span class=\"comment\">// workInProgress 就是当前处理的Fiber</span></span><br><span class=\"line\">value = <span class=\"title function_\">renderWithHooks</span>(<span class=\"literal\">null</span>, workInProgress, <span class=\"title class_\">Component</span>, props, context, renderLanes);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>之后会调用这个代码，为当前环境设置hook，之后会使用<code>throwError</code>版本覆盖，这也是为什么hook只能在<code>function</code>组件中使用的原因</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = <span class=\"title class_\">HooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\"><span class=\"comment\">// 而HooksDispatchOnMountInDEV则保存了所有React的hook（当然也有update版本）</span></span><br></pre></td></tr></table></figure>\n\n<p>下图为部分hook</p>\n<p><img src=\"/22.png\" alt=\"22\"></p>\n<ul>\n<li>之后调用<code>function</code>组件，执行用户代码，获取<code>child</code></li>\n</ul>\n<p>调用栈如图</p>\n<p><img src=\"/33.png\" alt=\"33\"></p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useState源码 省略部分源码</span></span><br><span class=\"line\"><span class=\"attr\">useState</span>: <span class=\"keyword\">function</span> (<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevDispatcher = <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current; <span class=\"comment\">// 这里就会获取正常运行的Hook代码</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = <span class=\"title class_\">InvalidNestedHooksDispatcherOnMountInDEV</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">mountState</span>(initialState); <span class=\"comment\">// useState主要执行的逻辑</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = prevDispatcher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>接受用户的值作为<code>initialState</code>，并最后调用<code>mountState</code></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mountState 源码</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountState</span>(<span class=\"params\">initialState</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>(); <span class=\"comment\">// 生成hook对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> initialState === <span class=\"string\">&#x27;function&#x27;</span>) &#123; <span class=\"comment\">// 如果initialState是函数，就会执行并获取返回值</span></span><br><span class=\"line\">        <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">        initialState = <span class=\"title function_\">initialState</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = hook.<span class=\"property\">baseState</span> = initialState; <span class=\"comment\">// 获取初始值，并保存（闭包）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> queue = hook.<span class=\"property\">queue</span> = &#123;</span><br><span class=\"line\">        <span class=\"attr\">pending</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">dispatch</span>: <span class=\"literal\">null</span>,</span><br><span class=\"line\">        <span class=\"attr\">lastRenderedReducer</span>: basicStateReducer, <span class=\"comment\">// 更新函数</span></span><br><span class=\"line\">        <span class=\"attr\">lastRenderedState</span>: initialState</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dispatch = queue.<span class=\"property\">dispatch</span> = dispatchAction.<span class=\"title function_\">bind</span>(<span class=\"literal\">null</span>, currentlyRenderingFiber$<span class=\"number\">1</span>, queue); <span class=\"comment\">// useState返回的更新函数，已经硬绑定了2个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [hook.<span class=\"property\">memoizedState</span>, dispatch]; <span class=\"comment\">// 返回形式，也是为什么使用 const [val,setVal] = useState(0); 的原因</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先初始化hook对象，用来保存<code>state</code>数据、调用队列等</p>\n</li>\n<li><p><strong><code>dispatch</code>函数绑定了当前Fiber，并且调用<code>lastRenderedReducer</code>（也就是<code>basicStateReducer</code>），最后进行<code>scheduleUpdateOnFiber</code>（发起调度更新）</strong></p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 已省略大部分代码</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dispatchAction</span>(<span class=\"params\">fiber, queue, action</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> currentState = queue.<span class=\"property\">lastRenderedState</span>; <span class=\"comment\">// 获取保存的state</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> eagerState = <span class=\"title function_\">lastRenderedReducer</span>(currentState, action); <span class=\"comment\">// 获取新的state</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 准备update</span></span><br><span class=\"line\">        update.<span class=\"property\">eagerReducer</span> = lastRenderedReducer;</span><br><span class=\"line\">        update.<span class=\"property\">eagerState</span> = eagerState;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (error) &#123;<span class=\"comment\">// Suppress the error. It will throw again in the render phase.</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title class_\">ReactCurrentDispatcher</span>$<span class=\"number\">1.</span>current = prevDispatcher;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 执行调度更新</span></span><br><span class=\"line\">    <span class=\"title function_\">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>action</code>是用户传入的函数，以下是<code>lastRenderReducer</code>源码，所以函数内部可以获取之前的state</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">basicStateReducer</span>(<span class=\"params\">state, action</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $FlowFixMe: Flow doesn&#x27;t like mixed types</span></span><br><span class=\"line\">  <span class=\"comment\">// 如果是函数，就传入之前state并调用，否则直接使用新的state</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> action === <span class=\"string\">&#x27;function&#x27;</span> ? <span class=\"title function_\">action</span>(state) : action;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"useEffect\"><a href=\"#useEffect\" class=\"headerlink\" title=\"useEffect\"></a>useEffect</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// useEffect源码</span></span><br><span class=\"line\"><span class=\"attr\">useEffect</span>: <span class=\"keyword\">function</span> (<span class=\"params\">create, deps</span>) &#123;</span><br><span class=\"line\">    currentHookNameInDev = <span class=\"string\">&#x27;useEffect&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">mountHookTypesDev</span>(); <span class=\"comment\">// 添加 hookName 到 hookTpyeDev</span></span><br><span class=\"line\">    <span class=\"title function_\">checkDepsAreArrayDev</span>(deps); <span class=\"comment\">// 检查useEffect的deps格式是否为数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">mountEffect</span>(create, deps); <span class=\"comment\">// useEffect的主要逻辑</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>mountEffect</code>检查一下<code>jest</code>会调用下面这个函数，执行逻辑</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountEffectImpl</span>(<span class=\"params\">fiberFlags, hookFlags, create, deps</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// create就是用户订阅的effect函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> hook = <span class=\"title function_\">mountWorkInProgressHook</span>(); <span class=\"comment\">// 生成hook对象</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nextDeps = deps === <span class=\"literal\">undefined</span> ? <span class=\"literal\">null</span> : deps;</span><br><span class=\"line\">    currentlyRenderingFiber$<span class=\"number\">1.</span>flags |= fiberFlags;</span><br><span class=\"line\">    hook.<span class=\"property\">memoizedState</span> = <span class=\"title function_\">pushEffect</span>(<span class=\"title class_\">HasEffect</span> | hookFlags, create, <span class=\"literal\">undefined</span>, nextDeps);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>hook</code>的<code>memoizedState</code>不同于<code>useState</code>，<code>useEffect</code>会记录当前的<code>create</code>函数、<code>deps</code>依赖数据和调用顺序</li>\n</ul>\n<h3 id=\"commitRoot\"><a href=\"#commitRoot\" class=\"headerlink\" title=\"commitRoot\"></a>commitRoot</h3><ul>\n<li><code>commitRoot</code>在执行挂载真正DOM树的操作之前还会执行一个额外的程序</li>\n</ul>\n<blockquote>\n<p>invokeGuardedCallback(null, commitBeforeMutationEffects, null);</p>\n</blockquote>\n<ul>\n<li><p><strong><code>invokeGuardedCallback</code>是React中用于<code>DEV</code>环境下触发事件的，附带有各种错误捕获和消息提示</strong></p>\n</li>\n<li><p>在经过一系列我看不懂的调用之后，会执行<code>flushPassiveEffects</code>函数，在这个函数内部会执行用户定义的<code>effect函数</code></p>\n</li>\n</ul>\n<p>此时的调用栈</p>\n<p><img src=\"/44.png\" alt=\"44\"></p>\n<h3 id=\"commitBeforeMutationEffects\"><a href=\"#commitBeforeMutationEffects\" class=\"headerlink\" title=\"commitBeforeMutationEffects\"></a>commitBeforeMutationEffects</h3><ul>\n<li>经过测试后，debug操作不同，下面<code>flushPassiveEffects</code>函数调用时机不同，这里看得很迷（应该是不懂React详细更新算法和逻辑的问题）<ul>\n<li>单步进入，<code>flushPassiveEffects</code>函数会在<code>commitBeforeMutationEffects</code>函数中直接执行</li>\n<li>单步跳过<code>commitBeforeMutationEffects</code>，会在React渲染完成之后单独执行</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"flushPassiveEffects\"><a href=\"#flushPassiveEffects\" class=\"headerlink\" title=\"flushPassiveEffects\"></a>flushPassiveEffects</h4><ul>\n<li>省略了其他代码（例如：这里还处理了<code>unMountEffects</code>，只不过没有执行）</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mountEffects = pendingPassiveHookEffectsMount; <span class=\"comment\">// 这里是收集到的effects，并且实在mount阶段执行的effects</span></span><br><span class=\"line\">pendingPassiveHookEffectsMount = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> _i = <span class=\"number\">0</span>; _i &lt; mountEffects.<span class=\"property\">length</span>; _i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// effects数组每两个一组，前一个是effects，后一个是当前effects对应的fiber</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> _effect2 = mountEffects[_i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _fiber = mountEffects[_i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"title function_\">setCurrentFiber</span>(_fiber); <span class=\"comment\">// 设置当前环境fiber</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用invokePassiveEffectCreate执行effects函数</span></span><br><span class=\"line\">            <span class=\"title function_\">invokeGuardedCallback</span>(<span class=\"literal\">null</span>, invokePassiveEffectCreate, <span class=\"literal\">null</span>, _effect2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">hasCaughtError</span>()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title function_\">resetCurrentFiber</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数最后还会调用下面这个函数，这样会去清除<code>syncQueue</code>队列内部的更新事件，这也是为什么如果在<code>useEffect</code>中设置<code>state</code>会导致无限更新的原因</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">flushSyncCallbackQueue</span>(); </span><br><span class=\"line\"><span class=\"comment\">// 这个函数内部会调用flushSyncCallbackQueue()</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"invokePassiveEffectCreate\"><a href=\"#invokePassiveEffectCreate\" class=\"headerlink\" title=\"invokePassiveEffectCreate\"></a>invokePassiveEffectCreate</h4><ul>\n<li>真正执行<code>effects</code>函数的代码</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokePassiveEffectCreate</span>(<span class=\"params\">effect</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> create = effect.<span class=\"property\">create</span>;</span><br><span class=\"line\">    effect.<span class=\"property\">destroy</span> = <span class=\"title function_\">create</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// effects如下</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">tag</span>: <span class=\"number\">5</span>, <span class=\"comment\">// 标识hook类型</span></span><br><span class=\"line\">  <span class=\"attr\">create</span>: <span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// 这个就是用户的effect函数</span></span><br><span class=\"line\">    <span class=\"keyword\">debugger</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;effect!&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">destroy</span>: <span class=\"literal\">undefined</span>, <span class=\"comment\">// 存储可能存在的销毁函数</span></span><br><span class=\"line\">  <span class=\"attr\">deps</span>: <span class=\"literal\">null</span>, <span class=\"comment\">// 依赖数组</span></span><br><span class=\"line\">  <span class=\"attr\">next</span>: [<span class=\"title class_\">Circular</span>], <span class=\"comment\">// 下一个effect</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitMutationEffects\"><a href=\"#commitMutationEffects\" class=\"headerlink\" title=\"commitMutationEffects\"></a>commitMutationEffects</h3><ul>\n<li><strong>之前说过，React在这个函数中把Fiber树对应渲染好的真实DOM树添加到页面上，除此之外还会执行一次特定<code>effects</code></strong></li>\n</ul>\n<h4 id=\"commitHookEffectListUnmount\"><a href=\"#commitHookEffectListUnmount\" class=\"headerlink\" title=\"commitHookEffectListUnmount\"></a>commitHookEffectListUnmount</h4><ul>\n<li><strong>执行所有<code>effects</code>的销毁函数，因为组件进行了一次更新</strong></li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; tag) === tag) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Unmount</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> destroy = effect.<span class=\"property\">destroy</span>; <span class=\"comment\">// effect 对象</span></span><br><span class=\"line\">        effect.<span class=\"property\">destroy</span> = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroy !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">destroy</span>(); <span class=\"comment\">// 这个就是销毁函数</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      effect = effect.<span class=\"property\">next</span>; <span class=\"comment\">// 执行下一个effect</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (effect !== firstEffect);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"commitLayoutEffects\"><a href=\"#commitLayoutEffects\" class=\"headerlink\" title=\"commitLayoutEffects\"></a>commitLayoutEffects</h3><ul>\n<li>在真实DOM渲染完成之后类似方式调用的函数</li>\n</ul>\n<blockquote>\n<p>invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);</p>\n</blockquote>\n<h4 id=\"commitLifeCycles\"><a href=\"#commitLifeCycles\" class=\"headerlink\" title=\"commitLifeCycles\"></a>commitLifeCycles</h4><ul>\n<li><p>如同函数名称一样，会处理各种生命周期函数（包括：effects）</p>\n</li>\n<li><p><code>commitHookEffectListMount</code>函数在满足某种条件下（没看懂…），执行<code>effect</code>函数</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((effect.<span class=\"property\">tag</span> &amp; tag) === tag) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Mount</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> create = effect.<span class=\"property\">create</span>;</span><br><span class=\"line\">    effect.<span class=\"property\">destroy</span> = <span class=\"title function_\">create</span>();</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> destroy = effect.<span class=\"property\">destroy</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (destroy !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">typeof</span> destroy !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ... 很多对返回的destroy函数使用不当的warn</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"schedulePassiveEffects\"><a href=\"#schedulePassiveEffects\" class=\"headerlink\" title=\"schedulePassiveEffects\"></a>schedulePassiveEffects</h4><ul>\n<li><code>schedulePassiveEffects</code>函数会将需要执行的<code>effect</code>保存下来，在后续调用？</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 部分源码</span></span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _effect = effect,</span><br><span class=\"line\">        next = _effect.<span class=\"property\">next</span>,</span><br><span class=\"line\">        tag = _effect.<span class=\"property\">tag</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((tag &amp; <span class=\"title class_\">Passive</span>$<span class=\"number\">1</span>) !== <span class=\"title class_\">NoFlags</span>$<span class=\"number\">1</span> &amp;&amp; (tag &amp; <span class=\"title class_\">HasEffect</span>) !== <span class=\"title class_\">NoFlags</span>$<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 下面两个函数分别将fiber和hook存入pendingPassiveHookEffectsUnmount和pendingPassiveHookEffectsMount</span></span><br><span class=\"line\">        <span class=\"comment\">// 而pendingPassiveHookEffectsMount就是在flushPassiveEffects函数中获取effect的数组</span></span><br><span class=\"line\">        <span class=\"title function_\">enqueuePendingPassiveHookEffectUnmount</span>(finishedWork, effect);</span><br><span class=\"line\">        <span class=\"title function_\">enqueuePendingPassiveHookEffectMount</span>(finishedWork, effect);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    effect = next;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (effect !== firstEffect);</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"RustStudyBasic","date":"2022-02-21T23:16:23.000Z","description":"Rust基础学习总结（或者可以说是体会）","cover":"https://pic1.zhimg.com/v2-31abd59d97446ec29a8aee9a9284761f_1440w.jpg?source=172ae18b","_content":"## Rust基础学习总结\n\n### 前言\n\n- 之前浏览公众号的时候看见几篇文章，谈及Rust对前端基础建设具有可观的潜力~~（同时在家里有点无聊）~~，自己也对这方面感兴趣，就从 2.9 开始学习Rust\n  - 学习方式：阅读[Rust 程序设计语言](https://kaisery.github.io/trpl-zh-cn/title-page.html) + 手动练习语法\n- 2.22 阅读完前19章（除了最后的练习项目以及附录），下文则是**简单的学习总结**\n  - 由于之前一直在学习和使用**`JavaScript`**（下文写作JS），所以也使用JS中的语法做比较\n\n## hello_world\n\n### 编程习惯\n\n- Rust对变量、文件、函数等命名规定使用`_`分割单词，例如：`hello_world.rs`，JS没有明说，但大部分人使用驼峰命名，例如：`helloWorld.js`\n\n### 运行环境\n\n- JS不用多说，浏览器是一切的开始（具体可以是chrome的V8引擎），Rust需要从官网安装运行环境，同时自带官方包管理器（Cargo），类比Node和npm\n\n### 语言特征\n\n- Rust和原生JS相反，Rust是静态语言，需要先编译再运行，同时也需要指明类型供编译器检查\n\n## 基本概念\n\n- 大多数编程语言公有的类型，Rust也一样，这些可以略过\n  - 数据类型\n  - 函数\n  - 结构（类比class）\n  - 枚举\n  - 控制流（Rust的控制流可以玩得比较花）\n  - 泛型（静态语言一般都有）\n  - 迭代器\n  - ...\n\n- Rust最为独特的特性无疑是**`ownership`**（所有权系统）\n\n### 所有权\n\n- Rust对比JS更偏向于底层，JS的垃圾回收自动执行，Rust也是自动执行，但是是基于所有权系统执行\n- 所有权系统也保证了Rust的内存安全\n- 官方给出的所有权规则\n\n> - Rust 中的每一个值都有一个被称为其 **所有者**（*owner*）的变量。\n> - 值在任一时刻有且只有一个所有者。\n> - 当所有者（变量）离开作用域，这个值将被丢弃。\n\n### 引用\n\n- 学到这里的第一反应就是C++中的引用（keyword都一样`&`）\n- Rust的引用实际上也是在所有权系统之上运行\n- 官方给出的引用规则\n\n> - 在任意给定时间，**要么** 只能有一个可变引用，**要么** 只能有多个不可变引用。\n> - 引用必须总是有效的。\n\n- 理解引用十分重要，后续Rust代码编写过程中，会处处使用到引用。在我学习过程中，基本可以理解引用为指针（官方也这么类比），一般引用可以是C语言中的**`* const ptr`**（值不可变）\n\n### 模块系统\n\n- Rust有官方的包管理器，模块系统也有自己的一套，不过模块系统实际要解决的问题和其他语言一样，所以容易理解，只是关键字需要替换下\n\n## trait和life_cycle\n\n### trait\n\n- 学习到这里让我想到了红宝书（JavaScript）中讲到`class`提及的组合模式以及设计模式中经典的鸭子类型\n- 简而言之，可以为`struct`实现`trait`，那么就可以调用`trait`中的方法（不会关心是什么类型的`struct`）\n- 学习完基础的`trait`，可以发现Rust到处都是用到了`trait`，最常用到的打印宏`println!`，里面需要格式化输出时，可以输出的数据类型，都在Rust内部实现了**`std::fmt::Display`**，例如：String、i8-128、u8-128、Vec等\n\n### life_cycle\n\n- 还是由于所有权系统引出的引用所需要的语法，Rust确保不会出现空指针（NULL）（unsafe情况下可能出现），所以函数传入引用参数，返回引用时Rust编译器检查会出问题，可能会出现悬垂引用（类比空指针），Rust为了不让这种情况出现，需要我们指明引用关系（声明周期）\n- 读完文档之后，很好理解，除了语法很怪（`fn test<'a>(str1:&'a str)->&'a str`）\n\n## 智能指针\n\n- 和C语言的指针基本一致，学习下来智能最大体现在不需要手动释放（例如：`free(p);`）\n- 同时也涉及到了解引用（和C语言一样的keyword：`*`），Rust内部则是使用**`trait`**实现，实际上Rust可以使用**`trait`**实现运算符重载\n  - 效果和C语言一致，解引用可以读写指针指向的内存地址上存放的值\n\n- 后续涉及到了引用计数`RC<>`（很像JS的过去的垃圾回收机制，但是Rust是为了实现多个所有权的特殊情况），内部不可变性`RefCell<>`\n\n## 函数式编程\n\n- JS很熟悉的一个概念，我的简单理解就是：**函数可以随便传**（例如：函数当做参数传递给函数）\n- Rust也一样，可以利用泛型和`trait`配合，把函数当做参数传递给函数，实现许多高阶功能\n- 同时Rust还有闭包（JS中的闭包更偏向于变量机制），Rust主要是可以实现内联匿名函数，写出许多灵活的代码\n","source":"_posts/RustStudyBasic.md","raw":"---\ntitle: RustStudyBasic\ndate: 2022-02-22 07:16:23\ntag:\n - Rust\n - basic\ncategories:\n - Rust\ndescription: Rust基础学习总结（或者可以说是体会）\ncover: https://pic1.zhimg.com/v2-31abd59d97446ec29a8aee9a9284761f_1440w.jpg?source=172ae18b\n\n---\n## Rust基础学习总结\n\n### 前言\n\n- 之前浏览公众号的时候看见几篇文章，谈及Rust对前端基础建设具有可观的潜力~~（同时在家里有点无聊）~~，自己也对这方面感兴趣，就从 2.9 开始学习Rust\n  - 学习方式：阅读[Rust 程序设计语言](https://kaisery.github.io/trpl-zh-cn/title-page.html) + 手动练习语法\n- 2.22 阅读完前19章（除了最后的练习项目以及附录），下文则是**简单的学习总结**\n  - 由于之前一直在学习和使用**`JavaScript`**（下文写作JS），所以也使用JS中的语法做比较\n\n## hello_world\n\n### 编程习惯\n\n- Rust对变量、文件、函数等命名规定使用`_`分割单词，例如：`hello_world.rs`，JS没有明说，但大部分人使用驼峰命名，例如：`helloWorld.js`\n\n### 运行环境\n\n- JS不用多说，浏览器是一切的开始（具体可以是chrome的V8引擎），Rust需要从官网安装运行环境，同时自带官方包管理器（Cargo），类比Node和npm\n\n### 语言特征\n\n- Rust和原生JS相反，Rust是静态语言，需要先编译再运行，同时也需要指明类型供编译器检查\n\n## 基本概念\n\n- 大多数编程语言公有的类型，Rust也一样，这些可以略过\n  - 数据类型\n  - 函数\n  - 结构（类比class）\n  - 枚举\n  - 控制流（Rust的控制流可以玩得比较花）\n  - 泛型（静态语言一般都有）\n  - 迭代器\n  - ...\n\n- Rust最为独特的特性无疑是**`ownership`**（所有权系统）\n\n### 所有权\n\n- Rust对比JS更偏向于底层，JS的垃圾回收自动执行，Rust也是自动执行，但是是基于所有权系统执行\n- 所有权系统也保证了Rust的内存安全\n- 官方给出的所有权规则\n\n> - Rust 中的每一个值都有一个被称为其 **所有者**（*owner*）的变量。\n> - 值在任一时刻有且只有一个所有者。\n> - 当所有者（变量）离开作用域，这个值将被丢弃。\n\n### 引用\n\n- 学到这里的第一反应就是C++中的引用（keyword都一样`&`）\n- Rust的引用实际上也是在所有权系统之上运行\n- 官方给出的引用规则\n\n> - 在任意给定时间，**要么** 只能有一个可变引用，**要么** 只能有多个不可变引用。\n> - 引用必须总是有效的。\n\n- 理解引用十分重要，后续Rust代码编写过程中，会处处使用到引用。在我学习过程中，基本可以理解引用为指针（官方也这么类比），一般引用可以是C语言中的**`* const ptr`**（值不可变）\n\n### 模块系统\n\n- Rust有官方的包管理器，模块系统也有自己的一套，不过模块系统实际要解决的问题和其他语言一样，所以容易理解，只是关键字需要替换下\n\n## trait和life_cycle\n\n### trait\n\n- 学习到这里让我想到了红宝书（JavaScript）中讲到`class`提及的组合模式以及设计模式中经典的鸭子类型\n- 简而言之，可以为`struct`实现`trait`，那么就可以调用`trait`中的方法（不会关心是什么类型的`struct`）\n- 学习完基础的`trait`，可以发现Rust到处都是用到了`trait`，最常用到的打印宏`println!`，里面需要格式化输出时，可以输出的数据类型，都在Rust内部实现了**`std::fmt::Display`**，例如：String、i8-128、u8-128、Vec等\n\n### life_cycle\n\n- 还是由于所有权系统引出的引用所需要的语法，Rust确保不会出现空指针（NULL）（unsafe情况下可能出现），所以函数传入引用参数，返回引用时Rust编译器检查会出问题，可能会出现悬垂引用（类比空指针），Rust为了不让这种情况出现，需要我们指明引用关系（声明周期）\n- 读完文档之后，很好理解，除了语法很怪（`fn test<'a>(str1:&'a str)->&'a str`）\n\n## 智能指针\n\n- 和C语言的指针基本一致，学习下来智能最大体现在不需要手动释放（例如：`free(p);`）\n- 同时也涉及到了解引用（和C语言一样的keyword：`*`），Rust内部则是使用**`trait`**实现，实际上Rust可以使用**`trait`**实现运算符重载\n  - 效果和C语言一致，解引用可以读写指针指向的内存地址上存放的值\n\n- 后续涉及到了引用计数`RC<>`（很像JS的过去的垃圾回收机制，但是Rust是为了实现多个所有权的特殊情况），内部不可变性`RefCell<>`\n\n## 函数式编程\n\n- JS很熟悉的一个概念，我的简单理解就是：**函数可以随便传**（例如：函数当做参数传递给函数）\n- Rust也一样，可以利用泛型和`trait`配合，把函数当做参数传递给函数，实现许多高阶功能\n- 同时Rust还有闭包（JS中的闭包更偏向于变量机制），Rust主要是可以实现内联匿名函数，写出许多灵活的代码\n","slug":"RustStudyBasic","published":1,"updated":"2022-04-12T07:38:30.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3ous00051wuq6kw3744q","content":"<h2 id=\"Rust基础学习总结\"><a href=\"#Rust基础学习总结\" class=\"headerlink\" title=\"Rust基础学习总结\"></a>Rust基础学习总结</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>之前浏览公众号的时候看见几篇文章，谈及Rust对前端基础建设具有可观的潜力<del>（同时在家里有点无聊）</del>，自己也对这方面感兴趣，就从 2.9 开始学习Rust<ul>\n<li>学习方式：阅读<a href=\"https://kaisery.github.io/trpl-zh-cn/title-page.html\">Rust 程序设计语言</a> + 手动练习语法</li>\n</ul>\n</li>\n<li>2.22 阅读完前19章（除了最后的练习项目以及附录），下文则是<strong>简单的学习总结</strong><ul>\n<li>由于之前一直在学习和使用**<code>JavaScript</code>**（下文写作JS），所以也使用JS中的语法做比较</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello_world\"></a>hello_world</h2><h3 id=\"编程习惯\"><a href=\"#编程习惯\" class=\"headerlink\" title=\"编程习惯\"></a>编程习惯</h3><ul>\n<li>Rust对变量、文件、函数等命名规定使用<code>_</code>分割单词，例如：<code>hello_world.rs</code>，JS没有明说，但大部分人使用驼峰命名，例如：<code>helloWorld.js</code></li>\n</ul>\n<h3 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h3><ul>\n<li>JS不用多说，浏览器是一切的开始（具体可以是chrome的V8引擎），Rust需要从官网安装运行环境，同时自带官方包管理器（Cargo），类比Node和npm</li>\n</ul>\n<h3 id=\"语言特征\"><a href=\"#语言特征\" class=\"headerlink\" title=\"语言特征\"></a>语言特征</h3><ul>\n<li>Rust和原生JS相反，Rust是静态语言，需要先编译再运行，同时也需要指明类型供编译器检查</li>\n</ul>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p>大多数编程语言公有的类型，Rust也一样，这些可以略过</p>\n<ul>\n<li>数据类型</li>\n<li>函数</li>\n<li>结构（类比class）</li>\n<li>枚举</li>\n<li>控制流（Rust的控制流可以玩得比较花）</li>\n<li>泛型（静态语言一般都有）</li>\n<li>迭代器</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>Rust最为独特的特性无疑是**<code>ownership</code>**（所有权系统）</p>\n</li>\n</ul>\n<h3 id=\"所有权\"><a href=\"#所有权\" class=\"headerlink\" title=\"所有权\"></a>所有权</h3><ul>\n<li>Rust对比JS更偏向于底层，JS的垃圾回收自动执行，Rust也是自动执行，但是是基于所有权系统执行</li>\n<li>所有权系统也保证了Rust的内存安全</li>\n<li>官方给出的所有权规则</li>\n</ul>\n<blockquote>\n<ul>\n<li>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ul>\n</blockquote>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li>学到这里的第一反应就是C++中的引用（keyword都一样<code>&amp;</code>）</li>\n<li>Rust的引用实际上也是在所有权系统之上运行</li>\n<li>官方给出的引用规则</li>\n</ul>\n<blockquote>\n<ul>\n<li>在任意给定时间，<strong>要么</strong> 只能有一个可变引用，<strong>要么</strong> 只能有多个不可变引用。</li>\n<li>引用必须总是有效的。</li>\n</ul>\n</blockquote>\n<ul>\n<li>理解引用十分重要，后续Rust代码编写过程中，会处处使用到引用。在我学习过程中，基本可以理解引用为指针（官方也这么类比），一般引用可以是C语言中的**<code>* const ptr</code>**（值不可变）</li>\n</ul>\n<h3 id=\"模块系统\"><a href=\"#模块系统\" class=\"headerlink\" title=\"模块系统\"></a>模块系统</h3><ul>\n<li>Rust有官方的包管理器，模块系统也有自己的一套，不过模块系统实际要解决的问题和其他语言一样，所以容易理解，只是关键字需要替换下</li>\n</ul>\n<h2 id=\"trait和life-cycle\"><a href=\"#trait和life-cycle\" class=\"headerlink\" title=\"trait和life_cycle\"></a>trait和life_cycle</h2><h3 id=\"trait\"><a href=\"#trait\" class=\"headerlink\" title=\"trait\"></a>trait</h3><ul>\n<li>学习到这里让我想到了红宝书（JavaScript）中讲到<code>class</code>提及的组合模式以及设计模式中经典的鸭子类型</li>\n<li>简而言之，可以为<code>struct</code>实现<code>trait</code>，那么就可以调用<code>trait</code>中的方法（不会关心是什么类型的<code>struct</code>）</li>\n<li>学习完基础的<code>trait</code>，可以发现Rust到处都是用到了<code>trait</code>，最常用到的打印宏<code>println!</code>，里面需要格式化输出时，可以输出的数据类型，都在Rust内部实现了**<code>std::fmt::Display</code>**，例如：String、i8-128、u8-128、Vec等</li>\n</ul>\n<h3 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life_cycle\"></a>life_cycle</h3><ul>\n<li>还是由于所有权系统引出的引用所需要的语法，Rust确保不会出现空指针（NULL）（unsafe情况下可能出现），所以函数传入引用参数，返回引用时Rust编译器检查会出问题，可能会出现悬垂引用（类比空指针），Rust为了不让这种情况出现，需要我们指明引用关系（声明周期）</li>\n<li>读完文档之后，很好理解，除了语法很怪（<code>fn test&lt;&#39;a&gt;(str1:&amp;&#39;a str)-&gt;&amp;&#39;a str</code>）</li>\n</ul>\n<h2 id=\"智能指针\"><a href=\"#智能指针\" class=\"headerlink\" title=\"智能指针\"></a>智能指针</h2><ul>\n<li><p>和C语言的指针基本一致，学习下来智能最大体现在不需要手动释放（例如：<code>free(p);</code>）</p>\n</li>\n<li><p>同时也涉及到了解引用（和C语言一样的keyword：<code>*</code>），Rust内部则是使用**<code>trait</code><strong>实现，实际上Rust可以使用</strong><code>trait</code>**实现运算符重载</p>\n<ul>\n<li>效果和C语言一致，解引用可以读写指针指向的内存地址上存放的值</li>\n</ul>\n</li>\n<li><p>后续涉及到了引用计数<code>RC&lt;&gt;</code>（很像JS的过去的垃圾回收机制，但是Rust是为了实现多个所有权的特殊情况），内部不可变性<code>RefCell&lt;&gt;</code></p>\n</li>\n</ul>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>JS很熟悉的一个概念，我的简单理解就是：<strong>函数可以随便传</strong>（例如：函数当做参数传递给函数）</li>\n<li>Rust也一样，可以利用泛型和<code>trait</code>配合，把函数当做参数传递给函数，实现许多高阶功能</li>\n<li>同时Rust还有闭包（JS中的闭包更偏向于变量机制），Rust主要是可以实现内联匿名函数，写出许多灵活的代码</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Rust基础学习总结\"><a href=\"#Rust基础学习总结\" class=\"headerlink\" title=\"Rust基础学习总结\"></a>Rust基础学习总结</h2><h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>之前浏览公众号的时候看见几篇文章，谈及Rust对前端基础建设具有可观的潜力<del>（同时在家里有点无聊）</del>，自己也对这方面感兴趣，就从 2.9 开始学习Rust<ul>\n<li>学习方式：阅读<a href=\"https://kaisery.github.io/trpl-zh-cn/title-page.html\">Rust 程序设计语言</a> + 手动练习语法</li>\n</ul>\n</li>\n<li>2.22 阅读完前19章（除了最后的练习项目以及附录），下文则是<strong>简单的学习总结</strong><ul>\n<li>由于之前一直在学习和使用**<code>JavaScript</code>**（下文写作JS），所以也使用JS中的语法做比较</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello_world\"></a>hello_world</h2><h3 id=\"编程习惯\"><a href=\"#编程习惯\" class=\"headerlink\" title=\"编程习惯\"></a>编程习惯</h3><ul>\n<li>Rust对变量、文件、函数等命名规定使用<code>_</code>分割单词，例如：<code>hello_world.rs</code>，JS没有明说，但大部分人使用驼峰命名，例如：<code>helloWorld.js</code></li>\n</ul>\n<h3 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h3><ul>\n<li>JS不用多说，浏览器是一切的开始（具体可以是chrome的V8引擎），Rust需要从官网安装运行环境，同时自带官方包管理器（Cargo），类比Node和npm</li>\n</ul>\n<h3 id=\"语言特征\"><a href=\"#语言特征\" class=\"headerlink\" title=\"语言特征\"></a>语言特征</h3><ul>\n<li>Rust和原生JS相反，Rust是静态语言，需要先编译再运行，同时也需要指明类型供编译器检查</li>\n</ul>\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p>大多数编程语言公有的类型，Rust也一样，这些可以略过</p>\n<ul>\n<li>数据类型</li>\n<li>函数</li>\n<li>结构（类比class）</li>\n<li>枚举</li>\n<li>控制流（Rust的控制流可以玩得比较花）</li>\n<li>泛型（静态语言一般都有）</li>\n<li>迭代器</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>Rust最为独特的特性无疑是**<code>ownership</code>**（所有权系统）</p>\n</li>\n</ul>\n<h3 id=\"所有权\"><a href=\"#所有权\" class=\"headerlink\" title=\"所有权\"></a>所有权</h3><ul>\n<li>Rust对比JS更偏向于底层，JS的垃圾回收自动执行，Rust也是自动执行，但是是基于所有权系统执行</li>\n<li>所有权系统也保证了Rust的内存安全</li>\n<li>官方给出的所有权规则</li>\n</ul>\n<blockquote>\n<ul>\n<li>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</li>\n<li>值在任一时刻有且只有一个所有者。</li>\n<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>\n</ul>\n</blockquote>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><ul>\n<li>学到这里的第一反应就是C++中的引用（keyword都一样<code>&amp;</code>）</li>\n<li>Rust的引用实际上也是在所有权系统之上运行</li>\n<li>官方给出的引用规则</li>\n</ul>\n<blockquote>\n<ul>\n<li>在任意给定时间，<strong>要么</strong> 只能有一个可变引用，<strong>要么</strong> 只能有多个不可变引用。</li>\n<li>引用必须总是有效的。</li>\n</ul>\n</blockquote>\n<ul>\n<li>理解引用十分重要，后续Rust代码编写过程中，会处处使用到引用。在我学习过程中，基本可以理解引用为指针（官方也这么类比），一般引用可以是C语言中的**<code>* const ptr</code>**（值不可变）</li>\n</ul>\n<h3 id=\"模块系统\"><a href=\"#模块系统\" class=\"headerlink\" title=\"模块系统\"></a>模块系统</h3><ul>\n<li>Rust有官方的包管理器，模块系统也有自己的一套，不过模块系统实际要解决的问题和其他语言一样，所以容易理解，只是关键字需要替换下</li>\n</ul>\n<h2 id=\"trait和life-cycle\"><a href=\"#trait和life-cycle\" class=\"headerlink\" title=\"trait和life_cycle\"></a>trait和life_cycle</h2><h3 id=\"trait\"><a href=\"#trait\" class=\"headerlink\" title=\"trait\"></a>trait</h3><ul>\n<li>学习到这里让我想到了红宝书（JavaScript）中讲到<code>class</code>提及的组合模式以及设计模式中经典的鸭子类型</li>\n<li>简而言之，可以为<code>struct</code>实现<code>trait</code>，那么就可以调用<code>trait</code>中的方法（不会关心是什么类型的<code>struct</code>）</li>\n<li>学习完基础的<code>trait</code>，可以发现Rust到处都是用到了<code>trait</code>，最常用到的打印宏<code>println!</code>，里面需要格式化输出时，可以输出的数据类型，都在Rust内部实现了**<code>std::fmt::Display</code>**，例如：String、i8-128、u8-128、Vec等</li>\n</ul>\n<h3 id=\"life-cycle\"><a href=\"#life-cycle\" class=\"headerlink\" title=\"life_cycle\"></a>life_cycle</h3><ul>\n<li>还是由于所有权系统引出的引用所需要的语法，Rust确保不会出现空指针（NULL）（unsafe情况下可能出现），所以函数传入引用参数，返回引用时Rust编译器检查会出问题，可能会出现悬垂引用（类比空指针），Rust为了不让这种情况出现，需要我们指明引用关系（声明周期）</li>\n<li>读完文档之后，很好理解，除了语法很怪（<code>fn test&lt;&#39;a&gt;(str1:&amp;&#39;a str)-&gt;&amp;&#39;a str</code>）</li>\n</ul>\n<h2 id=\"智能指针\"><a href=\"#智能指针\" class=\"headerlink\" title=\"智能指针\"></a>智能指针</h2><ul>\n<li><p>和C语言的指针基本一致，学习下来智能最大体现在不需要手动释放（例如：<code>free(p);</code>）</p>\n</li>\n<li><p>同时也涉及到了解引用（和C语言一样的keyword：<code>*</code>），Rust内部则是使用**<code>trait</code><strong>实现，实际上Rust可以使用</strong><code>trait</code>**实现运算符重载</p>\n<ul>\n<li>效果和C语言一致，解引用可以读写指针指向的内存地址上存放的值</li>\n</ul>\n</li>\n<li><p>后续涉及到了引用计数<code>RC&lt;&gt;</code>（很像JS的过去的垃圾回收机制，但是Rust是为了实现多个所有权的特殊情况），内部不可变性<code>RefCell&lt;&gt;</code></p>\n</li>\n</ul>\n<h2 id=\"函数式编程\"><a href=\"#函数式编程\" class=\"headerlink\" title=\"函数式编程\"></a>函数式编程</h2><ul>\n<li>JS很熟悉的一个概念，我的简单理解就是：<strong>函数可以随便传</strong>（例如：函数当做参数传递给函数）</li>\n<li>Rust也一样，可以利用泛型和<code>trait</code>配合，把函数当做参数传递给函数，实现许多高阶功能</li>\n<li>同时Rust还有闭包（JS中的闭包更偏向于变量机制），Rust主要是可以实现内联匿名函数，写出许多灵活的代码</li>\n</ul>\n"},{"title":"vue2SourceDebug","date":"2021-11-15T01:29:39.000Z","description":"Vue2源码的一次debug","cover":"/img/cover_6.webp","top_image":"https://pic2.zhimg.com/v2-db7221c0d7ca752b2f88d7ca94939976_1440w.jpg?source=172ae18b","_content":"## 前言\n\n之前了解Vue源码都是通过网上一些文章获取，从未真正debug过Vue源码，所以就有了这篇文章\n\n**写完之后发现就是源码的堆积，理解还是不够啊**\n\n- Vue版本：2.6.14\n- 简单手动配置webpack后进行debug\n- 入口文件代码如下\n\n```javascript\n/* index.js */\nimport Vue from \"vue\";\nimport Header from \"./components/Header/index.js\";\n\ndebugger; //此处进行debug调试\n\nexport default new Vue({\n  el: \"#app\",\n  data() { // 测试data\n    return {\n      text: \"123\",\n      ifFlag: true,\n      inputValue: \"input something\",\n    };\n  },\n  methods: { // 测试methods\n    hello() {\n      console.log(\"==app hello\");\n    },\n  },\n  computed: { // 测试computed\n    reversedText() {\n      return this.text.split(\"\").reverse().join(\"\");\n    },\n  },\n  // 测试lifeCycle\n  beforeCreate() {\n    console.log(\"==app before create\");\n  },\n  created() {\n    console.log(\"==app created\");\n  },\n  beforeMount() {\n    console.log(\"==app before mount\");\n  },\n  mounted() {\n    console.log(\"==app mounted\");\n  },\n  beforeUpdate() {\n    console.log(\"==app before update\");\n  },\n  updated() {\n    console.log(\"==app updated\");\n  },\n  // 测试component\n  components: {\n    Header,\n  },\n  // 测试template\n  template: `\n    <div id=\"app\" @click=\"hello\">\n      <div>{{reversedText}}</div>\n      <div v-if=\"ifFlag\">ifFlag is true then I will show</div>\n      <input v-model=\"inputValue\" />\n      <p>what you input is:{{inputValue}}</p>\n      <Header :propValue=\"'from app'\" />\n    </div>\n  `,\n});\n```\n\n- Header组件\n\n```javascript\n/* Header.js */\nimport Vue from \"vue\";\n\nexport default Vue.component(\"Header\", {\n  template: `\n  <div @click=\"showMsg\" class=\"header\">\n    text:{{text}}\n    propValue:{{propValue}}\n  </div>\n  `,\n  data() {\n    return {\n      text: \"i am header\",\n    };\n  },\n  props: [\"propValue\"], // props测试\n  methods: {\n    showMsg() {\n      console.log(\"==from header\");\n    },\n  },\n  created() {\n    console.log(\"==Header components created\");\n  },\n  mounted() {\n    console.log(\"==Header components mounted\");\n  },\n});\n```\n\n## Vue2源码的一次debug\n\n**debug过程中，相关源码会进行简化，省略无关代码（例如所有环境分支均已删除，保留开发环境）**\n\n单步调试`export default new Vue({...})`，就会进入Vue的构造函数内部\n\n```javascript\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n```\n\n- 可以看到Vue的构造函数很简单，接受传入的options，直接调用`_init`方法初始化\n\n### __init\n\n_init方法在源码中已被mixin（混入）Vue构造方法\n\n```javascript\nVue.prototype._init = function (options) {\n    var vm = this;\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n        // optimize internal component instantiation\n        // since dynamic options merging is pretty slow, and none of the\n        // internal component options needs special treatment.\n        initInternalComponent(vm, options);\n    } else {\n        vm.$options = mergeOptions(\n            resolveConstructorOptions(vm.constructor),\n            options || {},\n            vm\n        );\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el);\n    }\n};\n```\n\n- 初始化变量 vm = 当前即将创建的Vue对象\n- 标记当前即将创建的对象是Vue`_isVue = true`\n- **可以关注下两个声明周期函数的执行时间**\n- **最后把Vue挂载到DOM上**\n- **下面是每个步骤函数的简单解析**\n\n#### initInternalComponent\n\n- Vnode中存在自定义组件时，在创建真实DOM元素的时候才会调用这个函数\n\n```javascript\nfunction initInternalComponent (vm, options) {\n    var opts = vm.$options = Object.create(vm.constructor.options);\n    // doing this because it's faster than dynamic enumeration.\n    var parentVnode = options._parentVnode;\n    opts.parent = options.parent;\n    opts._parentVnode = parentVnode;\n\n    var vnodeComponentOptions = parentVnode.componentOptions;\n    opts.propsData = vnodeComponentOptions.propsData;\n    opts._parentListeners = vnodeComponentOptions.listeners;\n    opts._renderChildren = vnodeComponentOptions.children;\n    opts._componentTag = vnodeComponentOptions.tag;\n\n    if (options.render) {\n        opts.render = options.render;\n        opts.staticRenderFns = options.staticRenderFns;\n    }\n}\n```\n\n- 注意：`options.__parentVnode`指的是组件自身的VNode，`options.parentVnode`指的是父组件的Vue实例对象\n\n#### mergeOptoins\n\n- 合并option（选项）\n\n- resolveConstructorOptions函数获取了`Vue.constructor`上的属性\n\n```javascript\n  function mergeOptions (\n    parent, // Vue.constructor上的属性\n    child, // 我们传入的option\n    vm // 当前Vue对象\n  ) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkComponents(child);\n    }\n  \n    normalizeProps(child, vm);\n    normalizeInject(child, vm);\n    normalizeDirectives(child);\n  \n    // Apply extends and mixins on the child options,\n    // but only if it is a raw options object that isn't\n    // the result of another mergeOptions call.\n    // Only merged options has the _base property.\n    if (!child._base) {\n      if (child.extends) {\n        parent = mergeOptions(parent, child.extends, vm);\n      }\n      if (child.mixins) {\n        for (var i = 0, l = child.mixins.length; i < l; i++) {\n          parent = mergeOptions(parent, child.mixins[i], vm);\n        }\n      }\n    }\n  \n    var options = {};\n    var key;\n    for (key in parent) {\n      mergeField(key);\n    }\n    for (key in child) {\n      if (!hasOwn(parent, key)) {\n        mergeField(key);\n      }\n    }\n    function mergeField (key) {\n      var strat = strats[key] || defaultStrat;\n      options[key] = strat(parent[key], child[key], vm, key);\n    }\n    return options\n  }\n  ```\n\n  - `checkComponents`函数检测**自定义组件名是否规范**（例如：不能自定义一个div组件，html已有div标签）\n  - `normalizeProps`函数检测**`props`是否规范**（例如：是否是array或者plainObject）\n    - 同时也进行了格式化，连字符格式转为驼峰格式\n  - normalizeInject、normalizeDirectives函数同上\n  - 后续针对extends和mixins方法创建的子构造器合并了选项\n  - 最后合并父子的option选项，合并时的优先级如下：（**优先级高的覆盖优先级低的，不会∪在一起**）\n    - 自定义option\n    - 子option\n    - 父option\n\n#### initProxy\n\n- 仅用于开发环境，利用es6的proxy代理Vue属性的访问，当访问不存在的属性时，log提醒\n\n#### initLifecycle\n\n```javascript\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm; // 当前组件树的根 Vue 实例\n\n  vm.$children = []; // 当前实例的直接子组件\n  vm.$refs = {};\n\n  vm._watcher = null;\n  // lifeCycle的flag\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n```\n\n- 首先找到第一个非抽象父组件（keep-alive就是抽象组件）\n- 初始化vm的一些属性\n\n#### initEvents\n\n```javascript\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n```\n\n- 初始化Vue对象的events（事件）功能，包括但不限于：\n  - **处理父组件传递的事件**\n  - **`this.$on`方法注册事件**\n  - **`this.$emit`方法触发事件**\n\n#### initRender\n\n```javascript\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n```\n\n- 初始化vm的一些属性\n\n  - _vnode指的是Vue对象挂载到DOM的VNode\n  - $vnode指的是Vue组件在parent中template中的占位node\n\n- resolveSlots函数解析组件传入的slot，并赋值给$slot\n\n  函数实现如下：\n\n  ```javascript\n  function resolveSlots (\n    children,\n    context\n  ) {\n    if (!children || !children.length) {\n      return {}\n    }\n    var slots = {};\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var data = child.data;\n      // remove slot attribute if the node is resolved as a Vue slot node\n      if (data && data.attrs && data.attrs.slot) {\n        delete data.attrs.slot;\n      }\n      // named slots should only be respected if the vnode was rendered in the\n      // same context.\n      if ((child.context === context || child.fnContext === context) &&\n        data && data.slot != null\n      ) {\n        var name = data.slot;\n        var slot = (slots[name] || (slots[name] = []));\n        if (child.tag === 'template') { // 这里对template进行了特殊处理\n          slot.push.apply(slot, child.children || []);\n        } else {\n          slot.push(child);\n        }\n      } else {\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n    // ignore slots that contains only whitespace\n    for (var name$1 in slots) {\n      if (slots[name$1].every(isWhitespace)) {\n        delete slots[name$1];\n      }\n    }\n    return slots\n  }\n  ```\n\n- 同时创建了$createElement函数（_c函数同理），用于VDOM生成实际DOM\n\n- 最后对`$attrs`和`$listeners`进行了响应式处理\n\n#### callHook('beforeCreated')\n\n顾名思义，此时调用了`beforeCreated`生命周期函数\n\n```javascript\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n```\n\n- 函数头尾禁止了Dep的依赖收集\n- `handlers`是一个数组，所以生命周期函数可以是多个\n- **invokeWithErrorHandling函数真正执行生命周期函数**\n\n#### initInjections\n\n```javascript\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n```\n\n- 首先找到是谁provide的属性\n\n  ```javascript\n  function resolveInject (inject, vm) {\n    if (inject) {\n      // inject is :any because flow is not smart enough to figure out cached\n      var result = Object.create(null);\n      var keys = hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n  \n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        // #6574 in case the inject object is observed...\n        if (key === '__ob__') { continue }\n        var provideKey = inject[key].from;\n        var source = vm;\n        while (source) {\n          if (source._provided && hasOwn(source._provided, provideKey)) {\n            result[key] = source._provided[provideKey];\n            break\n          }\n          source = source.$parent;\n        }\n        if (!source) {\n          if ('default' in inject[key]) {\n            var provideDefault = inject[key].default;\n            result[key] = typeof provideDefault === 'function'\n              ? provideDefault.call(vm)\n              : provideDefault;\n          } else if (process.env.NODE_ENV !== 'production') {\n            warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n          }\n        }\n      }\n      return result\n    }\n  }\n  ```\n\n  - 找到所有inject的key值，然后遍历父组件找到对应的provide，获取表达式（值）\n\n- **然后对获取的inject值进行响应式处理（defineReactive$$1）**\n\n#### initState\n\n```javascript\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n```\n\n- initState函数中初始化了我们在option中常用的功能\n  - 父组件传值：props\n  - 方法：methods\n  - 数据：data\n  - 计算属性：computed\n  - 侦听器：watch\n\n##### initProps\n\n```javascript\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n```\n\n- 循环遍历props的值\n\n- validateProp函数检测props属性的值并做处理\n\n  ```javascript\n  function validateProp (\n    key,\n    propOptions,\n    propsData,\n    vm\n  ) {\n    var prop = propOptions[key];\n    var absent = !hasOwn(propsData, key);\n    var value = propsData[key];\n    // boolean casting\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\n    if (booleanIndex > -1) {\n      if (absent && !hasOwn(prop, 'default')) {\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n    // check default value\n    if (value === undefined) {\n      value = getPropDefaultValue(vm, prop, key);\n      // since the default value is a fresh copy,\n      // make sure to observe it.\n      var prevShouldObserve = shouldObserve;\n      toggleObserving(true);\n      observe(value);\n      toggleObserving(prevShouldObserve);\n    }\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      // skip validation for weex recycle-list child component props\n      !(false)\n    ) {\n      assertProp(prop, key, value, vm, absent);\n    }\n    return value\n  }\n  ```\n\n  - **根据props的type处理默认值**\n  - **确保props的响应式**\n  - **验证传入的props**\n\n- 最后进行一次响应式处理\n\n##### initMethods\n\n```javascript\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n```\n\n- 做了写简单的验证，之后通过bind函数绑定this，然后挂载到vm（Vue实例）上\n\n##### initData\n\n```javascript\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n```\n\n- 获取data数据，如果是函数，通过getData函数获取里面的值\n- 进行一些简单的验证\n  - 方法重名、props重名、data函数没有返回plainObje\n- proxy代理`_data`属性\n- **响应式处理data**\n\n##### initComputed\n\n```javascript\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      } else if (vm.$options.methods && key in vm.$options.methods) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a method.\"), vm);\n      }\n    }\n  }\n}\n```\n\n- 首先创建了一个computed专用的watcher数组\n- 遍历每一个computed，同时为他们每一个创建一个watcher\n- 最后defineComputed函数则把computed挂载到vm上，内部实际使用的是watcher的方法\n\n##### initWatch\n\n```javascript\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n```\n\n- 遍历用户的watcher创建，内部使用`Vue.$watch`方法\n- `Vue.$watch`方法则是使用watcher（观察者实现）\n\n#### initProvide\n\n```javascript\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n```\n\n- 存在provide就挂载到vm上\n\n#### callHook('created')\n\n- 和之前的生命周期函数相同，此时调用`created`生命周期函数\n\n### $mount\n\n- `_init`函数的最后一步（如果存在el属性）\n\n```javascript\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n```\n\n- 首先使用`query`函数查询`el`指定的DOM节点\n\n- **然后检查`template`并将模板编译为渲染函数（render）**\n\n  - **模板编译函数：compileToFunctions**\n    - **内部会将template处理为ast，然后转换为`$createElement`函数可以处理的VDOM，`$createElement`处理之后就会生成VNode**\n  - **这也是Vue可以支持JSX写法的原因**\n\n- 最后调用mount函数\n\n  ```javascript\n  // public mount method\n  Vue.prototype.$mount = function (\n    el,\n    hydrating\n  ) {\n    el = el && inBrowser ? query(el) : undefined;\n    return mountComponent(this, el, hydrating)\n  };\n  ```\n\n  - 注意这个mount和之前的$mount函数不同\n\n### mountComponent\n\n```javascript\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n```\n\n- 首先会检测option的render函数是否存在（template编译的或者JSX）\n- **接着执行`beforeMounted`生命周期函数**\n- **创建`updateComponent`函数，内部使用`vm._udpate(vm._render)`**\n- 以`updateComponent`函数为`exprOrFn`创建watcher\n- 最后执行本组件的`mounted`生命周期函数\n\n#### Watcher\n\n```javascript\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n```\n\n- Watcher初始化最后会通过`get`函数获取初始值\n\n- **`get`函数则是通过调用Watcher初始化的getter获取值**\n\n  - 那么最后就是调用`mountComponent`函数中声明的`updateComponent`函数\n\n    ```javascript\n    updateComponent = function () {\n        vm._update(vm._render(), hydrating);\n    };\n    ```\n\n#### _render\n\n```javascript\nVue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n        vm.$scopedSlots = normalizeScopedSlots(\n            _parentVnode.data.scopedSlots,\n            vm.$slots,\n            vm.$scopedSlots\n        );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n        // There's no need to maintain a stack because all render fns are called\n        // separately from one another. Nested component's render fns are called\n        // when parent component is patched.\n        currentRenderingInstance = vm;\n        vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n        handleError(e, vm, \"render\");\n        // return error render result,\n        // or previous vnode to prevent render error causing blank component\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n            try {\n                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n            } catch (e) {\n                handleError(e, vm, \"renderError\");\n                vnode = vm._vnode;\n            }\n        } else {\n            vnode = vm._vnode;\n        }\n    } finally {\n        currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n        vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n            warn(\n                'Multiple root nodes returned from render function. Render function ' +\n                'should return a single root node.',\n                vm\n            );\n        }\n        vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n};\n```\n\n- **`_render`函数主要通过传入`$createElement`函数生成VNode，并返回**\n\n#### _update\n\n```javascript\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n```\n\n- **`_update`函数主要通过patch函数将VNode转化为实际DOM**\n\n#### patch\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n        // 无新VNode，存在旧VNode，删除旧VNode即可\n        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n        return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n        // 不存在旧节点，直接根据新VNode创建新节点即可\n        // empty mount (likely as component), create new root element\n        isInitialPatch = true;\n        createElm(vnode, insertedVnodeQueue);\n    } else {\n        var isRealElement = isDef(oldVnode.nodeType);\n        if (!isRealElement && sameVnode(oldVnode, vnode)) {\n            // patch existing root node\n            patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n        } else {\n            if (isRealElement) {\n                // mounting to a real element\n                // check if this is server-rendered content and if we can perform\n                // a successful hydration.\n                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                    oldVnode.removeAttribute(SSR_ATTR);\n                    hydrating = true;\n                }\n                if (isTrue(hydrating)) {\n                    if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                        invokeInsertHook(vnode, insertedVnodeQueue, true);\n                        return oldVnode\n                    } else if (process.env.NODE_ENV !== 'production') {\n                        warn(\n                            'The client-side rendered virtual DOM tree is not matching ' +\n                            'server-rendered content. This is likely caused by incorrect ' +\n                            'HTML markup, for example nesting block-level elements inside ' +\n                            '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                            'full client-side render.'\n                        );\n                    }\n                }\n                // either not server-rendered, or hydration failed.\n                // create an empty node and replace it\n                oldVnode = emptyNodeAt(oldVnode);\n            }\n\n            // replacing existing element\n            var oldElm = oldVnode.elm;\n            var parentElm = nodeOps.parentNode(oldElm);\n\n            // create new node\n            createElm(\n                vnode,\n                insertedVnodeQueue,\n                // extremely rare edge case: do not insert if old element is in a\n                // leaving transition. Only happens when combining transition +\n                // keep-alive + HOCs. (#4590)\n                oldElm._leaveCb ? null : parentElm,\n                nodeOps.nextSibling(oldElm)\n            );\n\n            // update parent placeholder node element, recursively\n            if (isDef(vnode.parent)) {\n                var ancestor = vnode.parent;\n                var patchable = isPatchable(vnode);\n                while (ancestor) {\n                    for (var i = 0; i < cbs.destroy.length; ++i) {\n                        cbs.destroy[i](ancestor);\n                    }\n                    ancestor.elm = vnode.elm;\n                    if (patchable) {\n                        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                            cbs.create[i$1](emptyNode, ancestor);\n                        }\n                        // #6513\n                        // invoke insert hooks that may have been merged by create hooks.\n                        // e.g. for directives that uses the \"inserted\" hook.\n                        var insert = ancestor.data.hook.insert;\n                        if (insert.merged) {\n                            // start at index 1 to avoid re-invoking component mounted hook\n                            for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                                insert.fns[i$2]();\n                            }\n                        }\n                    } else {\n                        registerRef(ancestor);\n                    }\n                    ancestor = ancestor.parent;\n                }\n            }\n\n            // destroy old node\n            if (isDef(parentElm)) {\n                removeVnodes([oldVnode], 0, 0);\n            } else if (isDef(oldVnode.tag)) {\n                invokeDestroyHook(oldVnode);\n            }\n        }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n}\n```\n\n- **`patch`函数是真正更新DOM的重要函数，根据情况不同，更新方式也不同**\n  - **`patchVnode`函数用于更新已存在的DOM，著名的DIFF算法就在其中**\n\n- **`createElm`函数根据VNode创建真实DOM节点，随后插入真实DOM树**\n  - **前面进行一些判断简化操作，最后去除oldDOM节点**\n\n#### createElm\n\n```javascript\nfunction createElm (\nvnode,\n insertedVnodeQueue,\n parentElm,\n refElm,\n nested,\n ownerArray,\n index\n) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n        // This vnode was used in a previous render!\n        // now it's used as a new node, overwriting its elm would cause\n        // potential patch errors down the road when it's used as an insertion\n        // reference node. Instead, we clone the node on-demand before creating\n        // associated DOM element for it.\n        vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n        return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (data && data.pre) {\n                creatingElmInVPre++;\n            }\n            if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n                warn(\n                    'Unknown custom element: <' + tag + '> - did you ' +\n                    'register the component correctly? For recursive components, ' +\n                    'make sure to provide the \"name\" option.',\n                    vnode.context\n                );\n            }\n        }\n\n        vnode.elm = vnode.ns\n            ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n        setScope(vnode);\n\n        /* istanbul ignore if */\n        {\n            createChildren(vnode, children, insertedVnodeQueue);\n            if (isDef(data)) {\n                invokeCreateHooks(vnode, insertedVnodeQueue);\n            }\n            insert(parentElm, vnode.elm, refElm);\n        }\n\n        if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n            creatingElmInVPre--;\n        }\n    } else if (isTrue(vnode.isComment)) {\n        vnode.elm = nodeOps.createComment(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n    } else {\n        vnode.elm = nodeOps.createTextNode(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n    }\n}\n```\n\n- **如果是组件会去使用`createComponent`函数创建组件**\n\n- **如果是已知的HTML标签，会直接使用`nodeOps.createElement`函数创建**\n\n  - **`nodeOps.createElement`函数内部使用原生DOM操作**\n\n    ```javascript\n    function createElement$1 (tagName, vnode) {\n      var elm = document.createElement(tagName);\n      if (tagName !== 'select') {\n        return elm\n      }\n      // false or null will remove the attribute but undefined will not\n      if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n        elm.setAttribute('multiple', 'multiple');\n      }\n      return elm\n    }\n    ```\n\n- **如果存在子节点，则会调用`createChildren`函数创建子节点**\n\n  ```javascript\n  function createChildren (vnode, children, insertedVnodeQueue) {\n      if (Array.isArray(children)) {\n          if (process.env.NODE_ENV !== 'production') {\n              checkDuplicateKeys(children);\n          }\n          for (var i = 0; i < children.length; ++i) {\n              createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n          }\n      } else if (isPrimitive(vnode.text)) {\n          nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n      }\n  }\n  ```\n\n  - **递归调用`createElm`函数创建子节点的真实DOM**\n\n- **如果是文本节点或注释节点，则分别使用对应的原生DOM操作去创建**\n\n- **创建完成之后调用`insert`函数插入父节点**\n\n  ```javascript\n  function insert (parent, elm, ref$$1) {\n      if (isDef(parent)) {\n          if (isDef(ref$$1)) {\n              if (nodeOps.parentNode(ref$$1) === parent) {\n                  nodeOps.insertBefore(parent, elm, ref$$1);\n              }\n          } else {\n              nodeOps.appendChild(parent, elm);\n          }\n      }\n  }\n  ```\n\n  - **注意此时父节点可能没有挂载到视图上（例如：根Vue），所以没有在视图上展示**\n\n#### createComponent\n\n```javascript\nfunction createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n        if (isDef(i = i.hook) && isDef(i = i.init)) {\n            i(vnode, false /* hydrating */);\n        }\n        // after calling the init hook, if the vnode is a child component\n        // it should've created a child instance and mounted it. the child\n        // component also has set the placeholder vnode's elm.\n        // in that case we can just return the element and be done.\n        if (isDef(vnode.componentInstance)) {\n            initComponent(vnode, insertedVnodeQueue);\n            insert(parentElm, vnode.elm, refElm);\n            if (isTrue(isReactivated)) {\n                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n            }\n            return true\n        }\n    }\n}\n```\n\n- 组件的VNode的data存有hook函数，是由`render`函数注入的？componentOptions属性存有组件的`props、tag、listeners、Ctor`（Ctor是VueComponent函数，tag是我们定义的组件名）\n\n- `init`hook函数如下：\n\n  ```javascript\n  function init (vnode, hydrating) {\n      if (\n          vnode.componentInstance &&\n          !vnode.componentInstance._isDestroyed &&\n          vnode.data.keepAlive\n      ) {\n          // kept-alive components, treat as a patch\n          var mountedNode = vnode; // work around flow\n          componentVNodeHooks.prepatch(mountedNode, mountedNode);\n      } else {\n          var child = vnode.componentInstance = createComponentInstanceForVnode(\n              vnode,\n              activeInstance\n          );\n          child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n      }\n  },\n  ```\n\n  - **`createComponentInstanceForVnode`函数会调用VueComponent的构造函数，最后调用Vue.__init函数**\n  - **由于没有`el`属性，子组件`init`之后就会返回`VueComponent`对象（不会自动调用`init`的$mount函数进行挂载）**\n    - 随后`init`函数进行手动挂载\n\n#### invokeInsertHook\n\n```javascript\nfunction invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n        vnode.parent.data.pendingInsert = queue;\n    } else {\n        for (var i = 0; i < queue.length; ++i) {\n            queue[i].data.hook.insert(queue[i]);\n        }\n    }\n}\n```\n\n- **子组件的`insert`hook都会保留到父组件`patch`函数结尾执行**\n  - **`mounted`声明周期函数在此处执行**\n  - **`v-model`指令在此处会在DOM节点上绑定相关事件，实现双向绑定**\n\n\n","source":"_posts/vue2SourceDebug.md","raw":"---\ntitle: vue2SourceDebug\ndate: 2021-11-15 09:29:39\ntags:\n- Vue\n- source\ncategories:\n- Vue\ndescription: Vue2源码的一次debug\ncover: /img/cover_6.webp\ntop_image: https://pic2.zhimg.com/v2-db7221c0d7ca752b2f88d7ca94939976_1440w.jpg?source=172ae18b\n\n---\n## 前言\n\n之前了解Vue源码都是通过网上一些文章获取，从未真正debug过Vue源码，所以就有了这篇文章\n\n**写完之后发现就是源码的堆积，理解还是不够啊**\n\n- Vue版本：2.6.14\n- 简单手动配置webpack后进行debug\n- 入口文件代码如下\n\n```javascript\n/* index.js */\nimport Vue from \"vue\";\nimport Header from \"./components/Header/index.js\";\n\ndebugger; //此处进行debug调试\n\nexport default new Vue({\n  el: \"#app\",\n  data() { // 测试data\n    return {\n      text: \"123\",\n      ifFlag: true,\n      inputValue: \"input something\",\n    };\n  },\n  methods: { // 测试methods\n    hello() {\n      console.log(\"==app hello\");\n    },\n  },\n  computed: { // 测试computed\n    reversedText() {\n      return this.text.split(\"\").reverse().join(\"\");\n    },\n  },\n  // 测试lifeCycle\n  beforeCreate() {\n    console.log(\"==app before create\");\n  },\n  created() {\n    console.log(\"==app created\");\n  },\n  beforeMount() {\n    console.log(\"==app before mount\");\n  },\n  mounted() {\n    console.log(\"==app mounted\");\n  },\n  beforeUpdate() {\n    console.log(\"==app before update\");\n  },\n  updated() {\n    console.log(\"==app updated\");\n  },\n  // 测试component\n  components: {\n    Header,\n  },\n  // 测试template\n  template: `\n    <div id=\"app\" @click=\"hello\">\n      <div>{{reversedText}}</div>\n      <div v-if=\"ifFlag\">ifFlag is true then I will show</div>\n      <input v-model=\"inputValue\" />\n      <p>what you input is:{{inputValue}}</p>\n      <Header :propValue=\"'from app'\" />\n    </div>\n  `,\n});\n```\n\n- Header组件\n\n```javascript\n/* Header.js */\nimport Vue from \"vue\";\n\nexport default Vue.component(\"Header\", {\n  template: `\n  <div @click=\"showMsg\" class=\"header\">\n    text:{{text}}\n    propValue:{{propValue}}\n  </div>\n  `,\n  data() {\n    return {\n      text: \"i am header\",\n    };\n  },\n  props: [\"propValue\"], // props测试\n  methods: {\n    showMsg() {\n      console.log(\"==from header\");\n    },\n  },\n  created() {\n    console.log(\"==Header components created\");\n  },\n  mounted() {\n    console.log(\"==Header components mounted\");\n  },\n});\n```\n\n## Vue2源码的一次debug\n\n**debug过程中，相关源码会进行简化，省略无关代码（例如所有环境分支均已删除，保留开发环境）**\n\n单步调试`export default new Vue({...})`，就会进入Vue的构造函数内部\n\n```javascript\nfunction Vue (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n```\n\n- 可以看到Vue的构造函数很简单，接受传入的options，直接调用`_init`方法初始化\n\n### __init\n\n_init方法在源码中已被mixin（混入）Vue构造方法\n\n```javascript\nVue.prototype._init = function (options) {\n    var vm = this;\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n        // optimize internal component instantiation\n        // since dynamic options merging is pretty slow, and none of the\n        // internal component options needs special treatment.\n        initInternalComponent(vm, options);\n    } else {\n        vm.$options = mergeOptions(\n            resolveConstructorOptions(vm.constructor),\n            options || {},\n            vm\n        );\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    if (vm.$options.el) {\n        vm.$mount(vm.$options.el);\n    }\n};\n```\n\n- 初始化变量 vm = 当前即将创建的Vue对象\n- 标记当前即将创建的对象是Vue`_isVue = true`\n- **可以关注下两个声明周期函数的执行时间**\n- **最后把Vue挂载到DOM上**\n- **下面是每个步骤函数的简单解析**\n\n#### initInternalComponent\n\n- Vnode中存在自定义组件时，在创建真实DOM元素的时候才会调用这个函数\n\n```javascript\nfunction initInternalComponent (vm, options) {\n    var opts = vm.$options = Object.create(vm.constructor.options);\n    // doing this because it's faster than dynamic enumeration.\n    var parentVnode = options._parentVnode;\n    opts.parent = options.parent;\n    opts._parentVnode = parentVnode;\n\n    var vnodeComponentOptions = parentVnode.componentOptions;\n    opts.propsData = vnodeComponentOptions.propsData;\n    opts._parentListeners = vnodeComponentOptions.listeners;\n    opts._renderChildren = vnodeComponentOptions.children;\n    opts._componentTag = vnodeComponentOptions.tag;\n\n    if (options.render) {\n        opts.render = options.render;\n        opts.staticRenderFns = options.staticRenderFns;\n    }\n}\n```\n\n- 注意：`options.__parentVnode`指的是组件自身的VNode，`options.parentVnode`指的是父组件的Vue实例对象\n\n#### mergeOptoins\n\n- 合并option（选项）\n\n- resolveConstructorOptions函数获取了`Vue.constructor`上的属性\n\n```javascript\n  function mergeOptions (\n    parent, // Vue.constructor上的属性\n    child, // 我们传入的option\n    vm // 当前Vue对象\n  ) {\n    if (process.env.NODE_ENV !== 'production') {\n      checkComponents(child);\n    }\n  \n    normalizeProps(child, vm);\n    normalizeInject(child, vm);\n    normalizeDirectives(child);\n  \n    // Apply extends and mixins on the child options,\n    // but only if it is a raw options object that isn't\n    // the result of another mergeOptions call.\n    // Only merged options has the _base property.\n    if (!child._base) {\n      if (child.extends) {\n        parent = mergeOptions(parent, child.extends, vm);\n      }\n      if (child.mixins) {\n        for (var i = 0, l = child.mixins.length; i < l; i++) {\n          parent = mergeOptions(parent, child.mixins[i], vm);\n        }\n      }\n    }\n  \n    var options = {};\n    var key;\n    for (key in parent) {\n      mergeField(key);\n    }\n    for (key in child) {\n      if (!hasOwn(parent, key)) {\n        mergeField(key);\n      }\n    }\n    function mergeField (key) {\n      var strat = strats[key] || defaultStrat;\n      options[key] = strat(parent[key], child[key], vm, key);\n    }\n    return options\n  }\n  ```\n\n  - `checkComponents`函数检测**自定义组件名是否规范**（例如：不能自定义一个div组件，html已有div标签）\n  - `normalizeProps`函数检测**`props`是否规范**（例如：是否是array或者plainObject）\n    - 同时也进行了格式化，连字符格式转为驼峰格式\n  - normalizeInject、normalizeDirectives函数同上\n  - 后续针对extends和mixins方法创建的子构造器合并了选项\n  - 最后合并父子的option选项，合并时的优先级如下：（**优先级高的覆盖优先级低的，不会∪在一起**）\n    - 自定义option\n    - 子option\n    - 父option\n\n#### initProxy\n\n- 仅用于开发环境，利用es6的proxy代理Vue属性的访问，当访问不存在的属性时，log提醒\n\n#### initLifecycle\n\n```javascript\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm; // 当前组件树的根 Vue 实例\n\n  vm.$children = []; // 当前实例的直接子组件\n  vm.$refs = {};\n\n  vm._watcher = null;\n  // lifeCycle的flag\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n```\n\n- 首先找到第一个非抽象父组件（keep-alive就是抽象组件）\n- 初始化vm的一些属性\n\n#### initEvents\n\n```javascript\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n```\n\n- 初始化Vue对象的events（事件）功能，包括但不限于：\n  - **处理父组件传递的事件**\n  - **`this.$on`方法注册事件**\n  - **`this.$emit`方法触发事件**\n\n#### initRender\n\n```javascript\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n```\n\n- 初始化vm的一些属性\n\n  - _vnode指的是Vue对象挂载到DOM的VNode\n  - $vnode指的是Vue组件在parent中template中的占位node\n\n- resolveSlots函数解析组件传入的slot，并赋值给$slot\n\n  函数实现如下：\n\n  ```javascript\n  function resolveSlots (\n    children,\n    context\n  ) {\n    if (!children || !children.length) {\n      return {}\n    }\n    var slots = {};\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var data = child.data;\n      // remove slot attribute if the node is resolved as a Vue slot node\n      if (data && data.attrs && data.attrs.slot) {\n        delete data.attrs.slot;\n      }\n      // named slots should only be respected if the vnode was rendered in the\n      // same context.\n      if ((child.context === context || child.fnContext === context) &&\n        data && data.slot != null\n      ) {\n        var name = data.slot;\n        var slot = (slots[name] || (slots[name] = []));\n        if (child.tag === 'template') { // 这里对template进行了特殊处理\n          slot.push.apply(slot, child.children || []);\n        } else {\n          slot.push(child);\n        }\n      } else {\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n    // ignore slots that contains only whitespace\n    for (var name$1 in slots) {\n      if (slots[name$1].every(isWhitespace)) {\n        delete slots[name$1];\n      }\n    }\n    return slots\n  }\n  ```\n\n- 同时创建了$createElement函数（_c函数同理），用于VDOM生成实际DOM\n\n- 最后对`$attrs`和`$listeners`进行了响应式处理\n\n#### callHook('beforeCreated')\n\n顾名思义，此时调用了`beforeCreated`生命周期函数\n\n```javascript\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n```\n\n- 函数头尾禁止了Dep的依赖收集\n- `handlers`是一个数组，所以生命周期函数可以是多个\n- **invokeWithErrorHandling函数真正执行生命周期函数**\n\n#### initInjections\n\n```javascript\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n```\n\n- 首先找到是谁provide的属性\n\n  ```javascript\n  function resolveInject (inject, vm) {\n    if (inject) {\n      // inject is :any because flow is not smart enough to figure out cached\n      var result = Object.create(null);\n      var keys = hasSymbol\n        ? Reflect.ownKeys(inject)\n        : Object.keys(inject);\n  \n      for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        // #6574 in case the inject object is observed...\n        if (key === '__ob__') { continue }\n        var provideKey = inject[key].from;\n        var source = vm;\n        while (source) {\n          if (source._provided && hasOwn(source._provided, provideKey)) {\n            result[key] = source._provided[provideKey];\n            break\n          }\n          source = source.$parent;\n        }\n        if (!source) {\n          if ('default' in inject[key]) {\n            var provideDefault = inject[key].default;\n            result[key] = typeof provideDefault === 'function'\n              ? provideDefault.call(vm)\n              : provideDefault;\n          } else if (process.env.NODE_ENV !== 'production') {\n            warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n          }\n        }\n      }\n      return result\n    }\n  }\n  ```\n\n  - 找到所有inject的key值，然后遍历父组件找到对应的provide，获取表达式（值）\n\n- **然后对获取的inject值进行响应式处理（defineReactive$$1）**\n\n#### initState\n\n```javascript\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n```\n\n- initState函数中初始化了我们在option中常用的功能\n  - 父组件传值：props\n  - 方法：methods\n  - 数据：data\n  - 计算属性：computed\n  - 侦听器：watch\n\n##### initProps\n\n```javascript\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n```\n\n- 循环遍历props的值\n\n- validateProp函数检测props属性的值并做处理\n\n  ```javascript\n  function validateProp (\n    key,\n    propOptions,\n    propsData,\n    vm\n  ) {\n    var prop = propOptions[key];\n    var absent = !hasOwn(propsData, key);\n    var value = propsData[key];\n    // boolean casting\n    var booleanIndex = getTypeIndex(Boolean, prop.type);\n    if (booleanIndex > -1) {\n      if (absent && !hasOwn(prop, 'default')) {\n        value = false;\n      } else if (value === '' || value === hyphenate(key)) {\n        // only cast empty string / same name to boolean if\n        // boolean has higher priority\n        var stringIndex = getTypeIndex(String, prop.type);\n        if (stringIndex < 0 || booleanIndex < stringIndex) {\n          value = true;\n        }\n      }\n    }\n    // check default value\n    if (value === undefined) {\n      value = getPropDefaultValue(vm, prop, key);\n      // since the default value is a fresh copy,\n      // make sure to observe it.\n      var prevShouldObserve = shouldObserve;\n      toggleObserving(true);\n      observe(value);\n      toggleObserving(prevShouldObserve);\n    }\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      // skip validation for weex recycle-list child component props\n      !(false)\n    ) {\n      assertProp(prop, key, value, vm, absent);\n    }\n    return value\n  }\n  ```\n\n  - **根据props的type处理默认值**\n  - **确保props的响应式**\n  - **验证传入的props**\n\n- 最后进行一次响应式处理\n\n##### initMethods\n\n```javascript\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n```\n\n- 做了写简单的验证，之后通过bind函数绑定this，然后挂载到vm（Vue实例）上\n\n##### initData\n\n```javascript\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n```\n\n- 获取data数据，如果是函数，通过getData函数获取里面的值\n- 进行一些简单的验证\n  - 方法重名、props重名、data函数没有返回plainObje\n- proxy代理`_data`属性\n- **响应式处理data**\n\n##### initComputed\n\n```javascript\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      } else if (vm.$options.methods && key in vm.$options.methods) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a method.\"), vm);\n      }\n    }\n  }\n}\n```\n\n- 首先创建了一个computed专用的watcher数组\n- 遍历每一个computed，同时为他们每一个创建一个watcher\n- 最后defineComputed函数则把computed挂载到vm上，内部实际使用的是watcher的方法\n\n##### initWatch\n\n```javascript\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n```\n\n- 遍历用户的watcher创建，内部使用`Vue.$watch`方法\n- `Vue.$watch`方法则是使用watcher（观察者实现）\n\n#### initProvide\n\n```javascript\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n```\n\n- 存在provide就挂载到vm上\n\n#### callHook('created')\n\n- 和之前的生命周期函数相同，此时调用`created`生命周期函数\n\n### $mount\n\n- `_init`函数的最后一步（如果存在el属性）\n\n```javascript\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: process.env.NODE_ENV !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure((\"vue \" + (this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n```\n\n- 首先使用`query`函数查询`el`指定的DOM节点\n\n- **然后检查`template`并将模板编译为渲染函数（render）**\n\n  - **模板编译函数：compileToFunctions**\n    - **内部会将template处理为ast，然后转换为`$createElement`函数可以处理的VDOM，`$createElement`处理之后就会生成VNode**\n  - **这也是Vue可以支持JSX写法的原因**\n\n- 最后调用mount函数\n\n  ```javascript\n  // public mount method\n  Vue.prototype.$mount = function (\n    el,\n    hydrating\n  ) {\n    el = el && inBrowser ? query(el) : undefined;\n    return mountComponent(this, el, hydrating)\n  };\n  ```\n\n  - 注意这个mount和之前的$mount函数不同\n\n### mountComponent\n\n```javascript\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((\"vue \" + name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((\"vue \" + name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n```\n\n- 首先会检测option的render函数是否存在（template编译的或者JSX）\n- **接着执行`beforeMounted`生命周期函数**\n- **创建`updateComponent`函数，内部使用`vm._udpate(vm._render)`**\n- 以`updateComponent`函数为`exprOrFn`创建watcher\n- 最后执行本组件的`mounted`生命周期函数\n\n#### Watcher\n\n```javascript\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n```\n\n- Watcher初始化最后会通过`get`函数获取初始值\n\n- **`get`函数则是通过调用Watcher初始化的getter获取值**\n\n  - 那么最后就是调用`mountComponent`函数中声明的`updateComponent`函数\n\n    ```javascript\n    updateComponent = function () {\n        vm._update(vm._render(), hydrating);\n    };\n    ```\n\n#### _render\n\n```javascript\nVue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n        vm.$scopedSlots = normalizeScopedSlots(\n            _parentVnode.data.scopedSlots,\n            vm.$slots,\n            vm.$scopedSlots\n        );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n        // There's no need to maintain a stack because all render fns are called\n        // separately from one another. Nested component's render fns are called\n        // when parent component is patched.\n        currentRenderingInstance = vm;\n        vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n        handleError(e, vm, \"render\");\n        // return error render result,\n        // or previous vnode to prevent render error causing blank component\n        /* istanbul ignore else */\n        if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {\n            try {\n                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n            } catch (e) {\n                handleError(e, vm, \"renderError\");\n                vnode = vm._vnode;\n            }\n        } else {\n            vnode = vm._vnode;\n        }\n    } finally {\n        currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n        vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n        if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n            warn(\n                'Multiple root nodes returned from render function. Render function ' +\n                'should return a single root node.',\n                vm\n            );\n        }\n        vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n};\n```\n\n- **`_render`函数主要通过传入`$createElement`函数生成VNode，并返回**\n\n#### _update\n\n```javascript\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n```\n\n- **`_update`函数主要通过patch函数将VNode转化为实际DOM**\n\n#### patch\n\n```javascript\nfunction patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n        // 无新VNode，存在旧VNode，删除旧VNode即可\n        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n        return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n        // 不存在旧节点，直接根据新VNode创建新节点即可\n        // empty mount (likely as component), create new root element\n        isInitialPatch = true;\n        createElm(vnode, insertedVnodeQueue);\n    } else {\n        var isRealElement = isDef(oldVnode.nodeType);\n        if (!isRealElement && sameVnode(oldVnode, vnode)) {\n            // patch existing root node\n            patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n        } else {\n            if (isRealElement) {\n                // mounting to a real element\n                // check if this is server-rendered content and if we can perform\n                // a successful hydration.\n                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n                    oldVnode.removeAttribute(SSR_ATTR);\n                    hydrating = true;\n                }\n                if (isTrue(hydrating)) {\n                    if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n                        invokeInsertHook(vnode, insertedVnodeQueue, true);\n                        return oldVnode\n                    } else if (process.env.NODE_ENV !== 'production') {\n                        warn(\n                            'The client-side rendered virtual DOM tree is not matching ' +\n                            'server-rendered content. This is likely caused by incorrect ' +\n                            'HTML markup, for example nesting block-level elements inside ' +\n                            '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                            'full client-side render.'\n                        );\n                    }\n                }\n                // either not server-rendered, or hydration failed.\n                // create an empty node and replace it\n                oldVnode = emptyNodeAt(oldVnode);\n            }\n\n            // replacing existing element\n            var oldElm = oldVnode.elm;\n            var parentElm = nodeOps.parentNode(oldElm);\n\n            // create new node\n            createElm(\n                vnode,\n                insertedVnodeQueue,\n                // extremely rare edge case: do not insert if old element is in a\n                // leaving transition. Only happens when combining transition +\n                // keep-alive + HOCs. (#4590)\n                oldElm._leaveCb ? null : parentElm,\n                nodeOps.nextSibling(oldElm)\n            );\n\n            // update parent placeholder node element, recursively\n            if (isDef(vnode.parent)) {\n                var ancestor = vnode.parent;\n                var patchable = isPatchable(vnode);\n                while (ancestor) {\n                    for (var i = 0; i < cbs.destroy.length; ++i) {\n                        cbs.destroy[i](ancestor);\n                    }\n                    ancestor.elm = vnode.elm;\n                    if (patchable) {\n                        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                            cbs.create[i$1](emptyNode, ancestor);\n                        }\n                        // #6513\n                        // invoke insert hooks that may have been merged by create hooks.\n                        // e.g. for directives that uses the \"inserted\" hook.\n                        var insert = ancestor.data.hook.insert;\n                        if (insert.merged) {\n                            // start at index 1 to avoid re-invoking component mounted hook\n                            for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                                insert.fns[i$2]();\n                            }\n                        }\n                    } else {\n                        registerRef(ancestor);\n                    }\n                    ancestor = ancestor.parent;\n                }\n            }\n\n            // destroy old node\n            if (isDef(parentElm)) {\n                removeVnodes([oldVnode], 0, 0);\n            } else if (isDef(oldVnode.tag)) {\n                invokeDestroyHook(oldVnode);\n            }\n        }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n}\n```\n\n- **`patch`函数是真正更新DOM的重要函数，根据情况不同，更新方式也不同**\n  - **`patchVnode`函数用于更新已存在的DOM，著名的DIFF算法就在其中**\n\n- **`createElm`函数根据VNode创建真实DOM节点，随后插入真实DOM树**\n  - **前面进行一些判断简化操作，最后去除oldDOM节点**\n\n#### createElm\n\n```javascript\nfunction createElm (\nvnode,\n insertedVnodeQueue,\n parentElm,\n refElm,\n nested,\n ownerArray,\n index\n) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n        // This vnode was used in a previous render!\n        // now it's used as a new node, overwriting its elm would cause\n        // potential patch errors down the road when it's used as an insertion\n        // reference node. Instead, we clone the node on-demand before creating\n        // associated DOM element for it.\n        vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n        return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (data && data.pre) {\n                creatingElmInVPre++;\n            }\n            if (isUnknownElement$$1(vnode, creatingElmInVPre)) {\n                warn(\n                    'Unknown custom element: <' + tag + '> - did you ' +\n                    'register the component correctly? For recursive components, ' +\n                    'make sure to provide the \"name\" option.',\n                    vnode.context\n                );\n            }\n        }\n\n        vnode.elm = vnode.ns\n            ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n        setScope(vnode);\n\n        /* istanbul ignore if */\n        {\n            createChildren(vnode, children, insertedVnodeQueue);\n            if (isDef(data)) {\n                invokeCreateHooks(vnode, insertedVnodeQueue);\n            }\n            insert(parentElm, vnode.elm, refElm);\n        }\n\n        if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n            creatingElmInVPre--;\n        }\n    } else if (isTrue(vnode.isComment)) {\n        vnode.elm = nodeOps.createComment(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n    } else {\n        vnode.elm = nodeOps.createTextNode(vnode.text);\n        insert(parentElm, vnode.elm, refElm);\n    }\n}\n```\n\n- **如果是组件会去使用`createComponent`函数创建组件**\n\n- **如果是已知的HTML标签，会直接使用`nodeOps.createElement`函数创建**\n\n  - **`nodeOps.createElement`函数内部使用原生DOM操作**\n\n    ```javascript\n    function createElement$1 (tagName, vnode) {\n      var elm = document.createElement(tagName);\n      if (tagName !== 'select') {\n        return elm\n      }\n      // false or null will remove the attribute but undefined will not\n      if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n        elm.setAttribute('multiple', 'multiple');\n      }\n      return elm\n    }\n    ```\n\n- **如果存在子节点，则会调用`createChildren`函数创建子节点**\n\n  ```javascript\n  function createChildren (vnode, children, insertedVnodeQueue) {\n      if (Array.isArray(children)) {\n          if (process.env.NODE_ENV !== 'production') {\n              checkDuplicateKeys(children);\n          }\n          for (var i = 0; i < children.length; ++i) {\n              createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n          }\n      } else if (isPrimitive(vnode.text)) {\n          nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n      }\n  }\n  ```\n\n  - **递归调用`createElm`函数创建子节点的真实DOM**\n\n- **如果是文本节点或注释节点，则分别使用对应的原生DOM操作去创建**\n\n- **创建完成之后调用`insert`函数插入父节点**\n\n  ```javascript\n  function insert (parent, elm, ref$$1) {\n      if (isDef(parent)) {\n          if (isDef(ref$$1)) {\n              if (nodeOps.parentNode(ref$$1) === parent) {\n                  nodeOps.insertBefore(parent, elm, ref$$1);\n              }\n          } else {\n              nodeOps.appendChild(parent, elm);\n          }\n      }\n  }\n  ```\n\n  - **注意此时父节点可能没有挂载到视图上（例如：根Vue），所以没有在视图上展示**\n\n#### createComponent\n\n```javascript\nfunction createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n        if (isDef(i = i.hook) && isDef(i = i.init)) {\n            i(vnode, false /* hydrating */);\n        }\n        // after calling the init hook, if the vnode is a child component\n        // it should've created a child instance and mounted it. the child\n        // component also has set the placeholder vnode's elm.\n        // in that case we can just return the element and be done.\n        if (isDef(vnode.componentInstance)) {\n            initComponent(vnode, insertedVnodeQueue);\n            insert(parentElm, vnode.elm, refElm);\n            if (isTrue(isReactivated)) {\n                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n            }\n            return true\n        }\n    }\n}\n```\n\n- 组件的VNode的data存有hook函数，是由`render`函数注入的？componentOptions属性存有组件的`props、tag、listeners、Ctor`（Ctor是VueComponent函数，tag是我们定义的组件名）\n\n- `init`hook函数如下：\n\n  ```javascript\n  function init (vnode, hydrating) {\n      if (\n          vnode.componentInstance &&\n          !vnode.componentInstance._isDestroyed &&\n          vnode.data.keepAlive\n      ) {\n          // kept-alive components, treat as a patch\n          var mountedNode = vnode; // work around flow\n          componentVNodeHooks.prepatch(mountedNode, mountedNode);\n      } else {\n          var child = vnode.componentInstance = createComponentInstanceForVnode(\n              vnode,\n              activeInstance\n          );\n          child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n      }\n  },\n  ```\n\n  - **`createComponentInstanceForVnode`函数会调用VueComponent的构造函数，最后调用Vue.__init函数**\n  - **由于没有`el`属性，子组件`init`之后就会返回`VueComponent`对象（不会自动调用`init`的$mount函数进行挂载）**\n    - 随后`init`函数进行手动挂载\n\n#### invokeInsertHook\n\n```javascript\nfunction invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n        vnode.parent.data.pendingInsert = queue;\n    } else {\n        for (var i = 0; i < queue.length; ++i) {\n            queue[i].data.hook.insert(queue[i]);\n        }\n    }\n}\n```\n\n- **子组件的`insert`hook都会保留到父组件`patch`函数结尾执行**\n  - **`mounted`声明周期函数在此处执行**\n  - **`v-model`指令在此处会在DOM节点上绑定相关事件，实现双向绑定**\n\n\n","slug":"vue2SourceDebug","published":1,"updated":"2022-04-12T07:38:29.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3out00061wuqetrp1ubp","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前了解Vue源码都是通过网上一些文章获取，从未真正debug过Vue源码，所以就有了这篇文章</p>\n<p><strong>写完之后发现就是源码的堆积，理解还是不够啊</strong></p>\n<ul>\n<li>Vue版本：2.6.14</li>\n<li>简单手动配置webpack后进行debug</li>\n<li>入口文件代码如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Header</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Header/index.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">debugger</span>; <span class=\"comment\">//此处进行debug调试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 测试data</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;123&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">ifFlag</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: <span class=\"string\">&quot;input something&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123; <span class=\"comment\">// 测试methods</span></span><br><span class=\"line\">    <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app hello&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123; <span class=\"comment\">// 测试computed</span></span><br><span class=\"line\">    <span class=\"title function_\">reversedText</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试lifeCycle</span></span><br><span class=\"line\">  <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before create&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">beforeMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before mount&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app mounted&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">beforeUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before update&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">updated</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app updated&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试component</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Header</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试template</span></span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;app&quot; @click=&quot;hello&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;&#123;&#123;reversedText&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-if=&quot;ifFlag&quot;&gt;ifFlag is true then I will show&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input v-model=&quot;inputValue&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;what you input is:&#123;&#123;inputValue&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Header :propValue=&quot;&#x27;from app&#x27;&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Header组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&quot;Header&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div @click=&quot;showMsg&quot; class=&quot;header&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    text:&#123;&#123;text&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    propValue:&#123;&#123;propValue&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;i am header&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;propValue&quot;</span>], <span class=\"comment\">// props测试</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">showMsg</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==from header&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==Header components created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==Header components mounted&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue2源码的一次debug\"><a href=\"#Vue2源码的一次debug\" class=\"headerlink\" title=\"Vue2源码的一次debug\"></a>Vue2源码的一次debug</h2><p><strong>debug过程中，相关源码会进行简化，省略无关代码（例如所有环境分支均已删除，保留开发环境）</strong></p>\n<p>单步调试<code>export default new Vue(&#123;...&#125;)</code>，就会进入Vue的构造函数内部</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span> (options) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    !(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Vue</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>(options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到Vue的构造函数很简单，接受传入的options，直接调用<code>_init</code>方法初始化</li>\n</ul>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init\"></a>__init</h3><p>_init方法在源码中已被mixin（混入）Vue构造方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span> (<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a flag to avoid this being observed</span></span><br><span class=\"line\">    vm.<span class=\"property\">_isVue</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// merge options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options &amp;&amp; options.<span class=\"property\">_isComponent</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// optimize internal component instantiation</span></span><br><span class=\"line\">        <span class=\"comment\">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class=\"line\">        <span class=\"comment\">// internal component options needs special treatment.</span></span><br><span class=\"line\">        <span class=\"title function_\">initInternalComponent</span>(vm, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vm.<span class=\"property\">$options</span> = <span class=\"title function_\">mergeOptions</span>(</span><br><span class=\"line\">            <span class=\"title function_\">resolveConstructorOptions</span>(vm.<span class=\"property\">constructor</span>),</span><br><span class=\"line\">            options || &#123;&#125;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// expose real self</span></span><br><span class=\"line\">    vm.<span class=\"property\">_self</span> = vm;</span><br><span class=\"line\">    <span class=\"title function_\">initLifecycle</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initEvents</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initRender</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">initInjections</span>(vm); <span class=\"comment\">// resolve injections before data/props</span></span><br><span class=\"line\">    <span class=\"title function_\">initState</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initProvide</span>(vm); <span class=\"comment\">// resolve provide after data/props</span></span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;created&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>) &#123;</span><br><span class=\"line\">        vm.$mount(vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化变量 vm &#x3D; 当前即将创建的Vue对象</li>\n<li>标记当前即将创建的对象是Vue<code>_isVue = true</code></li>\n<li><strong>可以关注下两个声明周期函数的执行时间</strong></li>\n<li><strong>最后把Vue挂载到DOM上</strong></li>\n<li><strong>下面是每个步骤函数的简单解析</strong></li>\n</ul>\n<h4 id=\"initInternalComponent\"><a href=\"#initInternalComponent\" class=\"headerlink\" title=\"initInternalComponent\"></a>initInternalComponent</h4><ul>\n<li>Vnode中存在自定义组件时，在创建真实DOM元素的时候才会调用这个函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initInternalComponent</span> (vm, options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = vm.<span class=\"property\">$options</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(vm.<span class=\"property\">constructor</span>.<span class=\"property\">options</span>);</span><br><span class=\"line\">    <span class=\"comment\">// doing this because it&#x27;s faster than dynamic enumeration.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parentVnode = options.<span class=\"property\">_parentVnode</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">parent</span> = options.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_parentVnode</span> = parentVnode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vnodeComponentOptions = parentVnode.<span class=\"property\">componentOptions</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">propsData</span> = vnodeComponentOptions.<span class=\"property\">propsData</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_parentListeners</span> = vnodeComponentOptions.<span class=\"property\">listeners</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_renderChildren</span> = vnodeComponentOptions.<span class=\"property\">children</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_componentTag</span> = vnodeComponentOptions.<span class=\"property\">tag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">        opts.<span class=\"property\">render</span> = options.<span class=\"property\">render</span>;</span><br><span class=\"line\">        opts.<span class=\"property\">staticRenderFns</span> = options.<span class=\"property\">staticRenderFns</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：<code>options.__parentVnode</code>指的是组件自身的VNode，<code>options.parentVnode</code>指的是父组件的Vue实例对象</li>\n</ul>\n<h4 id=\"mergeOptoins\"><a href=\"#mergeOptoins\" class=\"headerlink\" title=\"mergeOptoins\"></a>mergeOptoins</h4><ul>\n<li><p>合并option（选项）</p>\n</li>\n<li><p>resolveConstructorOptions函数获取了<code>Vue.constructor</code>上的属性</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeOptions</span> (</span><br><span class=\"line\">  parent, <span class=\"comment\">// Vue.constructor上的属性</span></span><br><span class=\"line\">  child, <span class=\"comment\">// 我们传入的option</span></span><br><span class=\"line\">  vm <span class=\"comment\">// 当前Vue对象</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">checkComponents</span>(child);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">normalizeProps</span>(child, vm);</span><br><span class=\"line\">  <span class=\"title function_\">normalizeInject</span>(child, vm);</span><br><span class=\"line\">  <span class=\"title function_\">normalizeDirectives</span>(child);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Apply extends and mixins on the child options,</span></span><br><span class=\"line\">  <span class=\"comment\">// but only if it is a raw options object that isn&#x27;t</span></span><br><span class=\"line\">  <span class=\"comment\">// the result of another mergeOptions call.</span></span><br><span class=\"line\">  <span class=\"comment\">// Only merged options has the _base property.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child.<span class=\"property\">_base</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">extends</span>) &#123;</span><br><span class=\"line\">      parent = <span class=\"title function_\">mergeOptions</span>(parent, child.<span class=\"property\">extends</span>, vm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">mixins</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = child.<span class=\"property\">mixins</span>.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = <span class=\"title function_\">mergeOptions</span>(parent, child.<span class=\"property\">mixins</span>[i], vm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mergeField</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">hasOwn</span>(parent, key)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">mergeField</span>(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeField</span> (key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strat = strats[key] || defaultStrat;</span><br><span class=\"line\">    options[key] = <span class=\"title function_\">strat</span>(parent[key], child[key], vm, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>checkComponents</code>函数检测<strong>自定义组件名是否规范</strong>（例如：不能自定义一个div组件，html已有div标签）</li>\n<li><code>normalizeProps</code>函数检测**<code>props</code>是否规范**（例如：是否是array或者plainObject）<ul>\n<li>同时也进行了格式化，连字符格式转为驼峰格式</li>\n</ul>\n</li>\n<li>normalizeInject、normalizeDirectives函数同上</li>\n<li>后续针对extends和mixins方法创建的子构造器合并了选项</li>\n<li>最后合并父子的option选项，合并时的优先级如下：（<strong>优先级高的覆盖优先级低的，不会∪在一起</strong>）<ul>\n<li>自定义option</li>\n<li>子option</li>\n<li>父option</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"initProxy\"><a href=\"#initProxy\" class=\"headerlink\" title=\"initProxy\"></a>initProxy</h4><ul>\n<li>仅用于开发环境，利用es6的proxy代理Vue属性的访问，当访问不存在的属性时，log提醒</li>\n</ul>\n<h4 id=\"initLifecycle\"><a href=\"#initLifecycle\" class=\"headerlink\" title=\"initLifecycle\"></a>initLifecycle</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initLifecycle</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// locate first non-abstract parent</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parent = options.<span class=\"property\">parent</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent &amp;&amp; !options.<span class=\"property\">abstract</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (parent.<span class=\"property\">$options</span>.<span class=\"property\">abstract</span> &amp;&amp; parent.<span class=\"property\">$parent</span>) &#123;</span><br><span class=\"line\">      parent = parent.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent.<span class=\"property\">$children</span>.<span class=\"title function_\">push</span>(vm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">$parent</span> = parent;</span><br><span class=\"line\">  vm.<span class=\"property\">$root</span> = parent ? parent.<span class=\"property\">$root</span> : vm; <span class=\"comment\">// 当前组件树的根 Vue 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">$children</span> = []; <span class=\"comment\">// 当前实例的直接子组件</span></span><br><span class=\"line\">  vm.<span class=\"property\">$refs</span> = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">_watcher</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// lifeCycle的flag</span></span><br><span class=\"line\">  vm.<span class=\"property\">_inactive</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_directInactive</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isMounted</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isDestroyed</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isBeingDestroyed</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先找到第一个非抽象父组件（keep-alive就是抽象组件）</li>\n<li>初始化vm的一些属性</li>\n</ul>\n<h4 id=\"initEvents\"><a href=\"#initEvents\" class=\"headerlink\" title=\"initEvents\"></a>initEvents</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initEvents</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_events</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  vm.<span class=\"property\">_hasHookEvent</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// init parent attached events</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> listeners = vm.<span class=\"property\">$options</span>.<span class=\"property\">_parentListeners</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (listeners) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateComponentListeners</span>(vm, listeners);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化Vue对象的events（事件）功能，包括但不限于：<ul>\n<li><strong>处理父组件传递的事件</strong></li>\n<li><strong><code>this.$on</code>方法注册事件</strong></li>\n<li><strong><code>this.$emit</code>方法触发事件</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"initRender\"><a href=\"#initRender\" class=\"headerlink\" title=\"initRender\"></a>initRender</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initRender</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_vnode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// the root of the child tree</span></span><br><span class=\"line\">  vm.<span class=\"property\">_staticTrees</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// v-once cached trees</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentVnode = vm.<span class=\"property\">$vnode</span> = options.<span class=\"property\">_parentVnode</span>; <span class=\"comment\">// the placeholder node in parent tree</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderContext = parentVnode &amp;&amp; parentVnode.<span class=\"property\">context</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">$slots</span> = <span class=\"title function_\">resolveSlots</span>(options.<span class=\"property\">_renderChildren</span>, renderContext);</span><br><span class=\"line\">  vm.<span class=\"property\">$scopedSlots</span> = emptyObject;</span><br><span class=\"line\">  <span class=\"comment\">// bind the createElement fn to this instance</span></span><br><span class=\"line\">  <span class=\"comment\">// so that we get proper render context inside it.</span></span><br><span class=\"line\">  <span class=\"comment\">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class=\"line\">  <span class=\"comment\">// internal version is used by render functions compiled from templates</span></span><br><span class=\"line\">  vm.<span class=\"property\">_c</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">createElement</span>(vm, a, b, c, d, <span class=\"literal\">false</span>); &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// normalization is always applied for the public version, used in</span></span><br><span class=\"line\">  <span class=\"comment\">// user-written render functions.</span></span><br><span class=\"line\">  vm.<span class=\"property\">$createElement</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">createElement</span>(vm, a, b, c, d, <span class=\"literal\">true</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $attrs &amp; $listeners are exposed for easier HOC creation.</span></span><br><span class=\"line\">  <span class=\"comment\">// they need to be reactive so that HOCs using them are always updated</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentData = parentVnode &amp;&amp; parentVnode.<span class=\"property\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$attrs&#x27;</span>, parentData &amp;&amp; parentData.<span class=\"property\">attrs</span> || emptyObject, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; <span class=\"title function_\">warn</span>(<span class=\"string\">&quot;$attrs is readonly.&quot;</span>, vm);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$listeners&#x27;</span>, options.<span class=\"property\">_parentListeners</span> || emptyObject, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; <span class=\"title function_\">warn</span>(<span class=\"string\">&quot;$listeners is readonly.&quot;</span>, vm);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$attrs&#x27;</span>, parentData &amp;&amp; parentData.<span class=\"property\">attrs</span> || emptyObject, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$listeners&#x27;</span>, options.<span class=\"property\">_parentListeners</span> || emptyObject, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>初始化vm的一些属性</p>\n<ul>\n<li>_vnode指的是Vue对象挂载到DOM的VNode</li>\n<li>$vnode指的是Vue组件在parent中template中的占位node</li>\n</ul>\n</li>\n<li><p>resolveSlots函数解析组件传入的slot，并赋值给$slot</p>\n<p>函数实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveSlots</span> (</span><br><span class=\"line\">  children,</span><br><span class=\"line\">  context</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!children || !children.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slots = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = children.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child = children[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = child.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// remove slot attribute if the node is resolved as a Vue slot node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">attrs</span> &amp;&amp; data.<span class=\"property\">attrs</span>.<span class=\"property\">slot</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> data.<span class=\"property\">attrs</span>.<span class=\"property\">slot</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// named slots should only be respected if the vnode was rendered in the</span></span><br><span class=\"line\">    <span class=\"comment\">// same context.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((child.<span class=\"property\">context</span> === context || child.<span class=\"property\">fnContext</span> === context) &amp;&amp;</span><br><span class=\"line\">      data &amp;&amp; data.<span class=\"property\">slot</span> != <span class=\"literal\">null</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> name = data.<span class=\"property\">slot</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> slot = (slots[name] || (slots[name] = []));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (child.<span class=\"property\">tag</span> === <span class=\"string\">&#x27;template&#x27;</span>) &#123; <span class=\"comment\">// 这里对template进行了特殊处理</span></span><br><span class=\"line\">        slot.<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(slot, child.<span class=\"property\">children</span> || []);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        slot.<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      (slots.<span class=\"property\">default</span> || (slots.<span class=\"property\">default</span> = [])).<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ignore slots that contains only whitespace</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name$<span class=\"number\">1</span> <span class=\"keyword\">in</span> slots) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slots[name$<span class=\"number\">1</span>].<span class=\"title function_\">every</span>(isWhitespace)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> slots[name$<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slots</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时创建了$createElement函数（_c函数同理），用于VDOM生成实际DOM</p>\n</li>\n<li><p>最后对<code>$attrs</code>和<code>$listeners</code>进行了响应式处理</p>\n</li>\n</ul>\n<h4 id=\"callHook-‘beforeCreated’\"><a href=\"#callHook-‘beforeCreated’\" class=\"headerlink\" title=\"callHook(‘beforeCreated’)\"></a>callHook(‘beforeCreated’)</h4><p>顾名思义，此时调用了<code>beforeCreated</code>生命周期函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callHook</span> (vm, hook) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// #7573 disable dep collection when invoking lifecycle hooks</span></span><br><span class=\"line\">  <span class=\"title function_\">pushTarget</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> handlers = vm.<span class=\"property\">$options</span>[hook];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> info = hook + <span class=\"string\">&quot; hook&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = handlers.<span class=\"property\">length</span>; i &lt; j; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">invokeWithErrorHandling</span>(handlers[i], vm, <span class=\"literal\">null</span>, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">_hasHookEvent</span>) &#123;</span><br><span class=\"line\">    vm.$emit(<span class=\"string\">&#x27;hook:&#x27;</span> + hook);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">popTarget</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数头尾禁止了Dep的依赖收集</li>\n<li><code>handlers</code>是一个数组，所以生命周期函数可以是多个</li>\n<li><strong>invokeWithErrorHandling函数真正执行生命周期函数</strong></li>\n</ul>\n<h4 id=\"initInjections\"><a href=\"#initInjections\" class=\"headerlink\" title=\"initInjections\"></a>initInjections</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initInjections</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"title function_\">resolveInject</span>(vm.<span class=\"property\">$options</span>.<span class=\"property\">inject</span>, vm);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(result).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive$$1</span>(vm, key, result[key], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;Avoid mutating an injected value directly since the changes will be &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;overwritten whenever the provided component re-renders. &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;injection being mutated: \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive$$1</span>(vm, key, result[key]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先找到是谁provide的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveInject</span> (inject, vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inject) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// inject is :any because flow is not smart enough to figure out cached</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = hasSymbol</span><br><span class=\"line\">      ? <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(inject)</span><br><span class=\"line\">      : <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(inject);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">      <span class=\"comment\">// #6574 in case the inject object is observed...</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;__ob__&#x27;</span>) &#123; <span class=\"keyword\">continue</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> provideKey = inject[key].<span class=\"property\">from</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> source = vm;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.<span class=\"property\">_provided</span> &amp;&amp; <span class=\"title function_\">hasOwn</span>(source.<span class=\"property\">_provided</span>, provideKey)) &#123;</span><br><span class=\"line\">          result[key] = source.<span class=\"property\">_provided</span>[provideKey];</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        source = source.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;default&#x27;</span> <span class=\"keyword\">in</span> inject[key]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> provideDefault = inject[key].<span class=\"property\">default</span>;</span><br><span class=\"line\">          result[key] = <span class=\"keyword\">typeof</span> provideDefault === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">            ? provideDefault.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">            : provideDefault;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;Injection \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; not found&quot;</span>), vm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>找到所有inject的key值，然后遍历父组件找到对应的provide，获取表达式（值）</li>\n</ul>\n</li>\n<li><p><strong>然后对获取的inject值进行响应式处理（defineReactive$$1）</strong></p>\n</li>\n</ul>\n<h4 id=\"initState\"><a href=\"#initState\" class=\"headerlink\" title=\"initState\"></a>initState</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initState</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">props</span>) &#123; <span class=\"title function_\">initProps</span>(vm, opts.<span class=\"property\">props</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">methods</span>) &#123; <span class=\"title function_\">initMethods</span>(vm, opts.<span class=\"property\">methods</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initData</span>(vm);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(vm.<span class=\"property\">_data</span> = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">computed</span>) &#123; <span class=\"title function_\">initComputed</span>(vm, opts.<span class=\"property\">computed</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">watch</span> &amp;&amp; opts.<span class=\"property\">watch</span> !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initWatch</span>(vm, opts.<span class=\"property\">watch</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>initState函数中初始化了我们在option中常用的功能<ul>\n<li>父组件传值：props</li>\n<li>方法：methods</li>\n<li>数据：data</li>\n<li>计算属性：computed</li>\n<li>侦听器：watch</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"initProps\"><a href=\"#initProps\" class=\"headerlink\" title=\"initProps\"></a>initProps</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initProps</span> (vm, propsOptions) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> propsData = vm.<span class=\"property\">$options</span>.<span class=\"property\">propsData</span> || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">_props</span> = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\">  <span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = vm.<span class=\"property\">$options</span>.<span class=\"property\">_propKeys</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isRoot = !vm.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">  <span class=\"comment\">// root instance props should be converted</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> loop = <span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) &#123;</span><br><span class=\"line\">    keys.<span class=\"title function_\">push</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"title function_\">validateProp</span>(key, propsOptions, propsData, vm);</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hyphenatedKey = <span class=\"title function_\">hyphenate</span>(key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isReservedAttribute</span>(hyphenatedKey) ||</span><br><span class=\"line\">          config.<span class=\"title function_\">isReservedAttr</span>(hyphenatedKey)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;\\&quot;&quot;</span> + hyphenatedKey + <span class=\"string\">&quot;\\&quot; is a reserved attribute and cannot be used as component prop.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive$$1</span>(props, key, value, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;Avoid mutating a prop directly since the value will be &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;overwritten whenever the parent component re-renders. &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;Instead, use a data or computed property based on the prop&#x27;s &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;value. Prop being mutated: \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive$$1</span>(props, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// static props are already proxied on the component&#x27;s prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">    <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">&quot;_props&quot;</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) <span class=\"title function_\">loop</span>( key );</span><br><span class=\"line\">  <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>循环遍历props的值</p>\n</li>\n<li><p>validateProp函数检测props属性的值并做处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateProp</span> (</span><br><span class=\"line\">  key,</span><br><span class=\"line\">  propOptions,</span><br><span class=\"line\">  propsData,</span><br><span class=\"line\">  vm</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prop = propOptions[key];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> absent = !<span class=\"title function_\">hasOwn</span>(propsData, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = propsData[key];</span><br><span class=\"line\">  <span class=\"comment\">// boolean casting</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> booleanIndex = <span class=\"title function_\">getTypeIndex</span>(<span class=\"title class_\">Boolean</span>, prop.<span class=\"property\">type</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (booleanIndex &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absent &amp;&amp; !<span class=\"title function_\">hasOwn</span>(prop, <span class=\"string\">&#x27;default&#x27;</span>)) &#123;</span><br><span class=\"line\">      value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span> || value === <span class=\"title function_\">hyphenate</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> stringIndex = <span class=\"title function_\">getTypeIndex</span>(<span class=\"title class_\">String</span>, prop.<span class=\"property\">type</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">        value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// check default value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    value = <span class=\"title function_\">getPropDefaultValue</span>(vm, prop, key);</span><br><span class=\"line\">    <span class=\"comment\">// since the default value is a fresh copy,</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure to observe it.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevShouldObserve = shouldObserve;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value);</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(prevShouldObserve);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"comment\">// skip validation for weex recycle-list child component props</span></span><br><span class=\"line\">    !(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">assertProp</span>(prop, key, value, vm, absent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>根据props的type处理默认值</strong></li>\n<li><strong>确保props的响应式</strong></li>\n<li><strong>验证传入的props</strong></li>\n</ul>\n</li>\n<li><p>最后进行一次响应式处理</p>\n</li>\n</ul>\n<h5 id=\"initMethods\"><a href=\"#initMethods\" class=\"headerlink\" title=\"initMethods\"></a>initMethods</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMethods</span> (vm, methods) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> methods) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has type \\&quot;&quot;</span> + (<span class=\"keyword\">typeof</span> methods[key]) + <span class=\"string\">&quot;\\&quot; in the component definition. &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Did you reference the function correctly?&quot;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (props &amp;&amp; <span class=\"title function_\">hasOwn</span>(props, key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has already been defined as a prop.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((key <span class=\"keyword\">in</span> vm) &amp;&amp; <span class=\"title function_\">isReserved</span>(key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; conflicts with an existing Vue instance method. &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Avoid defining component methods that start with _ or $.&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm[key] = <span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span> ? noop : <span class=\"title function_\">bind</span>(methods[key], vm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>做了写简单的验证，之后通过bind函数绑定this，然后挂载到vm（Vue实例）上</li>\n</ul>\n<h5 id=\"initData\"><a href=\"#initData\" class=\"headerlink\" title=\"initData\"></a>initData</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initData</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = vm.<span class=\"property\">$options</span>.<span class=\"property\">data</span>;</span><br><span class=\"line\">  data = vm.<span class=\"property\">_data</span> = <span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">    ? <span class=\"title function_\">getData</span>(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isPlainObject</span>(data)) &#123;</span><br><span class=\"line\">    data = &#123;&#125;;</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;data functions should return an object:\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;</span>,</span><br><span class=\"line\">      vm</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// proxy data on instance</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> methods = vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = keys.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (methods &amp;&amp; <span class=\"title function_\">hasOwn</span>(methods, key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has already been defined as a data property.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (props &amp;&amp; <span class=\"title function_\">hasOwn</span>(props, key)) &#123;</span><br><span class=\"line\">      process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;The data property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already declared as a prop. &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;Use prop default value instead.&quot;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"title function_\">isReserved</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">&quot;_data&quot;</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// observe data</span></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取data数据，如果是函数，通过getData函数获取里面的值</li>\n<li>进行一些简单的验证<ul>\n<li>方法重名、props重名、data函数没有返回plainObje</li>\n</ul>\n</li>\n<li>proxy代理<code>_data</code>属性</li>\n<li><strong>响应式处理data</strong></li>\n</ul>\n<h5 id=\"initComputed\"><a href=\"#initComputed\" class=\"headerlink\" title=\"initComputed\"></a>initComputed</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (vm, computed) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isSSR = <span class=\"title function_\">isServerRendering</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userDef = computed[key];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        (<span class=\"string\">&quot;Getter is missing for computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;.&quot;</span>),</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined in data.&quot;</span>), vm);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined as a prop.&quot;</span>), vm);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined as a method.&quot;</span>), vm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先创建了一个computed专用的watcher数组</li>\n<li>遍历每一个computed，同时为他们每一个创建一个watcher</li>\n<li>最后defineComputed函数则把computed挂载到vm上，内部实际使用的是watcher的方法</li>\n</ul>\n<h5 id=\"initWatch\"><a href=\"#initWatch\" class=\"headerlink\" title=\"initWatch\"></a>initWatch</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initWatch</span> (vm, watch) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = watch[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(handler)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handler.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">createWatcher</span>(vm, key, handler[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">createWatcher</span>(vm, key, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>遍历用户的watcher创建，内部使用<code>Vue.$watch</code>方法</li>\n<li><code>Vue.$watch</code>方法则是使用watcher（观察者实现）</li>\n</ul>\n<h4 id=\"initProvide\"><a href=\"#initProvide\" class=\"headerlink\" title=\"initProvide\"></a>initProvide</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initProvide</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> provide = vm.<span class=\"property\">$options</span>.<span class=\"property\">provide</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provide) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_provided</span> = <span class=\"keyword\">typeof</span> provide === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">      ? provide.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">      : provide;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存在provide就挂载到vm上</li>\n</ul>\n<h4 id=\"callHook-‘created’\"><a href=\"#callHook-‘created’\" class=\"headerlink\" title=\"callHook(‘created’)\"></a>callHook(‘created’)</h4><ul>\n<li>和之前的生命周期函数相同，此时调用<code>created</code>生命周期函数</li>\n</ul>\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h3><ul>\n<li><code>_init</code>函数的最后一步（如果存在el属性）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$mount</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el,</span></span><br><span class=\"line\"><span class=\"params\">  hydrating</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  el = el &amp;&amp; <span class=\"title function_\">query</span>(el);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el === <span class=\"variable language_\">document</span>.<span class=\"property\">body</span> || el === <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>) &#123;</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"comment\">// resolve template/el and convert to render function</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = options.<span class=\"property\">template</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> template === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (template.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) === <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">          template = <span class=\"title function_\">idToTemplate</span>(template);</span><br><span class=\"line\">          <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !template) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">              (<span class=\"string\">&quot;Template element not found or is empty: &quot;</span> + (options.<span class=\"property\">template</span>)),</span><br><span class=\"line\">              <span class=\"variable language_\">this</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (template.<span class=\"property\">nodeType</span>) &#123;</span><br><span class=\"line\">        template = template.<span class=\"property\">innerHTML</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;invalid template option:&#x27;</span> + template, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el) &#123;</span><br><span class=\"line\">      template = <span class=\"title function_\">getOuterHTML</span>(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">mark</span>(<span class=\"string\">&#x27;compile&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> ref = <span class=\"title function_\">compileToFunctions</span>(template, &#123;</span><br><span class=\"line\">        <span class=\"attr\">outputSourceRange</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">shouldDecodeNewlines</span>: shouldDecodeNewlines,</span><br><span class=\"line\">        <span class=\"attr\">shouldDecodeNewlinesForHref</span>: shouldDecodeNewlinesForHref,</span><br><span class=\"line\">        <span class=\"attr\">delimiters</span>: options.<span class=\"property\">delimiters</span>,</span><br><span class=\"line\">        <span class=\"attr\">comments</span>: options.<span class=\"property\">comments</span></span><br><span class=\"line\">      &#125;, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> render = ref.<span class=\"property\">render</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> staticRenderFns = ref.<span class=\"property\">staticRenderFns</span>;</span><br><span class=\"line\">      options.<span class=\"property\">render</span> = render;</span><br><span class=\"line\">      options.<span class=\"property\">staticRenderFns</span> = staticRenderFns;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">mark</span>(<span class=\"string\">&#x27;compile end&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + (<span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>) + <span class=\"string\">&quot; compile&quot;</span>), <span class=\"string\">&#x27;compile&#x27;</span>, <span class=\"string\">&#x27;compile end&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先使用<code>query</code>函数查询<code>el</code>指定的DOM节点</p>\n</li>\n<li><p><strong>然后检查<code>template</code>并将模板编译为渲染函数（render）</strong></p>\n<ul>\n<li><strong>模板编译函数：compileToFunctions</strong><ul>\n<li><strong>内部会将template处理为ast，然后转换为<code>$createElement</code>函数可以处理的VDOM，<code>$createElement</code>处理之后就会生成VNode</strong></li>\n</ul>\n</li>\n<li><strong>这也是Vue可以支持JSX写法的原因</strong></li>\n</ul>\n</li>\n<li><p>最后调用mount函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$mount</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el,</span></span><br><span class=\"line\"><span class=\"params\">  hydrating</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? <span class=\"title function_\">query</span>(el) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">mountComponent</span>(<span class=\"variable language_\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意这个mount和之前的$mount函数不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mountComponent\"><a href=\"#mountComponent\" class=\"headerlink\" title=\"mountComponent\"></a>mountComponent</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountComponent</span> (</span><br><span class=\"line\">  vm,</span><br><span class=\"line\">  el,</span><br><span class=\"line\">  hydrating</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">$el</span> = el;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm.<span class=\"property\">$options</span>.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$options</span>.<span class=\"property\">render</span> = createEmptyVNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((vm.<span class=\"property\">$options</span>.<span class=\"property\">template</span> &amp;&amp; vm.<span class=\"property\">$options</span>.<span class=\"property\">template</span>.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) !== <span class=\"string\">&#x27;#&#x27;</span>) ||</span><br><span class=\"line\">        vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span> || el) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;You are using the runtime-only build of Vue where the template &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;compiler is not available. Either pre-compile the templates into &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;render functions, or use the compiler-included build.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;Failed to mount component: template or render function not defined.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeMount&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> updateComponent;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> name = vm.<span class=\"property\">_name</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> id = vm.<span class=\"property\">_uid</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> startTag = <span class=\"string\">&quot;vue-perf-start:&quot;</span> + id;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> endTag = <span class=\"string\">&quot;vue-perf-end:&quot;</span> + id;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(startTag);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vnode = vm.<span class=\"title function_\">_render</span>();</span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(endTag);</span><br><span class=\"line\">      <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + name + <span class=\"string\">&quot; render&quot;</span>), startTag, endTag);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(startTag);</span><br><span class=\"line\">      vm.<span class=\"title function_\">_update</span>(vnode, hydrating);</span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(endTag);</span><br><span class=\"line\">      <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + name + <span class=\"string\">&quot; patch&quot;</span>), startTag, endTag);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// we set this to vm._watcher inside the watcher&#x27;s constructor</span></span><br><span class=\"line\">  <span class=\"comment\">// since the watcher&#x27;s initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class=\"line\">  <span class=\"comment\">// component&#x27;s mounted hook), which relies on vm._watcher being already defined</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, updateComponent, noop, &#123;</span><br><span class=\"line\">    <span class=\"attr\">before</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">before</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vm.<span class=\"property\">_isMounted</span> &amp;&amp; !vm.<span class=\"property\">_isDestroyed</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeUpdate&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* isRenderWatcher */</span>);</span><br><span class=\"line\">  hydrating = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// manually mounted instance, call mounted on self</span></span><br><span class=\"line\">  <span class=\"comment\">// mounted is called for render-created child components in its inserted hook</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$vnode</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_isMounted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;mounted&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先会检测option的render函数是否存在（template编译的或者JSX）</li>\n<li><strong>接着执行<code>beforeMounted</code>生命周期函数</strong></li>\n<li><strong>创建<code>updateComponent</code>函数，内部使用<code>vm._udpate(vm._render)</code></strong></li>\n<li>以<code>updateComponent</code>函数为<code>exprOrFn</code>创建watcher</li>\n<li>最后执行本组件的<code>mounted</code>生命周期函数</li>\n</ul>\n<h4 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Watcher</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span> (</span><br><span class=\"line\">  vm,</span><br><span class=\"line\">  expOrFn,</span><br><span class=\"line\">  cb,</span><br><span class=\"line\">  options,</span><br><span class=\"line\">  isRenderWatcher</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_watcher</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// options</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = ++uid$<span class=\"number\">2</span>; <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>; <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">_Set</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">_Set</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">    ? expOrFn.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">    : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop;</span><br><span class=\"line\">      process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;Failed watching path: \\&quot;&quot;</span> + expOrFn + <span class=\"string\">&quot;\\&quot; &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;For full control, use a function instead.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">    ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">    : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Watcher初始化最后会通过<code>get</code>函数获取初始值</p>\n</li>\n<li><p><strong><code>get</code>函数则是通过调用Watcher初始化的getter获取值</strong></p>\n<ul>\n<li><p>那么最后就是调用<code>mountComponent</code>函数中声明的<code>updateComponent</code>函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"_render\"></a>_render</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_render</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ref = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> render = ref.<span class=\"property\">render</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _parentVnode = ref.<span class=\"property\">_parentVnode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_parentVnode) &#123;</span><br><span class=\"line\">        vm.<span class=\"property\">$scopedSlots</span> = <span class=\"title function_\">normalizeScopedSlots</span>(</span><br><span class=\"line\">            _parentVnode.<span class=\"property\">data</span>.<span class=\"property\">scopedSlots</span>,</span><br><span class=\"line\">            vm.<span class=\"property\">$slots</span>,</span><br><span class=\"line\">            vm.<span class=\"property\">$scopedSlots</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set parent vnode. this allows render functions to have access</span></span><br><span class=\"line\">    <span class=\"comment\">// to the data on the placeholder node.</span></span><br><span class=\"line\">    vm.<span class=\"property\">$vnode</span> = _parentVnode;</span><br><span class=\"line\">    <span class=\"comment\">// render self</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vnode;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// There&#x27;s no need to maintain a stack because all render fns are called</span></span><br><span class=\"line\">        <span class=\"comment\">// separately from one another. Nested component&#x27;s render fns are called</span></span><br><span class=\"line\">        <span class=\"comment\">// when parent component is patched.</span></span><br><span class=\"line\">        currentRenderingInstance = vm;</span><br><span class=\"line\">        vnode = render.<span class=\"title function_\">call</span>(vm.<span class=\"property\">_renderProxy</span>, vm.<span class=\"property\">$createElement</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">&quot;render&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// return error render result,</span></span><br><span class=\"line\">        <span class=\"comment\">// or previous vnode to prevent render error causing blank component</span></span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; vm.<span class=\"property\">$options</span>.<span class=\"property\">renderError</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vnode = vm.<span class=\"property\">$options</span>.<span class=\"property\">renderError</span>.<span class=\"title function_\">call</span>(vm.<span class=\"property\">_renderProxy</span>, vm.<span class=\"property\">$createElement</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">&quot;renderError&quot;</span>);</span><br><span class=\"line\">                vnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            vnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        currentRenderingInstance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if the returned array contains only a single node, allow it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(vnode) &amp;&amp; vnode.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        vnode = vnode[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return empty vnode in case the render function errored out</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(vnode <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(vnode)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;Multiple root nodes returned from render function. Render function &#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;should return a single root node.&#x27;</span>,</span><br><span class=\"line\">                vm</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vnode = <span class=\"title function_\">createEmptyVNode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// set parent</span></span><br><span class=\"line\">    vnode.<span class=\"property\">parent</span> = _parentVnode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>_render</code>函数主要通过传入<code>$createElement</code>函数生成VNode，并返回</strong></li>\n</ul>\n<h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"_update\"></a>_update</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_update</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vnode, hydrating</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevEl = vm.<span class=\"property\">$el</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevVnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> restoreActiveInstance = <span class=\"title function_\">setActiveInstance</span>(vm);</span><br><span class=\"line\">  vm.<span class=\"property\">_vnode</span> = vnode;</span><br><span class=\"line\">  <span class=\"comment\">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class=\"line\">  <span class=\"comment\">// based on the rendering backend used.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!prevVnode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// initial render</span></span><br><span class=\"line\">    vm.<span class=\"property\">$el</span> = vm.<span class=\"title function_\">__patch__</span>(vm.<span class=\"property\">$el</span>, vnode, hydrating, <span class=\"literal\">false</span> <span class=\"comment\">/* removeOnly */</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// updates</span></span><br><span class=\"line\">    vm.<span class=\"property\">$el</span> = vm.<span class=\"title function_\">__patch__</span>(prevVnode, vnode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">restoreActiveInstance</span>();</span><br><span class=\"line\">  <span class=\"comment\">// update __vue__ reference</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevEl) &#123;</span><br><span class=\"line\">    prevEl.<span class=\"property\">__vue__</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$el</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$el</span>.<span class=\"property\">__vue__</span> = vm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// if parent is an HOC, update its $el as well</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$vnode</span> &amp;&amp; vm.<span class=\"property\">$parent</span> &amp;&amp; vm.<span class=\"property\">$vnode</span> === vm.<span class=\"property\">$parent</span>.<span class=\"property\">_vnode</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$parent</span>.<span class=\"property\">$el</span> = vm.<span class=\"property\">$el</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class=\"line\">  <span class=\"comment\">// updated in a parent&#x27;s updated hook.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>_update</code>函数主要通过patch函数将VNode转化为实际DOM</strong></li>\n</ul>\n<h4 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">patch</span> (oldVnode, vnode, hydrating, removeOnly) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(vnode)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无新VNode，存在旧VNode，删除旧VNode即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldVnode)) &#123; <span class=\"title function_\">invokeDestroyHook</span>(oldVnode); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isInitialPatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertedVnodeQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldVnode)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不存在旧节点，直接根据新VNode创建新节点即可</span></span><br><span class=\"line\">        <span class=\"comment\">// empty mount (likely as component), create new root element</span></span><br><span class=\"line\">        isInitialPatch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">createElm</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isRealElement = <span class=\"title function_\">isDef</span>(oldVnode.<span class=\"property\">nodeType</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRealElement &amp;&amp; <span class=\"title function_\">sameVnode</span>(oldVnode, vnode)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// patch existing root node</span></span><br><span class=\"line\">            <span class=\"title function_\">patchVnode</span>(oldVnode, vnode, insertedVnodeQueue, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, removeOnly);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isRealElement) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// mounting to a real element</span></span><br><span class=\"line\">                <span class=\"comment\">// check if this is server-rendered content and if we can perform</span></span><br><span class=\"line\">                <span class=\"comment\">// a successful hydration.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVnode.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span> &amp;&amp; oldVnode.<span class=\"title function_\">hasAttribute</span>(<span class=\"variable constant_\">SSR_ATTR</span>)) &#123;</span><br><span class=\"line\">                    oldVnode.<span class=\"title function_\">removeAttribute</span>(<span class=\"variable constant_\">SSR_ATTR</span>);</span><br><span class=\"line\">                    hydrating = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(hydrating)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"title function_\">hydrate</span>(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">invokeInsertHook</span>(vnode, insertedVnodeQueue, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> oldVnode</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                            <span class=\"string\">&#x27;The client-side rendered virtual DOM tree is not matching &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;server-rendered content. This is likely caused by incorrect &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;HTML markup, for example nesting block-level elements inside &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;full client-side render.&#x27;</span></span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// either not server-rendered, or hydration failed.</span></span><br><span class=\"line\">                <span class=\"comment\">// create an empty node and replace it</span></span><br><span class=\"line\">                oldVnode = <span class=\"title function_\">emptyNodeAt</span>(oldVnode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// replacing existing element</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> oldElm = oldVnode.<span class=\"property\">elm</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentElm = nodeOps.<span class=\"title function_\">parentNode</span>(oldElm);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// create new node</span></span><br><span class=\"line\">            <span class=\"title function_\">createElm</span>(</span><br><span class=\"line\">                vnode,</span><br><span class=\"line\">                insertedVnodeQueue,</span><br><span class=\"line\">                <span class=\"comment\">// extremely rare edge case: do not insert if old element is in a</span></span><br><span class=\"line\">                <span class=\"comment\">// leaving transition. Only happens when combining transition +</span></span><br><span class=\"line\">                <span class=\"comment\">// keep-alive + HOCs. (#4590)</span></span><br><span class=\"line\">                oldElm.<span class=\"property\">_leaveCb</span> ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">                nodeOps.<span class=\"title function_\">nextSibling</span>(oldElm)</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// update parent placeholder node element, recursively</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ancestor = vnode.<span class=\"property\">parent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> patchable = <span class=\"title function_\">isPatchable</span>(vnode);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (ancestor) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cbs.<span class=\"property\">destroy</span>.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">                        cbs.<span class=\"property\">destroy</span>[i](ancestor);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ancestor.<span class=\"property\">elm</span> = vnode.<span class=\"property\">elm</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (patchable) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i$<span class=\"number\">1</span> = <span class=\"number\">0</span>; i$<span class=\"number\">1</span> &lt; cbs.<span class=\"property\">create</span>.<span class=\"property\">length</span>; ++i$<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            cbs.<span class=\"property\">create</span>[i$<span class=\"number\">1</span>](emptyNode, ancestor);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// #6513</span></span><br><span class=\"line\">                        <span class=\"comment\">// invoke insert hooks that may have been merged by create hooks.</span></span><br><span class=\"line\">                        <span class=\"comment\">// e.g. for directives that uses the &quot;inserted&quot; hook.</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> insert = ancestor.<span class=\"property\">data</span>.<span class=\"property\">hook</span>.<span class=\"property\">insert</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (insert.<span class=\"property\">merged</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// start at index 1 to avoid re-invoking component mounted hook</span></span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i$<span class=\"number\">2</span> = <span class=\"number\">1</span>; i$<span class=\"number\">2</span> &lt; insert.<span class=\"property\">fns</span>.<span class=\"property\">length</span>; i$<span class=\"number\">2</span>++) &#123;</span><br><span class=\"line\">                                insert.<span class=\"property\">fns</span>[i$<span class=\"number\">2</span>]();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">registerRef</span>(ancestor);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ancestor = ancestor.<span class=\"property\">parent</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// destroy old node</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(parentElm)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">removeVnodes</span>([oldVnode], <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldVnode.<span class=\"property\">tag</span>)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invokeDestroyHook</span>(oldVnode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invokeInsertHook</span>(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.<span class=\"property\">elm</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>patch</code>函数是真正更新DOM的重要函数，根据情况不同，更新方式也不同</strong></p>\n<ul>\n<li><strong><code>patchVnode</code>函数用于更新已存在的DOM，著名的DIFF算法就在其中</strong></li>\n</ul>\n</li>\n<li><p><strong><code>createElm</code>函数根据VNode创建真实DOM节点，随后插入真实DOM树</strong></p>\n<ul>\n<li><strong>前面进行一些判断简化操作，最后去除oldDOM节点</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"createElm\"><a href=\"#createElm\" class=\"headerlink\" title=\"createElm\"></a>createElm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElm</span> (</span><br><span class=\"line\">vnode,</span><br><span class=\"line\"> insertedVnodeQueue,</span><br><span class=\"line\"> parentElm,</span><br><span class=\"line\"> refElm,</span><br><span class=\"line\"> nested,</span><br><span class=\"line\"> ownerArray,</span><br><span class=\"line\"> index</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">elm</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(ownerArray)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This vnode was used in a previous render!</span></span><br><span class=\"line\">        <span class=\"comment\">// now it&#x27;s used as a new node, overwriting its elm would cause</span></span><br><span class=\"line\">        <span class=\"comment\">// potential patch errors down the road when it&#x27;s used as an insertion</span></span><br><span class=\"line\">        <span class=\"comment\">// reference node. Instead, we clone the node on-demand before creating</span></span><br><span class=\"line\">        <span class=\"comment\">// associated DOM element for it.</span></span><br><span class=\"line\">        vnode = ownerArray[index] = <span class=\"title function_\">cloneVNode</span>(vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vnode.<span class=\"property\">isRootInsert</span> = !nested; <span class=\"comment\">// for transition enter check</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">createComponent</span>(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = vnode.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children = vnode.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag = vnode.<span class=\"property\">tag</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(tag)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">pre</span>) &#123;</span><br><span class=\"line\">                creatingElmInVPre++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUnknownElement$$1</span>(vnode, creatingElmInVPre)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Unknown custom element: &lt;&#x27;</span> + tag + <span class=\"string\">&#x27;&gt; - did you &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;register the component correctly? For recursive components, &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;make sure to provide the &quot;name&quot; option.&#x27;</span>,</span><br><span class=\"line\">                    vnode.<span class=\"property\">context</span></span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = vnode.<span class=\"property\">ns</span></span><br><span class=\"line\">            ? nodeOps.<span class=\"title function_\">createElementNS</span>(vnode.<span class=\"property\">ns</span>, tag)</span><br><span class=\"line\">        : nodeOps.<span class=\"title function_\">createElement</span>(tag, vnode);</span><br><span class=\"line\">        <span class=\"title function_\">setScope</span>(vnode);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title function_\">createChildren</span>(vnode, children, insertedVnodeQueue);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(data)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invokeCreateHooks</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; data &amp;&amp; data.<span class=\"property\">pre</span>) &#123;</span><br><span class=\"line\">            creatingElmInVPre--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(vnode.<span class=\"property\">isComment</span>)) &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = nodeOps.<span class=\"title function_\">createComment</span>(vnode.<span class=\"property\">text</span>);</span><br><span class=\"line\">        <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = nodeOps.<span class=\"title function_\">createTextNode</span>(vnode.<span class=\"property\">text</span>);</span><br><span class=\"line\">        <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>如果是组件会去使用<code>createComponent</code>函数创建组件</strong></p>\n</li>\n<li><p><strong>如果是已知的HTML标签，会直接使用<code>nodeOps.createElement</code>函数创建</strong></p>\n<ul>\n<li><p><strong><code>nodeOps.createElement</code>函数内部使用原生DOM操作</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElement$1</span> (tagName, vnode) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> elm = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(tagName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tagName !== <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elm</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// false or null will remove the attribute but undefined will not</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vnode.<span class=\"property\">data</span> &amp;&amp; vnode.<span class=\"property\">data</span>.<span class=\"property\">attrs</span> &amp;&amp; vnode.<span class=\"property\">data</span>.<span class=\"property\">attrs</span>.<span class=\"property\">multiple</span> !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    elm.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;multiple&#x27;</span>, <span class=\"string\">&#x27;multiple&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> elm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>如果存在子节点，则会调用<code>createChildren</code>函数创建子节点</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createChildren</span> (vnode, children, insertedVnodeQueue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(children)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">checkDuplicateKeys</span>(children);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">createElm</span>(children[i], insertedVnodeQueue, vnode.<span class=\"property\">elm</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>, children, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isPrimitive</span>(vnode.<span class=\"property\">text</span>)) &#123;</span><br><span class=\"line\">        nodeOps.<span class=\"title function_\">appendChild</span>(vnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(vnode.<span class=\"property\">text</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>递归调用<code>createElm</code>函数创建子节点的真实DOM</strong></li>\n</ul>\n</li>\n<li><p><strong>如果是文本节点或注释节点，则分别使用对应的原生DOM操作去创建</strong></p>\n</li>\n<li><p><strong>创建完成之后调用<code>insert</code>函数插入父节点</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insert</span> (parent, elm, ref$$1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(parent)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(ref$$1)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nodeOps.<span class=\"title function_\">parentNode</span>(ref$$1) === parent) &#123;</span><br><span class=\"line\">                nodeOps.<span class=\"title function_\">insertBefore</span>(parent, elm, ref$$1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nodeOps.<span class=\"title function_\">appendChild</span>(parent, elm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意此时父节点可能没有挂载到视图上（例如：根Vue），所以没有在视图上展示</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"createComponent\"><a href=\"#createComponent\" class=\"headerlink\" title=\"createComponent\"></a>createComponent</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createComponent</span> (vnode, insertedVnodeQueue, parentElm, refElm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = vnode.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isReactivated = <span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">componentInstance</span>) &amp;&amp; i.<span class=\"property\">keepAlive</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">hook</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">init</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">i</span>(vnode, <span class=\"literal\">false</span> <span class=\"comment\">/* hydrating */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// after calling the init hook, if the vnode is a child component</span></span><br><span class=\"line\">        <span class=\"comment\">// it should&#x27;ve created a child instance and mounted it. the child</span></span><br><span class=\"line\">        <span class=\"comment\">// component also has set the placeholder vnode&#x27;s elm.</span></span><br><span class=\"line\">        <span class=\"comment\">// in that case we can just return the element and be done.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">componentInstance</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">initComponent</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">            <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(isReactivated)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reactivateComponent</span>(vnode, insertedVnodeQueue, parentElm, refElm);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>组件的VNode的data存有hook函数，是由<code>render</code>函数注入的？componentOptions属性存有组件的<code>props、tag、listeners、Ctor</code>（Ctor是VueComponent函数，tag是我们定义的组件名）</p>\n</li>\n<li><p><code>init</code>hook函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">init</span> (vnode, hydrating) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        vnode.<span class=\"property\">componentInstance</span> &amp;&amp;</span><br><span class=\"line\">        !vnode.<span class=\"property\">componentInstance</span>.<span class=\"property\">_isDestroyed</span> &amp;&amp;</span><br><span class=\"line\">        vnode.<span class=\"property\">data</span>.<span class=\"property\">keepAlive</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// kept-alive components, treat as a patch</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mountedNode = vnode; <span class=\"comment\">// work around flow</span></span><br><span class=\"line\">        componentVNodeHooks.<span class=\"title function_\">prepatch</span>(mountedNode, mountedNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = vnode.<span class=\"property\">componentInstance</span> = <span class=\"title function_\">createComponentInstanceForVnode</span>(</span><br><span class=\"line\">            vnode,</span><br><span class=\"line\">            activeInstance</span><br><span class=\"line\">        );</span><br><span class=\"line\">        child.$mount(hydrating ? vnode.<span class=\"property\">elm</span> : <span class=\"literal\">undefined</span>, hydrating);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>createComponentInstanceForVnode</code>函数会调用VueComponent的构造函数，最后调用Vue.__init函数</strong></li>\n<li><strong>由于没有<code>el</code>属性，子组件<code>init</code>之后就会返回<code>VueComponent</code>对象（不会自动调用<code>init</code>的$mount函数进行挂载）</strong><ul>\n<li>随后<code>init</code>函数进行手动挂载</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"invokeInsertHook\"><a href=\"#invokeInsertHook\" class=\"headerlink\" title=\"invokeInsertHook\"></a>invokeInsertHook</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokeInsertHook</span> (vnode, queue, initial) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">    <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(initial) &amp;&amp; <span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">parent</span>.<span class=\"property\">data</span>.<span class=\"property\">pendingInsert</span> = queue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">            queue[i].<span class=\"property\">data</span>.<span class=\"property\">hook</span>.<span class=\"title function_\">insert</span>(queue[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>子组件的<code>insert</code>hook都会保留到父组件<code>patch</code>函数结尾执行</strong><ul>\n<li><strong><code>mounted</code>声明周期函数在此处执行</strong></li>\n<li><strong><code>v-model</code>指令在此处会在DOM节点上绑定相关事件，实现双向绑定</strong></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前了解Vue源码都是通过网上一些文章获取，从未真正debug过Vue源码，所以就有了这篇文章</p>\n<p><strong>写完之后发现就是源码的堆积，理解还是不够啊</strong></p>\n<ul>\n<li>Vue版本：2.6.14</li>\n<li>简单手动配置webpack后进行debug</li>\n<li>入口文件代码如下</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* index.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Header</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./components/Header/index.js&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">debugger</span>; <span class=\"comment\">//此处进行debug调试</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123; <span class=\"comment\">// 测试data</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;123&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">ifFlag</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">inputValue</span>: <span class=\"string\">&quot;input something&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123; <span class=\"comment\">// 测试methods</span></span><br><span class=\"line\">    <span class=\"title function_\">hello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app hello&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123; <span class=\"comment\">// 测试computed</span></span><br><span class=\"line\">    <span class=\"title function_\">reversedText</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">text</span>.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试lifeCycle</span></span><br><span class=\"line\">  <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before create&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">beforeMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before mount&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app mounted&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">beforeUpdate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app before update&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">updated</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==app updated&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试component</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Header</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 测试template</span></span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div id=&quot;app&quot; @click=&quot;hello&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div&gt;&#123;&#123;reversedText&#125;&#125;&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;div v-if=&quot;ifFlag&quot;&gt;ifFlag is true then I will show&lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;input v-model=&quot;inputValue&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;p&gt;what you input is:&#123;&#123;inputValue&#125;&#125;&lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;Header :propValue=&quot;&#x27;from app&#x27;&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Header组件</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Header.js */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Vue</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&quot;Header&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">  &lt;div @click=&quot;showMsg&quot; class=&quot;header&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">    text:&#123;&#123;text&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    propValue:&#123;&#123;propValue&#125;&#125;</span></span><br><span class=\"line\"><span class=\"string\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;i am header&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: [<span class=\"string\">&quot;propValue&quot;</span>], <span class=\"comment\">// props测试</span></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">showMsg</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==from header&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">created</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==Header components created&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==Header components mounted&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vue2源码的一次debug\"><a href=\"#Vue2源码的一次debug\" class=\"headerlink\" title=\"Vue2源码的一次debug\"></a>Vue2源码的一次debug</h2><p><strong>debug过程中，相关源码会进行简化，省略无关代码（例如所有环境分支均已删除，保留开发环境）</strong></p>\n<p>单步调试<code>export default new Vue(&#123;...&#125;)</code>，就会进入Vue的构造函数内部</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Vue</span> (options) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    !(<span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Vue</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"title function_\">_init</span>(options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以看到Vue的构造函数很简单，接受传入的options，直接调用<code>_init</code>方法初始化</li>\n</ul>\n<h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"__init\"></a>__init</h3><p>_init方法在源码中已被mixin（混入）Vue构造方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_init</span> = <span class=\"keyword\">function</span> (<span class=\"params\">options</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// a flag to avoid this being observed</span></span><br><span class=\"line\">    vm.<span class=\"property\">_isVue</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// merge options</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options &amp;&amp; options.<span class=\"property\">_isComponent</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// optimize internal component instantiation</span></span><br><span class=\"line\">        <span class=\"comment\">// since dynamic options merging is pretty slow, and none of the</span></span><br><span class=\"line\">        <span class=\"comment\">// internal component options needs special treatment.</span></span><br><span class=\"line\">        <span class=\"title function_\">initInternalComponent</span>(vm, options);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vm.<span class=\"property\">$options</span> = <span class=\"title function_\">mergeOptions</span>(</span><br><span class=\"line\">            <span class=\"title function_\">resolveConstructorOptions</span>(vm.<span class=\"property\">constructor</span>),</span><br><span class=\"line\">            options || &#123;&#125;,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// expose real self</span></span><br><span class=\"line\">    vm.<span class=\"property\">_self</span> = vm;</span><br><span class=\"line\">    <span class=\"title function_\">initLifecycle</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initEvents</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initRender</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeCreate&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">initInjections</span>(vm); <span class=\"comment\">// resolve injections before data/props</span></span><br><span class=\"line\">    <span class=\"title function_\">initState</span>(vm);</span><br><span class=\"line\">    <span class=\"title function_\">initProvide</span>(vm); <span class=\"comment\">// resolve provide after data/props</span></span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;created&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>) &#123;</span><br><span class=\"line\">        vm.$mount(vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化变量 vm &#x3D; 当前即将创建的Vue对象</li>\n<li>标记当前即将创建的对象是Vue<code>_isVue = true</code></li>\n<li><strong>可以关注下两个声明周期函数的执行时间</strong></li>\n<li><strong>最后把Vue挂载到DOM上</strong></li>\n<li><strong>下面是每个步骤函数的简单解析</strong></li>\n</ul>\n<h4 id=\"initInternalComponent\"><a href=\"#initInternalComponent\" class=\"headerlink\" title=\"initInternalComponent\"></a>initInternalComponent</h4><ul>\n<li>Vnode中存在自定义组件时，在创建真实DOM元素的时候才会调用这个函数</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initInternalComponent</span> (vm, options) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> opts = vm.<span class=\"property\">$options</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(vm.<span class=\"property\">constructor</span>.<span class=\"property\">options</span>);</span><br><span class=\"line\">    <span class=\"comment\">// doing this because it&#x27;s faster than dynamic enumeration.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> parentVnode = options.<span class=\"property\">_parentVnode</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">parent</span> = options.<span class=\"property\">parent</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_parentVnode</span> = parentVnode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vnodeComponentOptions = parentVnode.<span class=\"property\">componentOptions</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">propsData</span> = vnodeComponentOptions.<span class=\"property\">propsData</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_parentListeners</span> = vnodeComponentOptions.<span class=\"property\">listeners</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_renderChildren</span> = vnodeComponentOptions.<span class=\"property\">children</span>;</span><br><span class=\"line\">    opts.<span class=\"property\">_componentTag</span> = vnodeComponentOptions.<span class=\"property\">tag</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (options.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">        opts.<span class=\"property\">render</span> = options.<span class=\"property\">render</span>;</span><br><span class=\"line\">        opts.<span class=\"property\">staticRenderFns</span> = options.<span class=\"property\">staticRenderFns</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意：<code>options.__parentVnode</code>指的是组件自身的VNode，<code>options.parentVnode</code>指的是父组件的Vue实例对象</li>\n</ul>\n<h4 id=\"mergeOptoins\"><a href=\"#mergeOptoins\" class=\"headerlink\" title=\"mergeOptoins\"></a>mergeOptoins</h4><ul>\n<li><p>合并option（选项）</p>\n</li>\n<li><p>resolveConstructorOptions函数获取了<code>Vue.constructor</code>上的属性</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mergeOptions</span> (</span><br><span class=\"line\">  parent, <span class=\"comment\">// Vue.constructor上的属性</span></span><br><span class=\"line\">  child, <span class=\"comment\">// 我们传入的option</span></span><br><span class=\"line\">  vm <span class=\"comment\">// 当前Vue对象</span></span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">checkComponents</span>(child);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">normalizeProps</span>(child, vm);</span><br><span class=\"line\">  <span class=\"title function_\">normalizeInject</span>(child, vm);</span><br><span class=\"line\">  <span class=\"title function_\">normalizeDirectives</span>(child);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Apply extends and mixins on the child options,</span></span><br><span class=\"line\">  <span class=\"comment\">// but only if it is a raw options object that isn&#x27;t</span></span><br><span class=\"line\">  <span class=\"comment\">// the result of another mergeOptions call.</span></span><br><span class=\"line\">  <span class=\"comment\">// Only merged options has the _base property.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!child.<span class=\"property\">_base</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">extends</span>) &#123;</span><br><span class=\"line\">      parent = <span class=\"title function_\">mergeOptions</span>(parent, child.<span class=\"property\">extends</span>, vm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (child.<span class=\"property\">mixins</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = child.<span class=\"property\">mixins</span>.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">        parent = <span class=\"title function_\">mergeOptions</span>(parent, child.<span class=\"property\">mixins</span>[i], vm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> key;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> parent) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mergeField</span>(key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> child) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"title function_\">hasOwn</span>(parent, key)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">mergeField</span>(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">mergeField</span> (key) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> strat = strats[key] || defaultStrat;</span><br><span class=\"line\">    options[key] = <span class=\"title function_\">strat</span>(parent[key], child[key], vm, key);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> options</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>checkComponents</code>函数检测<strong>自定义组件名是否规范</strong>（例如：不能自定义一个div组件，html已有div标签）</li>\n<li><code>normalizeProps</code>函数检测**<code>props</code>是否规范**（例如：是否是array或者plainObject）<ul>\n<li>同时也进行了格式化，连字符格式转为驼峰格式</li>\n</ul>\n</li>\n<li>normalizeInject、normalizeDirectives函数同上</li>\n<li>后续针对extends和mixins方法创建的子构造器合并了选项</li>\n<li>最后合并父子的option选项，合并时的优先级如下：（<strong>优先级高的覆盖优先级低的，不会∪在一起</strong>）<ul>\n<li>自定义option</li>\n<li>子option</li>\n<li>父option</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"initProxy\"><a href=\"#initProxy\" class=\"headerlink\" title=\"initProxy\"></a>initProxy</h4><ul>\n<li>仅用于开发环境，利用es6的proxy代理Vue属性的访问，当访问不存在的属性时，log提醒</li>\n</ul>\n<h4 id=\"initLifecycle\"><a href=\"#initLifecycle\" class=\"headerlink\" title=\"initLifecycle\"></a>initLifecycle</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initLifecycle</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// locate first non-abstract parent</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parent = options.<span class=\"property\">parent</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (parent &amp;&amp; !options.<span class=\"property\">abstract</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (parent.<span class=\"property\">$options</span>.<span class=\"property\">abstract</span> &amp;&amp; parent.<span class=\"property\">$parent</span>) &#123;</span><br><span class=\"line\">      parent = parent.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent.<span class=\"property\">$children</span>.<span class=\"title function_\">push</span>(vm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">$parent</span> = parent;</span><br><span class=\"line\">  vm.<span class=\"property\">$root</span> = parent ? parent.<span class=\"property\">$root</span> : vm; <span class=\"comment\">// 当前组件树的根 Vue 实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">$children</span> = []; <span class=\"comment\">// 当前实例的直接子组件</span></span><br><span class=\"line\">  vm.<span class=\"property\">$refs</span> = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  vm.<span class=\"property\">_watcher</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  <span class=\"comment\">// lifeCycle的flag</span></span><br><span class=\"line\">  vm.<span class=\"property\">_inactive</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_directInactive</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isMounted</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isDestroyed</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">_isBeingDestroyed</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先找到第一个非抽象父组件（keep-alive就是抽象组件）</li>\n<li>初始化vm的一些属性</li>\n</ul>\n<h4 id=\"initEvents\"><a href=\"#initEvents\" class=\"headerlink\" title=\"initEvents\"></a>initEvents</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initEvents</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_events</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  vm.<span class=\"property\">_hasHookEvent</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// init parent attached events</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> listeners = vm.<span class=\"property\">$options</span>.<span class=\"property\">_parentListeners</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (listeners) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateComponentListeners</span>(vm, listeners);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化Vue对象的events（事件）功能，包括但不限于：<ul>\n<li><strong>处理父组件传递的事件</strong></li>\n<li><strong><code>this.$on</code>方法注册事件</strong></li>\n<li><strong><code>this.$emit</code>方法触发事件</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"initRender\"><a href=\"#initRender\" class=\"headerlink\" title=\"initRender\"></a>initRender</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initRender</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_vnode</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// the root of the child tree</span></span><br><span class=\"line\">  vm.<span class=\"property\">_staticTrees</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// v-once cached trees</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentVnode = vm.<span class=\"property\">$vnode</span> = options.<span class=\"property\">_parentVnode</span>; <span class=\"comment\">// the placeholder node in parent tree</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderContext = parentVnode &amp;&amp; parentVnode.<span class=\"property\">context</span>;</span><br><span class=\"line\">  vm.<span class=\"property\">$slots</span> = <span class=\"title function_\">resolveSlots</span>(options.<span class=\"property\">_renderChildren</span>, renderContext);</span><br><span class=\"line\">  vm.<span class=\"property\">$scopedSlots</span> = emptyObject;</span><br><span class=\"line\">  <span class=\"comment\">// bind the createElement fn to this instance</span></span><br><span class=\"line\">  <span class=\"comment\">// so that we get proper render context inside it.</span></span><br><span class=\"line\">  <span class=\"comment\">// args order: tag, data, children, normalizationType, alwaysNormalize</span></span><br><span class=\"line\">  <span class=\"comment\">// internal version is used by render functions compiled from templates</span></span><br><span class=\"line\">  vm.<span class=\"property\">_c</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">createElement</span>(vm, a, b, c, d, <span class=\"literal\">false</span>); &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// normalization is always applied for the public version, used in</span></span><br><span class=\"line\">  <span class=\"comment\">// user-written render functions.</span></span><br><span class=\"line\">  vm.<span class=\"property\">$createElement</span> = <span class=\"keyword\">function</span> (<span class=\"params\">a, b, c, d</span>) &#123; <span class=\"keyword\">return</span> <span class=\"title function_\">createElement</span>(vm, a, b, c, d, <span class=\"literal\">true</span>); &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// $attrs &amp; $listeners are exposed for easier HOC creation.</span></span><br><span class=\"line\">  <span class=\"comment\">// they need to be reactive so that HOCs using them are always updated</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> parentData = parentVnode &amp;&amp; parentVnode.<span class=\"property\">data</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$attrs&#x27;</span>, parentData &amp;&amp; parentData.<span class=\"property\">attrs</span> || emptyObject, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; <span class=\"title function_\">warn</span>(<span class=\"string\">&quot;$attrs is readonly.&quot;</span>, vm);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$listeners&#x27;</span>, options.<span class=\"property\">_parentListeners</span> || emptyObject, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      !isUpdatingChildComponent &amp;&amp; <span class=\"title function_\">warn</span>(<span class=\"string\">&quot;$listeners is readonly.&quot;</span>, vm);</span><br><span class=\"line\">    &#125;, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$attrs&#x27;</span>, parentData &amp;&amp; parentData.<span class=\"property\">attrs</span> || emptyObject, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">defineReactive$$1</span>(vm, <span class=\"string\">&#x27;$listeners&#x27;</span>, options.<span class=\"property\">_parentListeners</span> || emptyObject, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>初始化vm的一些属性</p>\n<ul>\n<li>_vnode指的是Vue对象挂载到DOM的VNode</li>\n<li>$vnode指的是Vue组件在parent中template中的占位node</li>\n</ul>\n</li>\n<li><p>resolveSlots函数解析组件传入的slot，并赋值给$slot</p>\n<p>函数实现如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveSlots</span> (</span><br><span class=\"line\">  children,</span><br><span class=\"line\">  context</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!children || !children.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> slots = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, l = children.<span class=\"property\">length</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child = children[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = child.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// remove slot attribute if the node is resolved as a Vue slot node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">attrs</span> &amp;&amp; data.<span class=\"property\">attrs</span>.<span class=\"property\">slot</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> data.<span class=\"property\">attrs</span>.<span class=\"property\">slot</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// named slots should only be respected if the vnode was rendered in the</span></span><br><span class=\"line\">    <span class=\"comment\">// same context.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((child.<span class=\"property\">context</span> === context || child.<span class=\"property\">fnContext</span> === context) &amp;&amp;</span><br><span class=\"line\">      data &amp;&amp; data.<span class=\"property\">slot</span> != <span class=\"literal\">null</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> name = data.<span class=\"property\">slot</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> slot = (slots[name] || (slots[name] = []));</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (child.<span class=\"property\">tag</span> === <span class=\"string\">&#x27;template&#x27;</span>) &#123; <span class=\"comment\">// 这里对template进行了特殊处理</span></span><br><span class=\"line\">        slot.<span class=\"property\">push</span>.<span class=\"title function_\">apply</span>(slot, child.<span class=\"property\">children</span> || []);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        slot.<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      (slots.<span class=\"property\">default</span> || (slots.<span class=\"property\">default</span> = [])).<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ignore slots that contains only whitespace</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> name$<span class=\"number\">1</span> <span class=\"keyword\">in</span> slots) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slots[name$<span class=\"number\">1</span>].<span class=\"title function_\">every</span>(isWhitespace)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">delete</span> slots[name$<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> slots</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>同时创建了$createElement函数（_c函数同理），用于VDOM生成实际DOM</p>\n</li>\n<li><p>最后对<code>$attrs</code>和<code>$listeners</code>进行了响应式处理</p>\n</li>\n</ul>\n<h4 id=\"callHook-‘beforeCreated’\"><a href=\"#callHook-‘beforeCreated’\" class=\"headerlink\" title=\"callHook(‘beforeCreated’)\"></a>callHook(‘beforeCreated’)</h4><p>顾名思义，此时调用了<code>beforeCreated</code>生命周期函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">callHook</span> (vm, hook) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// #7573 disable dep collection when invoking lifecycle hooks</span></span><br><span class=\"line\">  <span class=\"title function_\">pushTarget</span>();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> handlers = vm.<span class=\"property\">$options</span>[hook];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> info = hook + <span class=\"string\">&quot; hook&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (handlers) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, j = handlers.<span class=\"property\">length</span>; i &lt; j; i++) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">invokeWithErrorHandling</span>(handlers[i], vm, <span class=\"literal\">null</span>, vm, info);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">_hasHookEvent</span>) &#123;</span><br><span class=\"line\">    vm.$emit(<span class=\"string\">&#x27;hook:&#x27;</span> + hook);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">popTarget</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>函数头尾禁止了Dep的依赖收集</li>\n<li><code>handlers</code>是一个数组，所以生命周期函数可以是多个</li>\n<li><strong>invokeWithErrorHandling函数真正执行生命周期函数</strong></li>\n</ul>\n<h4 id=\"initInjections\"><a href=\"#initInjections\" class=\"headerlink\" title=\"initInjections\"></a>initInjections</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initInjections</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"title function_\">resolveInject</span>(vm.<span class=\"property\">$options</span>.<span class=\"property\">inject</span>, vm);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(result).<span class=\"title function_\">forEach</span>(<span class=\"keyword\">function</span> (<span class=\"params\">key</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive$$1</span>(vm, key, result[key], <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;Avoid mutating an injected value directly since the changes will be &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;overwritten whenever the provided component re-renders. &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;injection being mutated: \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">defineReactive$$1</span>(vm, key, result[key]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先找到是谁provide的属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveInject</span> (inject, vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (inject) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// inject is :any because flow is not smart enough to figure out cached</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = hasSymbol</span><br><span class=\"line\">      ? <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(inject)</span><br><span class=\"line\">      : <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(inject);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">      <span class=\"comment\">// #6574 in case the inject object is observed...</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key === <span class=\"string\">&#x27;__ob__&#x27;</span>) &#123; <span class=\"keyword\">continue</span> &#125;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> provideKey = inject[key].<span class=\"property\">from</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> source = vm;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (source.<span class=\"property\">_provided</span> &amp;&amp; <span class=\"title function_\">hasOwn</span>(source.<span class=\"property\">_provided</span>, provideKey)) &#123;</span><br><span class=\"line\">          result[key] = source.<span class=\"property\">_provided</span>[provideKey];</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        source = source.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!source) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&#x27;default&#x27;</span> <span class=\"keyword\">in</span> inject[key]) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">var</span> provideDefault = inject[key].<span class=\"property\">default</span>;</span><br><span class=\"line\">          result[key] = <span class=\"keyword\">typeof</span> provideDefault === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">            ? provideDefault.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">            : provideDefault;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;Injection \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; not found&quot;</span>), vm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>找到所有inject的key值，然后遍历父组件找到对应的provide，获取表达式（值）</li>\n</ul>\n</li>\n<li><p><strong>然后对获取的inject值进行响应式处理（defineReactive$$1）</strong></p>\n</li>\n</ul>\n<h4 id=\"initState\"><a href=\"#initState\" class=\"headerlink\" title=\"initState\"></a>initState</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initState</span> (vm) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> opts = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">props</span>) &#123; <span class=\"title function_\">initProps</span>(vm, opts.<span class=\"property\">props</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">methods</span>) &#123; <span class=\"title function_\">initMethods</span>(vm, opts.<span class=\"property\">methods</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">data</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initData</span>(vm);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(vm.<span class=\"property\">_data</span> = &#123;&#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">computed</span>) &#123; <span class=\"title function_\">initComputed</span>(vm, opts.<span class=\"property\">computed</span>); &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (opts.<span class=\"property\">watch</span> &amp;&amp; opts.<span class=\"property\">watch</span> !== nativeWatch) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">initWatch</span>(vm, opts.<span class=\"property\">watch</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>initState函数中初始化了我们在option中常用的功能<ul>\n<li>父组件传值：props</li>\n<li>方法：methods</li>\n<li>数据：data</li>\n<li>计算属性：computed</li>\n<li>侦听器：watch</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"initProps\"><a href=\"#initProps\" class=\"headerlink\" title=\"initProps\"></a>initProps</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initProps</span> (vm, propsOptions) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> propsData = vm.<span class=\"property\">$options</span>.<span class=\"property\">propsData</span> || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">_props</span> = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"comment\">// cache prop keys so that future props updates can iterate using Array</span></span><br><span class=\"line\">  <span class=\"comment\">// instead of dynamic object key enumeration.</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = vm.<span class=\"property\">$options</span>.<span class=\"property\">_propKeys</span> = [];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> isRoot = !vm.<span class=\"property\">$parent</span>;</span><br><span class=\"line\">  <span class=\"comment\">// root instance props should be converted</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!isRoot) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> loop = <span class=\"keyword\">function</span> (<span class=\"params\"> key </span>) &#123;</span><br><span class=\"line\">    keys.<span class=\"title function_\">push</span>(key);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"title function_\">validateProp</span>(key, propsOptions, propsData, vm);</span><br><span class=\"line\">    <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> hyphenatedKey = <span class=\"title function_\">hyphenate</span>(key);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"title function_\">isReservedAttribute</span>(hyphenatedKey) ||</span><br><span class=\"line\">          config.<span class=\"title function_\">isReservedAttr</span>(hyphenatedKey)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;\\&quot;&quot;</span> + hyphenatedKey + <span class=\"string\">&quot;\\&quot; is a reserved attribute and cannot be used as component prop.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive$$1</span>(props, key, value, <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRoot &amp;&amp; !isUpdatingChildComponent) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">            <span class=\"string\">&quot;Avoid mutating a prop directly since the value will be &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;overwritten whenever the parent component re-renders. &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;Instead, use a data or computed property based on the prop&#x27;s &quot;</span> +</span><br><span class=\"line\">            <span class=\"string\">&quot;value. Prop being mutated: \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;&quot;</span>,</span><br><span class=\"line\">            vm</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineReactive$$1</span>(props, key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// static props are already proxied on the component&#x27;s prototype</span></span><br><span class=\"line\">    <span class=\"comment\">// during Vue.extend(). We only need to proxy props defined at</span></span><br><span class=\"line\">    <span class=\"comment\">// instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">&quot;_props&quot;</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> propsOptions) <span class=\"title function_\">loop</span>( key );</span><br><span class=\"line\">  <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>循环遍历props的值</p>\n</li>\n<li><p>validateProp函数检测props属性的值并做处理</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">validateProp</span> (</span><br><span class=\"line\">  key,</span><br><span class=\"line\">  propOptions,</span><br><span class=\"line\">  propsData,</span><br><span class=\"line\">  vm</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prop = propOptions[key];</span><br><span class=\"line\">  <span class=\"keyword\">var</span> absent = !<span class=\"title function_\">hasOwn</span>(propsData, key);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = propsData[key];</span><br><span class=\"line\">  <span class=\"comment\">// boolean casting</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> booleanIndex = <span class=\"title function_\">getTypeIndex</span>(<span class=\"title class_\">Boolean</span>, prop.<span class=\"property\">type</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (booleanIndex &gt; -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (absent &amp;&amp; !<span class=\"title function_\">hasOwn</span>(prop, <span class=\"string\">&#x27;default&#x27;</span>)) &#123;</span><br><span class=\"line\">      value = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">&#x27;&#x27;</span> || value === <span class=\"title function_\">hyphenate</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// only cast empty string / same name to boolean if</span></span><br><span class=\"line\">      <span class=\"comment\">// boolean has higher priority</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> stringIndex = <span class=\"title function_\">getTypeIndex</span>(<span class=\"title class_\">String</span>, prop.<span class=\"property\">type</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stringIndex &lt; <span class=\"number\">0</span> || booleanIndex &lt; stringIndex) &#123;</span><br><span class=\"line\">        value = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// check default value</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    value = <span class=\"title function_\">getPropDefaultValue</span>(vm, prop, key);</span><br><span class=\"line\">    <span class=\"comment\">// since the default value is a fresh copy,</span></span><br><span class=\"line\">    <span class=\"comment\">// make sure to observe it.</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> prevShouldObserve = shouldObserve;</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"title function_\">observe</span>(value);</span><br><span class=\"line\">    <span class=\"title function_\">toggleObserving</span>(prevShouldObserve);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp;</span><br><span class=\"line\">    <span class=\"comment\">// skip validation for weex recycle-list child component props</span></span><br><span class=\"line\">    !(<span class=\"literal\">false</span>)</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">assertProp</span>(prop, key, value, vm, absent);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>根据props的type处理默认值</strong></li>\n<li><strong>确保props的响应式</strong></li>\n<li><strong>验证传入的props</strong></li>\n</ul>\n</li>\n<li><p>最后进行一次响应式处理</p>\n</li>\n</ul>\n<h5 id=\"initMethods\"><a href=\"#initMethods\" class=\"headerlink\" title=\"initMethods\"></a>initMethods</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initMethods</span> (vm, methods) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> methods) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has type \\&quot;&quot;</span> + (<span class=\"keyword\">typeof</span> methods[key]) + <span class=\"string\">&quot;\\&quot; in the component definition. &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Did you reference the function correctly?&quot;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (props &amp;&amp; <span class=\"title function_\">hasOwn</span>(props, key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has already been defined as a prop.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((key <span class=\"keyword\">in</span> vm) &amp;&amp; <span class=\"title function_\">isReserved</span>(key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; conflicts with an existing Vue instance method. &quot;</span> +</span><br><span class=\"line\">          <span class=\"string\">&quot;Avoid defining component methods that start with _ or $.&quot;</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vm[key] = <span class=\"keyword\">typeof</span> methods[key] !== <span class=\"string\">&#x27;function&#x27;</span> ? noop : <span class=\"title function_\">bind</span>(methods[key], vm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>做了写简单的验证，之后通过bind函数绑定this，然后挂载到vm（Vue实例）上</li>\n</ul>\n<h5 id=\"initData\"><a href=\"#initData\" class=\"headerlink\" title=\"initData\"></a>initData</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initData</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = vm.<span class=\"property\">$options</span>.<span class=\"property\">data</span>;</span><br><span class=\"line\">  data = vm.<span class=\"property\">_data</span> = <span class=\"keyword\">typeof</span> data === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">    ? <span class=\"title function_\">getData</span>(data, vm)</span><br><span class=\"line\">    : data || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"title function_\">isPlainObject</span>(data)) &#123;</span><br><span class=\"line\">    data = &#123;&#125;;</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&#x27;data functions should return an object:\\n&#x27;</span> +</span><br><span class=\"line\">      <span class=\"string\">&#x27;https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function&#x27;</span>,</span><br><span class=\"line\">      vm</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// proxy data on instance</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> keys = <span class=\"title class_\">Object</span>.<span class=\"title function_\">keys</span>(data);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> props = vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> methods = vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = keys.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (methods &amp;&amp; <span class=\"title function_\">hasOwn</span>(methods, key)) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          (<span class=\"string\">&quot;Method \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; has already been defined as a data property.&quot;</span>),</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (props &amp;&amp; <span class=\"title function_\">hasOwn</span>(props, key)) &#123;</span><br><span class=\"line\">      process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;The data property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already declared as a prop. &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;Use prop default value instead.&quot;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!<span class=\"title function_\">isReserved</span>(key)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">proxy</span>(vm, <span class=\"string\">&quot;_data&quot;</span>, key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// observe data</span></span><br><span class=\"line\">  <span class=\"title function_\">observe</span>(data, <span class=\"literal\">true</span> <span class=\"comment\">/* asRootData */</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取data数据，如果是函数，通过getData函数获取里面的值</li>\n<li>进行一些简单的验证<ul>\n<li>方法重名、props重名、data函数没有返回plainObje</li>\n</ul>\n</li>\n<li>proxy代理<code>_data</code>属性</li>\n<li><strong>响应式处理data</strong></li>\n</ul>\n<h5 id=\"initComputed\"><a href=\"#initComputed\" class=\"headerlink\" title=\"initComputed\"></a>initComputed</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initComputed</span> (vm, computed) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// $flow-disable-line</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> watchers = vm.<span class=\"property\">_computedWatchers</span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"comment\">// computed properties are just getters during SSR</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> isSSR = <span class=\"title function_\">isServerRendering</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> computed) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> userDef = computed[key];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> getter = <span class=\"keyword\">typeof</span> userDef === <span class=\"string\">&#x27;function&#x27;</span> ? userDef : userDef.<span class=\"property\">get</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; getter == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        (<span class=\"string\">&quot;Getter is missing for computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot;.&quot;</span>),</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isSSR) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// create internal watcher for the computed property.</span></span><br><span class=\"line\">      watchers[key] = <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(</span><br><span class=\"line\">        vm,</span><br><span class=\"line\">        getter || noop,</span><br><span class=\"line\">        noop,</span><br><span class=\"line\">        computedWatcherOptions</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// component-defined computed properties are already defined on the</span></span><br><span class=\"line\">    <span class=\"comment\">// component prototype. We only need to define computed properties defined</span></span><br><span class=\"line\">    <span class=\"comment\">// at instantiation here.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(key <span class=\"keyword\">in</span> vm)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">defineComputed</span>(vm, key, userDef);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (key <span class=\"keyword\">in</span> vm.<span class=\"property\">$data</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined in data.&quot;</span>), vm);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">props</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined as a prop.&quot;</span>), vm);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span> &amp;&amp; key <span class=\"keyword\">in</span> vm.<span class=\"property\">$options</span>.<span class=\"property\">methods</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>((<span class=\"string\">&quot;The computed property \\&quot;&quot;</span> + key + <span class=\"string\">&quot;\\&quot; is already defined as a method.&quot;</span>), vm);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先创建了一个computed专用的watcher数组</li>\n<li>遍历每一个computed，同时为他们每一个创建一个watcher</li>\n<li>最后defineComputed函数则把computed挂载到vm上，内部实际使用的是watcher的方法</li>\n</ul>\n<h5 id=\"initWatch\"><a href=\"#initWatch\" class=\"headerlink\" title=\"initWatch\"></a>initWatch</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initWatch</span> (vm, watch) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> watch) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> handler = watch[key];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(handler)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; handler.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">createWatcher</span>(vm, key, handler[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">createWatcher</span>(vm, key, handler);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>遍历用户的watcher创建，内部使用<code>Vue.$watch</code>方法</li>\n<li><code>Vue.$watch</code>方法则是使用watcher（观察者实现）</li>\n</ul>\n<h4 id=\"initProvide\"><a href=\"#initProvide\" class=\"headerlink\" title=\"initProvide\"></a>initProvide</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">initProvide</span> (vm) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> provide = vm.<span class=\"property\">$options</span>.<span class=\"property\">provide</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (provide) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_provided</span> = <span class=\"keyword\">typeof</span> provide === <span class=\"string\">&#x27;function&#x27;</span></span><br><span class=\"line\">      ? provide.<span class=\"title function_\">call</span>(vm)</span><br><span class=\"line\">      : provide;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>存在provide就挂载到vm上</li>\n</ul>\n<h4 id=\"callHook-‘created’\"><a href=\"#callHook-‘created’\" class=\"headerlink\" title=\"callHook(‘created’)\"></a>callHook(‘created’)</h4><ul>\n<li>和之前的生命周期函数相同，此时调用<code>created</code>生命周期函数</li>\n</ul>\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"$mount\"></a>$mount</h3><ul>\n<li><code>_init</code>函数的最后一步（如果存在el属性）</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$mount</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el,</span></span><br><span class=\"line\"><span class=\"params\">  hydrating</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  el = el &amp;&amp; <span class=\"title function_\">query</span>(el);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (el === <span class=\"variable language_\">document</span>.<span class=\"property\">body</span> || el === <span class=\"variable language_\">document</span>.<span class=\"property\">documentElement</span>) &#123;</span><br><span class=\"line\">    process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">      <span class=\"string\">&quot;Do not mount Vue to &lt;html&gt; or &lt;body&gt; - mount to normal elements instead.&quot;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> options = <span class=\"variable language_\">this</span>.<span class=\"property\">$options</span>;</span><br><span class=\"line\">  <span class=\"comment\">// resolve template/el and convert to render function</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!options.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> template = options.<span class=\"property\">template</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> template === <span class=\"string\">&#x27;string&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (template.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) === <span class=\"string\">&#x27;#&#x27;</span>) &#123;</span><br><span class=\"line\">          template = <span class=\"title function_\">idToTemplate</span>(template);</span><br><span class=\"line\">          <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; !template) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">              (<span class=\"string\">&quot;Template element not found or is empty: &quot;</span> + (options.<span class=\"property\">template</span>)),</span><br><span class=\"line\">              <span class=\"variable language_\">this</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (template.<span class=\"property\">nodeType</span>) &#123;</span><br><span class=\"line\">        template = template.<span class=\"property\">innerHTML</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">          <span class=\"title function_\">warn</span>(<span class=\"string\">&#x27;invalid template option:&#x27;</span> + template, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (el) &#123;</span><br><span class=\"line\">      template = <span class=\"title function_\">getOuterHTML</span>(el);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (template) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">mark</span>(<span class=\"string\">&#x27;compile&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> ref = <span class=\"title function_\">compileToFunctions</span>(template, &#123;</span><br><span class=\"line\">        <span class=\"attr\">outputSourceRange</span>: process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">shouldDecodeNewlines</span>: shouldDecodeNewlines,</span><br><span class=\"line\">        <span class=\"attr\">shouldDecodeNewlinesForHref</span>: shouldDecodeNewlinesForHref,</span><br><span class=\"line\">        <span class=\"attr\">delimiters</span>: options.<span class=\"property\">delimiters</span>,</span><br><span class=\"line\">        <span class=\"attr\">comments</span>: options.<span class=\"property\">comments</span></span><br><span class=\"line\">      &#125;, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> render = ref.<span class=\"property\">render</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> staticRenderFns = ref.<span class=\"property\">staticRenderFns</span>;</span><br><span class=\"line\">      options.<span class=\"property\">render</span> = render;</span><br><span class=\"line\">      options.<span class=\"property\">staticRenderFns</span> = staticRenderFns;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">mark</span>(<span class=\"string\">&#x27;compile end&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + (<span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>) + <span class=\"string\">&quot; compile&quot;</span>), <span class=\"string\">&#x27;compile&#x27;</span>, <span class=\"string\">&#x27;compile end&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> mount.<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>首先使用<code>query</code>函数查询<code>el</code>指定的DOM节点</p>\n</li>\n<li><p><strong>然后检查<code>template</code>并将模板编译为渲染函数（render）</strong></p>\n<ul>\n<li><strong>模板编译函数：compileToFunctions</strong><ul>\n<li><strong>内部会将template处理为ast，然后转换为<code>$createElement</code>函数可以处理的VDOM，<code>$createElement</code>处理之后就会生成VNode</strong></li>\n</ul>\n</li>\n<li><strong>这也是Vue可以支持JSX写法的原因</strong></li>\n</ul>\n</li>\n<li><p>最后调用mount函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$mount</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  el,</span></span><br><span class=\"line\"><span class=\"params\">  hydrating</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? <span class=\"title function_\">query</span>(el) : <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">mountComponent</span>(<span class=\"variable language_\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意这个mount和之前的$mount函数不同</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mountComponent\"><a href=\"#mountComponent\" class=\"headerlink\" title=\"mountComponent\"></a>mountComponent</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">mountComponent</span> (</span><br><span class=\"line\">  vm,</span><br><span class=\"line\">  el,</span><br><span class=\"line\">  hydrating</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  vm.<span class=\"property\">$el</span> = el;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!vm.<span class=\"property\">$options</span>.<span class=\"property\">render</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$options</span>.<span class=\"property\">render</span> = createEmptyVNode;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((vm.<span class=\"property\">$options</span>.<span class=\"property\">template</span> &amp;&amp; vm.<span class=\"property\">$options</span>.<span class=\"property\">template</span>.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>) !== <span class=\"string\">&#x27;#&#x27;</span>) ||</span><br><span class=\"line\">        vm.<span class=\"property\">$options</span>.<span class=\"property\">el</span> || el) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;You are using the runtime-only build of Vue where the template &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;compiler is not available. Either pre-compile the templates into &#x27;</span> +</span><br><span class=\"line\">          <span class=\"string\">&#x27;render functions, or use the compiler-included build.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">          <span class=\"string\">&#x27;Failed to mount component: template or render function not defined.&#x27;</span>,</span><br><span class=\"line\">          vm</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeMount&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> updateComponent;</span><br><span class=\"line\">  <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; config.<span class=\"property\">performance</span> &amp;&amp; mark) &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> name = vm.<span class=\"property\">_name</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> id = vm.<span class=\"property\">_uid</span>;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> startTag = <span class=\"string\">&quot;vue-perf-start:&quot;</span> + id;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> endTag = <span class=\"string\">&quot;vue-perf-end:&quot;</span> + id;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(startTag);</span><br><span class=\"line\">      <span class=\"keyword\">var</span> vnode = vm.<span class=\"title function_\">_render</span>();</span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(endTag);</span><br><span class=\"line\">      <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + name + <span class=\"string\">&quot; render&quot;</span>), startTag, endTag);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(startTag);</span><br><span class=\"line\">      vm.<span class=\"title function_\">_update</span>(vnode, hydrating);</span><br><span class=\"line\">      <span class=\"title function_\">mark</span>(endTag);</span><br><span class=\"line\">      <span class=\"title function_\">measure</span>((<span class=\"string\">&quot;vue &quot;</span> + name + <span class=\"string\">&quot; patch&quot;</span>), startTag, endTag);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// we set this to vm._watcher inside the watcher&#x27;s constructor</span></span><br><span class=\"line\">  <span class=\"comment\">// since the watcher&#x27;s initial patch may call $forceUpdate (e.g. inside child</span></span><br><span class=\"line\">  <span class=\"comment\">// component&#x27;s mounted hook), which relies on vm._watcher being already defined</span></span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(vm, updateComponent, noop, &#123;</span><br><span class=\"line\">    <span class=\"attr\">before</span>: <span class=\"keyword\">function</span> <span class=\"title function_\">before</span> () &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (vm.<span class=\"property\">_isMounted</span> &amp;&amp; !vm.<span class=\"property\">_isDestroyed</span>) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;beforeUpdate&#x27;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"literal\">true</span> <span class=\"comment\">/* isRenderWatcher */</span>);</span><br><span class=\"line\">  hydrating = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// manually mounted instance, call mounted on self</span></span><br><span class=\"line\">  <span class=\"comment\">// mounted is called for render-created child components in its inserted hook</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$vnode</span> == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_isMounted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"title function_\">callHook</span>(vm, <span class=\"string\">&#x27;mounted&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> vm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先会检测option的render函数是否存在（template编译的或者JSX）</li>\n<li><strong>接着执行<code>beforeMounted</code>生命周期函数</strong></li>\n<li><strong>创建<code>updateComponent</code>函数，内部使用<code>vm._udpate(vm._render)</code></strong></li>\n<li>以<code>updateComponent</code>函数为<code>exprOrFn</code>创建watcher</li>\n<li>最后执行本组件的<code>mounted</code>生命周期函数</li>\n</ul>\n<h4 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Watcher</span> = <span class=\"keyword\">function</span> <span class=\"title function_\">Watcher</span> (</span><br><span class=\"line\">  vm,</span><br><span class=\"line\">  expOrFn,</span><br><span class=\"line\">  cb,</span><br><span class=\"line\">  options,</span><br><span class=\"line\">  isRenderWatcher</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">vm</span> = vm;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isRenderWatcher) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">_watcher</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  vm.<span class=\"property\">_watchers</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">  <span class=\"comment\">// options</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (options) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = !!options.<span class=\"property\">deep</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = !!options.<span class=\"property\">user</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = !!options.<span class=\"property\">lazy</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = !!options.<span class=\"property\">sync</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">before</span> = options.<span class=\"property\">before</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">deep</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">user</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">sync</span> = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">id</span> = ++uid$<span class=\"number\">2</span>; <span class=\"comment\">// uid for batching</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">active</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dirty</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span>; <span class=\"comment\">// for lazy watchers</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">deps</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">newDeps</span> = [];</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">depIds</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">_Set</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">newDepIds</span> = <span class=\"keyword\">new</span> <span class=\"title function_\">_Set</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">expression</span> = process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span></span><br><span class=\"line\">    ? expOrFn.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">    : <span class=\"string\">&#x27;&#x27;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// parse expression for getter</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> expOrFn === <span class=\"string\">&#x27;function&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = expOrFn;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = <span class=\"title function_\">parsePath</span>(expOrFn);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"variable language_\">this</span>.<span class=\"property\">getter</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">getter</span> = noop;</span><br><span class=\"line\">      process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;Failed watching path: \\&quot;&quot;</span> + expOrFn + <span class=\"string\">&quot;\\&quot; &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +</span><br><span class=\"line\">        <span class=\"string\">&#x27;For full control, use a function instead.&#x27;</span>,</span><br><span class=\"line\">        vm</span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">value</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">lazy</span></span><br><span class=\"line\">    ? <span class=\"literal\">undefined</span></span><br><span class=\"line\">    : <span class=\"variable language_\">this</span>.<span class=\"title function_\">get</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Watcher初始化最后会通过<code>get</code>函数获取初始值</p>\n</li>\n<li><p><strong><code>get</code>函数则是通过调用Watcher初始化的getter获取值</strong></p>\n<ul>\n<li><p>那么最后就是调用<code>mountComponent</code>函数中声明的<code>updateComponent</code>函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">updateComponent = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"title function_\">_update</span>(vm.<span class=\"title function_\">_render</span>(), hydrating);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"_render\"></a>_render</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_render</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ref = vm.<span class=\"property\">$options</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> render = ref.<span class=\"property\">render</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _parentVnode = ref.<span class=\"property\">_parentVnode</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_parentVnode) &#123;</span><br><span class=\"line\">        vm.<span class=\"property\">$scopedSlots</span> = <span class=\"title function_\">normalizeScopedSlots</span>(</span><br><span class=\"line\">            _parentVnode.<span class=\"property\">data</span>.<span class=\"property\">scopedSlots</span>,</span><br><span class=\"line\">            vm.<span class=\"property\">$slots</span>,</span><br><span class=\"line\">            vm.<span class=\"property\">$scopedSlots</span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// set parent vnode. this allows render functions to have access</span></span><br><span class=\"line\">    <span class=\"comment\">// to the data on the placeholder node.</span></span><br><span class=\"line\">    vm.<span class=\"property\">$vnode</span> = _parentVnode;</span><br><span class=\"line\">    <span class=\"comment\">// render self</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> vnode;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// There&#x27;s no need to maintain a stack because all render fns are called</span></span><br><span class=\"line\">        <span class=\"comment\">// separately from one another. Nested component&#x27;s render fns are called</span></span><br><span class=\"line\">        <span class=\"comment\">// when parent component is patched.</span></span><br><span class=\"line\">        currentRenderingInstance = vm;</span><br><span class=\"line\">        vnode = render.<span class=\"title function_\">call</span>(vm.<span class=\"property\">_renderProxy</span>, vm.<span class=\"property\">$createElement</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">&quot;render&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// return error render result,</span></span><br><span class=\"line\">        <span class=\"comment\">// or previous vnode to prevent render error causing blank component</span></span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore else */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; vm.<span class=\"property\">$options</span>.<span class=\"property\">renderError</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                vnode = vm.<span class=\"property\">$options</span>.<span class=\"property\">renderError</span>.<span class=\"title function_\">call</span>(vm.<span class=\"property\">_renderProxy</span>, vm.<span class=\"property\">$createElement</span>, e);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">handleError</span>(e, vm, <span class=\"string\">&quot;renderError&quot;</span>);</span><br><span class=\"line\">                vnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            vnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        currentRenderingInstance = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if the returned array contains only a single node, allow it</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(vnode) &amp;&amp; vnode.<span class=\"property\">length</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        vnode = vnode[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// return empty vnode in case the render function errored out</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(vnode <span class=\"keyword\">instanceof</span> <span class=\"title class_\">VNode</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; <span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(vnode)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                <span class=\"string\">&#x27;Multiple root nodes returned from render function. Render function &#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;should return a single root node.&#x27;</span>,</span><br><span class=\"line\">                vm</span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vnode = <span class=\"title function_\">createEmptyVNode</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// set parent</span></span><br><span class=\"line\">    vnode.<span class=\"property\">parent</span> = _parentVnode;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>_render</code>函数主要通过传入<code>$createElement</code>函数生成VNode，并返回</strong></li>\n</ul>\n<h4 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"_update\"></a>_update</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">_update</span> = <span class=\"keyword\">function</span> (<span class=\"params\">vnode, hydrating</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> vm = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevEl = vm.<span class=\"property\">$el</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prevVnode = vm.<span class=\"property\">_vnode</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> restoreActiveInstance = <span class=\"title function_\">setActiveInstance</span>(vm);</span><br><span class=\"line\">  vm.<span class=\"property\">_vnode</span> = vnode;</span><br><span class=\"line\">  <span class=\"comment\">// Vue.prototype.__patch__ is injected in entry points</span></span><br><span class=\"line\">  <span class=\"comment\">// based on the rendering backend used.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!prevVnode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// initial render</span></span><br><span class=\"line\">    vm.<span class=\"property\">$el</span> = vm.<span class=\"title function_\">__patch__</span>(vm.<span class=\"property\">$el</span>, vnode, hydrating, <span class=\"literal\">false</span> <span class=\"comment\">/* removeOnly */</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// updates</span></span><br><span class=\"line\">    vm.<span class=\"property\">$el</span> = vm.<span class=\"title function_\">__patch__</span>(prevVnode, vnode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">restoreActiveInstance</span>();</span><br><span class=\"line\">  <span class=\"comment\">// update __vue__ reference</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (prevEl) &#123;</span><br><span class=\"line\">    prevEl.<span class=\"property\">__vue__</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$el</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$el</span>.<span class=\"property\">__vue__</span> = vm;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// if parent is an HOC, update its $el as well</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vm.<span class=\"property\">$vnode</span> &amp;&amp; vm.<span class=\"property\">$parent</span> &amp;&amp; vm.<span class=\"property\">$vnode</span> === vm.<span class=\"property\">$parent</span>.<span class=\"property\">_vnode</span>) &#123;</span><br><span class=\"line\">    vm.<span class=\"property\">$parent</span>.<span class=\"property\">$el</span> = vm.<span class=\"property\">$el</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// updated hook is called by the scheduler to ensure that children are</span></span><br><span class=\"line\">  <span class=\"comment\">// updated in a parent&#x27;s updated hook.</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>_update</code>函数主要通过patch函数将VNode转化为实际DOM</strong></li>\n</ul>\n<h4 id=\"patch\"><a href=\"#patch\" class=\"headerlink\" title=\"patch\"></a>patch</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">patch</span> (oldVnode, vnode, hydrating, removeOnly) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(vnode)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 无新VNode，存在旧VNode，删除旧VNode即可</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldVnode)) &#123; <span class=\"title function_\">invokeDestroyHook</span>(oldVnode); &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> isInitialPatch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertedVnodeQueue = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isUndef</span>(oldVnode)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不存在旧节点，直接根据新VNode创建新节点即可</span></span><br><span class=\"line\">        <span class=\"comment\">// empty mount (likely as component), create new root element</span></span><br><span class=\"line\">        isInitialPatch = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"title function_\">createElm</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isRealElement = <span class=\"title function_\">isDef</span>(oldVnode.<span class=\"property\">nodeType</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isRealElement &amp;&amp; <span class=\"title function_\">sameVnode</span>(oldVnode, vnode)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// patch existing root node</span></span><br><span class=\"line\">            <span class=\"title function_\">patchVnode</span>(oldVnode, vnode, insertedVnodeQueue, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, removeOnly);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isRealElement) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// mounting to a real element</span></span><br><span class=\"line\">                <span class=\"comment\">// check if this is server-rendered content and if we can perform</span></span><br><span class=\"line\">                <span class=\"comment\">// a successful hydration.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (oldVnode.<span class=\"property\">nodeType</span> === <span class=\"number\">1</span> &amp;&amp; oldVnode.<span class=\"title function_\">hasAttribute</span>(<span class=\"variable constant_\">SSR_ATTR</span>)) &#123;</span><br><span class=\"line\">                    oldVnode.<span class=\"title function_\">removeAttribute</span>(<span class=\"variable constant_\">SSR_ATTR</span>);</span><br><span class=\"line\">                    hydrating = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(hydrating)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"title function_\">hydrate</span>(oldVnode, vnode, insertedVnodeQueue)) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">invokeInsertHook</span>(vnode, insertedVnodeQueue, <span class=\"literal\">true</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> oldVnode</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                            <span class=\"string\">&#x27;The client-side rendered virtual DOM tree is not matching &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;server-rendered content. This is likely caused by incorrect &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;HTML markup, for example nesting block-level elements inside &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;&lt;p&gt;, or missing &lt;tbody&gt;. Bailing hydration and performing &#x27;</span> +</span><br><span class=\"line\">                            <span class=\"string\">&#x27;full client-side render.&#x27;</span></span><br><span class=\"line\">                        );</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// either not server-rendered, or hydration failed.</span></span><br><span class=\"line\">                <span class=\"comment\">// create an empty node and replace it</span></span><br><span class=\"line\">                oldVnode = <span class=\"title function_\">emptyNodeAt</span>(oldVnode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// replacing existing element</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> oldElm = oldVnode.<span class=\"property\">elm</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> parentElm = nodeOps.<span class=\"title function_\">parentNode</span>(oldElm);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// create new node</span></span><br><span class=\"line\">            <span class=\"title function_\">createElm</span>(</span><br><span class=\"line\">                vnode,</span><br><span class=\"line\">                insertedVnodeQueue,</span><br><span class=\"line\">                <span class=\"comment\">// extremely rare edge case: do not insert if old element is in a</span></span><br><span class=\"line\">                <span class=\"comment\">// leaving transition. Only happens when combining transition +</span></span><br><span class=\"line\">                <span class=\"comment\">// keep-alive + HOCs. (#4590)</span></span><br><span class=\"line\">                oldElm.<span class=\"property\">_leaveCb</span> ? <span class=\"literal\">null</span> : parentElm,</span><br><span class=\"line\">                nodeOps.<span class=\"title function_\">nextSibling</span>(oldElm)</span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// update parent placeholder node element, recursively</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> ancestor = vnode.<span class=\"property\">parent</span>;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> patchable = <span class=\"title function_\">isPatchable</span>(vnode);</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (ancestor) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; cbs.<span class=\"property\">destroy</span>.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">                        cbs.<span class=\"property\">destroy</span>[i](ancestor);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ancestor.<span class=\"property\">elm</span> = vnode.<span class=\"property\">elm</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (patchable) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i$<span class=\"number\">1</span> = <span class=\"number\">0</span>; i$<span class=\"number\">1</span> &lt; cbs.<span class=\"property\">create</span>.<span class=\"property\">length</span>; ++i$<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            cbs.<span class=\"property\">create</span>[i$<span class=\"number\">1</span>](emptyNode, ancestor);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// #6513</span></span><br><span class=\"line\">                        <span class=\"comment\">// invoke insert hooks that may have been merged by create hooks.</span></span><br><span class=\"line\">                        <span class=\"comment\">// e.g. for directives that uses the &quot;inserted&quot; hook.</span></span><br><span class=\"line\">                        <span class=\"keyword\">var</span> insert = ancestor.<span class=\"property\">data</span>.<span class=\"property\">hook</span>.<span class=\"property\">insert</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (insert.<span class=\"property\">merged</span>) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// start at index 1 to avoid re-invoking component mounted hook</span></span><br><span class=\"line\">                            <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i$<span class=\"number\">2</span> = <span class=\"number\">1</span>; i$<span class=\"number\">2</span> &lt; insert.<span class=\"property\">fns</span>.<span class=\"property\">length</span>; i$<span class=\"number\">2</span>++) &#123;</span><br><span class=\"line\">                                insert.<span class=\"property\">fns</span>[i$<span class=\"number\">2</span>]();</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">registerRef</span>(ancestor);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    ancestor = ancestor.<span class=\"property\">parent</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// destroy old node</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(parentElm)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">removeVnodes</span>([oldVnode], <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(oldVnode.<span class=\"property\">tag</span>)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invokeDestroyHook</span>(oldVnode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">invokeInsertHook</span>(vnode, insertedVnodeQueue, isInitialPatch);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vnode.<span class=\"property\">elm</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong><code>patch</code>函数是真正更新DOM的重要函数，根据情况不同，更新方式也不同</strong></p>\n<ul>\n<li><strong><code>patchVnode</code>函数用于更新已存在的DOM，著名的DIFF算法就在其中</strong></li>\n</ul>\n</li>\n<li><p><strong><code>createElm</code>函数根据VNode创建真实DOM节点，随后插入真实DOM树</strong></p>\n<ul>\n<li><strong>前面进行一些判断简化操作，最后去除oldDOM节点</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"createElm\"><a href=\"#createElm\" class=\"headerlink\" title=\"createElm\"></a>createElm</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElm</span> (</span><br><span class=\"line\">vnode,</span><br><span class=\"line\"> insertedVnodeQueue,</span><br><span class=\"line\"> parentElm,</span><br><span class=\"line\"> refElm,</span><br><span class=\"line\"> nested,</span><br><span class=\"line\"> ownerArray,</span><br><span class=\"line\"> index</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">elm</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(ownerArray)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This vnode was used in a previous render!</span></span><br><span class=\"line\">        <span class=\"comment\">// now it&#x27;s used as a new node, overwriting its elm would cause</span></span><br><span class=\"line\">        <span class=\"comment\">// potential patch errors down the road when it&#x27;s used as an insertion</span></span><br><span class=\"line\">        <span class=\"comment\">// reference node. Instead, we clone the node on-demand before creating</span></span><br><span class=\"line\">        <span class=\"comment\">// associated DOM element for it.</span></span><br><span class=\"line\">        vnode = ownerArray[index] = <span class=\"title function_\">cloneVNode</span>(vnode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vnode.<span class=\"property\">isRootInsert</span> = !nested; <span class=\"comment\">// for transition enter check</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">createComponent</span>(vnode, insertedVnodeQueue, parentElm, refElm)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = vnode.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> children = vnode.<span class=\"property\">children</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag = vnode.<span class=\"property\">tag</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(tag)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (data &amp;&amp; data.<span class=\"property\">pre</span>) &#123;</span><br><span class=\"line\">                creatingElmInVPre++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isUnknownElement$$1</span>(vnode, creatingElmInVPre)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">warn</span>(</span><br><span class=\"line\">                    <span class=\"string\">&#x27;Unknown custom element: &lt;&#x27;</span> + tag + <span class=\"string\">&#x27;&gt; - did you &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;register the component correctly? For recursive components, &#x27;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&#x27;make sure to provide the &quot;name&quot; option.&#x27;</span>,</span><br><span class=\"line\">                    vnode.<span class=\"property\">context</span></span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = vnode.<span class=\"property\">ns</span></span><br><span class=\"line\">            ? nodeOps.<span class=\"title function_\">createElementNS</span>(vnode.<span class=\"property\">ns</span>, tag)</span><br><span class=\"line\">        : nodeOps.<span class=\"title function_\">createElement</span>(tag, vnode);</span><br><span class=\"line\">        <span class=\"title function_\">setScope</span>(vnode);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* istanbul ignore if */</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"title function_\">createChildren</span>(vnode, children, insertedVnodeQueue);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(data)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">invokeCreateHooks</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span> &amp;&amp; data &amp;&amp; data.<span class=\"property\">pre</span>) &#123;</span><br><span class=\"line\">            creatingElmInVPre--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(vnode.<span class=\"property\">isComment</span>)) &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = nodeOps.<span class=\"title function_\">createComment</span>(vnode.<span class=\"property\">text</span>);</span><br><span class=\"line\">        <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">elm</span> = nodeOps.<span class=\"title function_\">createTextNode</span>(vnode.<span class=\"property\">text</span>);</span><br><span class=\"line\">        <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>如果是组件会去使用<code>createComponent</code>函数创建组件</strong></p>\n</li>\n<li><p><strong>如果是已知的HTML标签，会直接使用<code>nodeOps.createElement</code>函数创建</strong></p>\n<ul>\n<li><p><strong><code>nodeOps.createElement</code>函数内部使用原生DOM操作</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createElement$1</span> (tagName, vnode) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> elm = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(tagName);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tagName !== <span class=\"string\">&#x27;select&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> elm</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// false or null will remove the attribute but undefined will not</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (vnode.<span class=\"property\">data</span> &amp;&amp; vnode.<span class=\"property\">data</span>.<span class=\"property\">attrs</span> &amp;&amp; vnode.<span class=\"property\">data</span>.<span class=\"property\">attrs</span>.<span class=\"property\">multiple</span> !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    elm.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;multiple&#x27;</span>, <span class=\"string\">&#x27;multiple&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> elm</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>如果存在子节点，则会调用<code>createChildren</code>函数创建子节点</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createChildren</span> (vnode, children, insertedVnodeQueue) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(children)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (process.<span class=\"property\">env</span>.<span class=\"property\">NODE_ENV</span> !== <span class=\"string\">&#x27;production&#x27;</span>) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">checkDuplicateKeys</span>(children);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; children.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">createElm</span>(children[i], insertedVnodeQueue, vnode.<span class=\"property\">elm</span>, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>, children, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"title function_\">isPrimitive</span>(vnode.<span class=\"property\">text</span>)) &#123;</span><br><span class=\"line\">        nodeOps.<span class=\"title function_\">appendChild</span>(vnode.<span class=\"property\">elm</span>, nodeOps.<span class=\"title function_\">createTextNode</span>(<span class=\"title class_\">String</span>(vnode.<span class=\"property\">text</span>)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>递归调用<code>createElm</code>函数创建子节点的真实DOM</strong></li>\n</ul>\n</li>\n<li><p><strong>如果是文本节点或注释节点，则分别使用对应的原生DOM操作去创建</strong></p>\n</li>\n<li><p><strong>创建完成之后调用<code>insert</code>函数插入父节点</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">insert</span> (parent, elm, ref$$1) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(parent)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(ref$$1)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nodeOps.<span class=\"title function_\">parentNode</span>(ref$$1) === parent) &#123;</span><br><span class=\"line\">                nodeOps.<span class=\"title function_\">insertBefore</span>(parent, elm, ref$$1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            nodeOps.<span class=\"title function_\">appendChild</span>(parent, elm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>注意此时父节点可能没有挂载到视图上（例如：根Vue），所以没有在视图上展示</strong></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"createComponent\"><a href=\"#createComponent\" class=\"headerlink\" title=\"createComponent\"></a>createComponent</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createComponent</span> (vnode, insertedVnodeQueue, parentElm, refElm) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = vnode.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> isReactivated = <span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">componentInstance</span>) &amp;&amp; i.<span class=\"property\">keepAlive</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">hook</span>) &amp;&amp; <span class=\"title function_\">isDef</span>(i = i.<span class=\"property\">init</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">i</span>(vnode, <span class=\"literal\">false</span> <span class=\"comment\">/* hydrating */</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// after calling the init hook, if the vnode is a child component</span></span><br><span class=\"line\">        <span class=\"comment\">// it should&#x27;ve created a child instance and mounted it. the child</span></span><br><span class=\"line\">        <span class=\"comment\">// component also has set the placeholder vnode&#x27;s elm.</span></span><br><span class=\"line\">        <span class=\"comment\">// in that case we can just return the element and be done.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">componentInstance</span>)) &#123;</span><br><span class=\"line\">            <span class=\"title function_\">initComponent</span>(vnode, insertedVnodeQueue);</span><br><span class=\"line\">            <span class=\"title function_\">insert</span>(parentElm, vnode.<span class=\"property\">elm</span>, refElm);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(isReactivated)) &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reactivateComponent</span>(vnode, insertedVnodeQueue, parentElm, refElm);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>组件的VNode的data存有hook函数，是由<code>render</code>函数注入的？componentOptions属性存有组件的<code>props、tag、listeners、Ctor</code>（Ctor是VueComponent函数，tag是我们定义的组件名）</p>\n</li>\n<li><p><code>init</code>hook函数如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">init</span> (vnode, hydrating) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">        vnode.<span class=\"property\">componentInstance</span> &amp;&amp;</span><br><span class=\"line\">        !vnode.<span class=\"property\">componentInstance</span>.<span class=\"property\">_isDestroyed</span> &amp;&amp;</span><br><span class=\"line\">        vnode.<span class=\"property\">data</span>.<span class=\"property\">keepAlive</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// kept-alive components, treat as a patch</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> mountedNode = vnode; <span class=\"comment\">// work around flow</span></span><br><span class=\"line\">        componentVNodeHooks.<span class=\"title function_\">prepatch</span>(mountedNode, mountedNode);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> child = vnode.<span class=\"property\">componentInstance</span> = <span class=\"title function_\">createComponentInstanceForVnode</span>(</span><br><span class=\"line\">            vnode,</span><br><span class=\"line\">            activeInstance</span><br><span class=\"line\">        );</span><br><span class=\"line\">        child.$mount(hydrating ? vnode.<span class=\"property\">elm</span> : <span class=\"literal\">undefined</span>, hydrating);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong><code>createComponentInstanceForVnode</code>函数会调用VueComponent的构造函数，最后调用Vue.__init函数</strong></li>\n<li><strong>由于没有<code>el</code>属性，子组件<code>init</code>之后就会返回<code>VueComponent</code>对象（不会自动调用<code>init</code>的$mount函数进行挂载）</strong><ul>\n<li>随后<code>init</code>函数进行手动挂载</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"invokeInsertHook\"><a href=\"#invokeInsertHook\" class=\"headerlink\" title=\"invokeInsertHook\"></a>invokeInsertHook</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">invokeInsertHook</span> (vnode, queue, initial) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// delay insert hooks for component root nodes, invoke them after the</span></span><br><span class=\"line\">    <span class=\"comment\">// element is really inserted</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title function_\">isTrue</span>(initial) &amp;&amp; <span class=\"title function_\">isDef</span>(vnode.<span class=\"property\">parent</span>)) &#123;</span><br><span class=\"line\">        vnode.<span class=\"property\">parent</span>.<span class=\"property\">data</span>.<span class=\"property\">pendingInsert</span> = queue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; queue.<span class=\"property\">length</span>; ++i) &#123;</span><br><span class=\"line\">            queue[i].<span class=\"property\">data</span>.<span class=\"property\">hook</span>.<span class=\"title function_\">insert</span>(queue[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>子组件的<code>insert</code>hook都会保留到父组件<code>patch</code>函数结尾执行</strong><ul>\n<li><strong><code>mounted</code>声明周期函数在此处执行</strong></li>\n<li><strong><code>v-model</code>指令在此处会在DOM节点上绑定相关事件，实现双向绑定</strong></li>\n</ul>\n</li>\n</ul>\n"},{"title":"一次对webpack输出文件的分析","date":"2021-05-25T09:24:34.000Z","description":"webpack（v5.37.0）输出文件分析,了解webpack打包原理","cover":"/img/cover_4.webp","_content":"## webpack 5.37.0 的输出文件分析\n\n- 入口文件\n\n  ```javascript\n  //main.js\n  import show from \"./tmp2\";\n  \n  show(123);\n  console.log(\"1111\");\n  ```\n\n- 依赖文件\n\n  ```javascript\n  //tmp2.js\n  export default function show(arg) {\n  \tconsole.log(\"show me!\");\n  \tconsole.log(`arg is ${arg}`);\n  }\n  ```\n\n- webpack.config.js\n\n  ```javascript\n  module.exports={\n      //其余配置省略\n      devtool:\"sourcce-map\"\n  }\n  ```\n\n- 输出文件\n\n  ```javascript\n  /******/ (() => { // webpackBootstrap\n  /******/ \t\"use strict\";\n  /******/ \tvar __webpack_modules__ = ({\n  \n  /***/ \"./mySrc/js/tmp2.js\":\n  /*!**************************!*\\\n    !*** ./mySrc/js/tmp2.js ***!\n    \\**************************/\n  /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n  \n  __webpack_require__.r(__webpack_exports__);\n  /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n  /* harmony export */   \"default\": () => (/* binding */ show)\n  /* harmony export */ });\n  function show(arg) {\n      console.log(\"show me!\");\n      console.log(`arg is ${arg}`);\n  }\n  \n  \n  /***/ })\n  \n  /******/ \t});\n  /************************************************************************/\n  /******/ \t// The module cache\n  /******/ \tvar __webpack_module_cache__ = {};\n  /******/ \t\n  /******/ \t// The require function\n  /******/ \tfunction __webpack_require__(moduleId) {\n  /******/ \t\t// Check if module is in cache\n  /******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n  /******/ \t\tif (cachedModule !== undefined) {\n  /******/ \t\t\treturn cachedModule.exports;\n  /******/ \t\t}\n  /******/ \t\t// Create a new module (and put it into the cache)\n  /******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n  /******/ \t\t\t// no module.id needed\n  /******/ \t\t\t// no module.loaded needed\n  /******/ \t\t\texports: {}\n  /******/ \t\t};\n  /******/ \t\n  /******/ \t\t// Execute the module function\n  /******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n  /******/ \t\n  /******/ \t\t// Return the exports of the module\n  /******/ \t\treturn module.exports;\n  /******/ \t}\n  /******/ \t\n  /************************************************************************/\n  /******/ \t/* webpack/runtime/define property getters */\n  /******/ \t(() => {\n  /******/ \t\t// define getter functions for harmony exports\n  /******/ \t\t__webpack_require__.d = (exports, definition) => {\n  /******/ \t\t\tfor(var key in definition) {\n  /******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n  /******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n  /******/ \t\t\t\t}\n  /******/ \t\t\t}\n  /******/ \t\t};\n  /******/ \t})();\n  /******/ \t\n  /******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n  /******/ \t(() => {\n  /******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n  /******/ \t})();\n  /******/ \t\n  /******/ \t/* webpack/runtime/make namespace object */\n  /******/ \t(() => {\n  /******/ \t\t// define __esModule on exports\n  /******/ \t\t__webpack_require__.r = (exports) => {\n  /******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n  /******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n  /******/ \t\t\t}\n  /******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n  /******/ \t\t};\n  /******/ \t})();\n  /******/ \t\n  /************************************************************************/\n  var __webpack_exports__ = {};\n  // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n  (() => {\n  /*!**************************!*\\\n    !*** ./mySrc/js/main.js ***!\n    \\**************************/\n  __webpack_require__.r(__webpack_exports__);\n  /* harmony import */ var _tmp2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tmp2 */ \"./mySrc/js/tmp2.js\");\n  \n  (0,_tmp2__WEBPACK_IMPORTED_MODULE_0__.default)(123);\n  console.log(\"1111\");\n  \n  })();\n  \n  /******/ })()\n  ;\n  //# sourceMappingURL=build.js.map\n  ```\n  \n  - 看不懂不要紧，看完下面的分块分析，再看看整体代码\n\n### 关键分析\n\n- 整体是一个立即执行函数（防止变量污染作用域）\n- 内部先分析定义的一些函数\n- 再分析模块数组\n- 最后分析入口模块的执行\n\n### __webpack_require\\_\\_函数\n\n```javascript\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n```\n\n- 缓存优化\n\n  ```javascript\n  var __webpack_module_cache__ = {}; //缓存数组\n  //...\n  var cachedModule = __webpack_module_cache__[moduleId]; //从缓存中找出模块\n  if (cachedModule !== undefined) {\n      return cachedModule.exports;//如果找到了就直接返回\n  }\n  ```\n\n  - 逻辑很简单的优化机制\n\n- require 模仿\n\n  ```javascript\n  function __webpack_require__(moduleId) {\n      // ...\n      // 创建一个模块\n      var module = (__webpack_module_cache__[moduleId] = {\n          //同时创建了缓存\n          exports: {},\n      });\n  \n      // 执行模块代码\n      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);//模块数组中每一个模块都是一个函数，下面会看到模块内部怎么对传入的module进行组装\n  \n      // 返回模块抛出的内容\n      return module.exports;\n  }\n  ```\n\n  - 用于在浏览器中模仿commonjs或者ES6 module\n\n### \\__webpack_require\\_\\_工具函数\n\n- hasOwnProperty 封装 \\__webpack_require\\_\\_.o\n\n  ```javascript\n  (() => {\n      __webpack_require__.o = (obj, prop) =>\n      Object.prototype.hasOwnProperty.call(obj, prop);\n  })();\n  ```\n\n  - 只是个简单的封装，功能基本不变\n\n- **定义函数 \\__webpack_require\\_\\_.d**\n\n  - 核心功能函数，成功模仿Commonjs规范，抛出了模块\n\n  ```javascript\n  (() => {\n      // 即将抛出的exports上定义代码\n      __webpack_require__.d = (exports, definition) => {//传入exports和定义\n          for (var key in definition) {\n              if (\n                  __webpack_require__.o(definition, key) &&\n                  !__webpack_require__.o(exports, key)\n              ) //上面提到的封装函数，判定属性是否存在以及是否发生覆盖\n              {\n                  Object.defineProperty(exports, key, {\n                      enumerable: true,\n                      get: definition[key],\n                  });//exports上定义getter，也就是module.exports访问时，利用get定位到模块中抛出的同名属性\n              }\n          }\n      };\n  })();\n  ```\n\n  - 结合下面的模块解析会更清晰\n\n- 标记函数 \\__webpack_require\\_\\_.r\n\n  ```javascript\n  (() => {\n      // 标记这是个模块\n      __webpack_require__.r = (exports) => {\n          if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {//Symbol.toStringTag可以修改typeof的返回值\n              Object.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\n          }\n          Object.defineProperty(exports, \"__esModule\", { value: true });//不支持Symbol的替代品\n      };\n  })();\n  ```\n\n### 模块数组\n\n- 此处只有一个依赖模块（main.js作为入口模块，webpack5不归类为模块数组）\n\n  ```javascript\n  var __webpack_modules__ = {\n      /***/ \"./mySrc/js/tmp2.js\"://本身是个键值对,键就是引用路径,值是一个函数\n      /*!**************************!*\\\n    !*** ./mySrc/js/tmp2.js ***!\n    \\**************************/\n      /***/ (\n          __unused_webpack_module,\n          __webpack_exports__,\n          __webpack_require__\n      ) => {\n          __webpack_require__.r(__webpack_exports__);//首先标记模块\n          /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n              /* harmony export */ default: () => /* binding */ show,\n              /* harmony export */\n          });//这一步利用定义函数，将本模块抛出的属性定义在module.exports上，从而使外部能够正常访问\n          //下面就是源代码\n          function show(arg) {\n              console.log(\"show me!\");\n              console.log(`arg is ${arg}`);\n          }\n  \n          /***/\n      },\n  };\n  ```\n\n### 入口模块\n\n```javascript\n(() => {\n    /*!**************************!*\\\n  !*** ./mySrc/js/main.js ***!\n  \\**************************/\n    /* harmony import */ var _tmp2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\n        /*! ./tmp2 */ \"./mySrc/js/tmp2.js\"\n    );//利用__webpack_require__函数模仿require读取了tmp2模块\n\n    (0, _tmp2__WEBPACK_IMPORTED_MODULE_0__.default)(123);//调用tmp2抛出的show函数\n    console.log(\"1111\");//入口源代码\n})();\n```\n\n- 关键是 \\__webpack_require\\_\\_ 函数成功返回了模块抛出的属性，这一点必须理解，之后的内容就很简单了\n\n\n\n\n","source":"_posts/webpackOutFileAnalyes.md","raw":"---\ntitle: 一次对webpack输出文件的分析\ndate: 2021/5/25 17:24:34\ntags:  \n- webpack\ncategories:\n- javascript\ndescription: webpack（v5.37.0）输出文件分析,了解webpack打包原理\ncover: /img/cover_4.webp\n\n---\n## webpack 5.37.0 的输出文件分析\n\n- 入口文件\n\n  ```javascript\n  //main.js\n  import show from \"./tmp2\";\n  \n  show(123);\n  console.log(\"1111\");\n  ```\n\n- 依赖文件\n\n  ```javascript\n  //tmp2.js\n  export default function show(arg) {\n  \tconsole.log(\"show me!\");\n  \tconsole.log(`arg is ${arg}`);\n  }\n  ```\n\n- webpack.config.js\n\n  ```javascript\n  module.exports={\n      //其余配置省略\n      devtool:\"sourcce-map\"\n  }\n  ```\n\n- 输出文件\n\n  ```javascript\n  /******/ (() => { // webpackBootstrap\n  /******/ \t\"use strict\";\n  /******/ \tvar __webpack_modules__ = ({\n  \n  /***/ \"./mySrc/js/tmp2.js\":\n  /*!**************************!*\\\n    !*** ./mySrc/js/tmp2.js ***!\n    \\**************************/\n  /***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n  \n  __webpack_require__.r(__webpack_exports__);\n  /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n  /* harmony export */   \"default\": () => (/* binding */ show)\n  /* harmony export */ });\n  function show(arg) {\n      console.log(\"show me!\");\n      console.log(`arg is ${arg}`);\n  }\n  \n  \n  /***/ })\n  \n  /******/ \t});\n  /************************************************************************/\n  /******/ \t// The module cache\n  /******/ \tvar __webpack_module_cache__ = {};\n  /******/ \t\n  /******/ \t// The require function\n  /******/ \tfunction __webpack_require__(moduleId) {\n  /******/ \t\t// Check if module is in cache\n  /******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n  /******/ \t\tif (cachedModule !== undefined) {\n  /******/ \t\t\treturn cachedModule.exports;\n  /******/ \t\t}\n  /******/ \t\t// Create a new module (and put it into the cache)\n  /******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n  /******/ \t\t\t// no module.id needed\n  /******/ \t\t\t// no module.loaded needed\n  /******/ \t\t\texports: {}\n  /******/ \t\t};\n  /******/ \t\n  /******/ \t\t// Execute the module function\n  /******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n  /******/ \t\n  /******/ \t\t// Return the exports of the module\n  /******/ \t\treturn module.exports;\n  /******/ \t}\n  /******/ \t\n  /************************************************************************/\n  /******/ \t/* webpack/runtime/define property getters */\n  /******/ \t(() => {\n  /******/ \t\t// define getter functions for harmony exports\n  /******/ \t\t__webpack_require__.d = (exports, definition) => {\n  /******/ \t\t\tfor(var key in definition) {\n  /******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n  /******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n  /******/ \t\t\t\t}\n  /******/ \t\t\t}\n  /******/ \t\t};\n  /******/ \t})();\n  /******/ \t\n  /******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n  /******/ \t(() => {\n  /******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n  /******/ \t})();\n  /******/ \t\n  /******/ \t/* webpack/runtime/make namespace object */\n  /******/ \t(() => {\n  /******/ \t\t// define __esModule on exports\n  /******/ \t\t__webpack_require__.r = (exports) => {\n  /******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n  /******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n  /******/ \t\t\t}\n  /******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n  /******/ \t\t};\n  /******/ \t})();\n  /******/ \t\n  /************************************************************************/\n  var __webpack_exports__ = {};\n  // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.\n  (() => {\n  /*!**************************!*\\\n    !*** ./mySrc/js/main.js ***!\n    \\**************************/\n  __webpack_require__.r(__webpack_exports__);\n  /* harmony import */ var _tmp2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tmp2 */ \"./mySrc/js/tmp2.js\");\n  \n  (0,_tmp2__WEBPACK_IMPORTED_MODULE_0__.default)(123);\n  console.log(\"1111\");\n  \n  })();\n  \n  /******/ })()\n  ;\n  //# sourceMappingURL=build.js.map\n  ```\n  \n  - 看不懂不要紧，看完下面的分块分析，再看看整体代码\n\n### 关键分析\n\n- 整体是一个立即执行函数（防止变量污染作用域）\n- 内部先分析定义的一些函数\n- 再分析模块数组\n- 最后分析入口模块的执行\n\n### __webpack_require\\_\\_函数\n\n```javascript\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n```\n\n- 缓存优化\n\n  ```javascript\n  var __webpack_module_cache__ = {}; //缓存数组\n  //...\n  var cachedModule = __webpack_module_cache__[moduleId]; //从缓存中找出模块\n  if (cachedModule !== undefined) {\n      return cachedModule.exports;//如果找到了就直接返回\n  }\n  ```\n\n  - 逻辑很简单的优化机制\n\n- require 模仿\n\n  ```javascript\n  function __webpack_require__(moduleId) {\n      // ...\n      // 创建一个模块\n      var module = (__webpack_module_cache__[moduleId] = {\n          //同时创建了缓存\n          exports: {},\n      });\n  \n      // 执行模块代码\n      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);//模块数组中每一个模块都是一个函数，下面会看到模块内部怎么对传入的module进行组装\n  \n      // 返回模块抛出的内容\n      return module.exports;\n  }\n  ```\n\n  - 用于在浏览器中模仿commonjs或者ES6 module\n\n### \\__webpack_require\\_\\_工具函数\n\n- hasOwnProperty 封装 \\__webpack_require\\_\\_.o\n\n  ```javascript\n  (() => {\n      __webpack_require__.o = (obj, prop) =>\n      Object.prototype.hasOwnProperty.call(obj, prop);\n  })();\n  ```\n\n  - 只是个简单的封装，功能基本不变\n\n- **定义函数 \\__webpack_require\\_\\_.d**\n\n  - 核心功能函数，成功模仿Commonjs规范，抛出了模块\n\n  ```javascript\n  (() => {\n      // 即将抛出的exports上定义代码\n      __webpack_require__.d = (exports, definition) => {//传入exports和定义\n          for (var key in definition) {\n              if (\n                  __webpack_require__.o(definition, key) &&\n                  !__webpack_require__.o(exports, key)\n              ) //上面提到的封装函数，判定属性是否存在以及是否发生覆盖\n              {\n                  Object.defineProperty(exports, key, {\n                      enumerable: true,\n                      get: definition[key],\n                  });//exports上定义getter，也就是module.exports访问时，利用get定位到模块中抛出的同名属性\n              }\n          }\n      };\n  })();\n  ```\n\n  - 结合下面的模块解析会更清晰\n\n- 标记函数 \\__webpack_require\\_\\_.r\n\n  ```javascript\n  (() => {\n      // 标记这是个模块\n      __webpack_require__.r = (exports) => {\n          if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {//Symbol.toStringTag可以修改typeof的返回值\n              Object.defineProperty(exports, Symbol.toStringTag, { value: \"Module\" });\n          }\n          Object.defineProperty(exports, \"__esModule\", { value: true });//不支持Symbol的替代品\n      };\n  })();\n  ```\n\n### 模块数组\n\n- 此处只有一个依赖模块（main.js作为入口模块，webpack5不归类为模块数组）\n\n  ```javascript\n  var __webpack_modules__ = {\n      /***/ \"./mySrc/js/tmp2.js\"://本身是个键值对,键就是引用路径,值是一个函数\n      /*!**************************!*\\\n    !*** ./mySrc/js/tmp2.js ***!\n    \\**************************/\n      /***/ (\n          __unused_webpack_module,\n          __webpack_exports__,\n          __webpack_require__\n      ) => {\n          __webpack_require__.r(__webpack_exports__);//首先标记模块\n          /* harmony export */ __webpack_require__.d(__webpack_exports__, {\n              /* harmony export */ default: () => /* binding */ show,\n              /* harmony export */\n          });//这一步利用定义函数，将本模块抛出的属性定义在module.exports上，从而使外部能够正常访问\n          //下面就是源代码\n          function show(arg) {\n              console.log(\"show me!\");\n              console.log(`arg is ${arg}`);\n          }\n  \n          /***/\n      },\n  };\n  ```\n\n### 入口模块\n\n```javascript\n(() => {\n    /*!**************************!*\\\n  !*** ./mySrc/js/main.js ***!\n  \\**************************/\n    /* harmony import */ var _tmp2__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(\n        /*! ./tmp2 */ \"./mySrc/js/tmp2.js\"\n    );//利用__webpack_require__函数模仿require读取了tmp2模块\n\n    (0, _tmp2__WEBPACK_IMPORTED_MODULE_0__.default)(123);//调用tmp2抛出的show函数\n    console.log(\"1111\");//入口源代码\n})();\n```\n\n- 关键是 \\__webpack_require\\_\\_ 函数成功返回了模块抛出的属性，这一点必须理解，之后的内容就很简单了\n\n\n\n\n","slug":"webpackOutFileAnalyes","published":1,"updated":"2022-04-12T07:38:26.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3ouv00091wuq8hhp0x8x","content":"<h2 id=\"webpack-5-37-0-的输出文件分析\"><a href=\"#webpack-5-37-0-的输出文件分析\" class=\"headerlink\" title=\"webpack 5.37.0 的输出文件分析\"></a>webpack 5.37.0 的输出文件分析</h2><ul>\n<li><p>入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> show <span class=\"keyword\">from</span> <span class=\"string\">&quot;./tmp2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">show</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依赖文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tmp2.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//其余配置省略</span></span><br><span class=\"line\">    <span class=\"attr\">devtool</span>:<span class=\"string\">&quot;sourcce-map&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_modules__ = (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/tmp2.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">(<span class=\"params\">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span> __webpack_require__.<span class=\"title function_\">d</span>(__webpack_exports__, &#123;</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span>   <span class=\"string\">&quot;default&quot;</span>: <span class=\"function\">() =&gt;</span> (<span class=\"comment\">/* binding */</span> show)</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.id needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.loaded needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/define property getters */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// define getter functions for harmony exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">d</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> definition) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"keyword\">if</span>(__webpack_require__.<span class=\"title function_\">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, key)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, key, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">get</span>: definition[key] &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">o</span> = <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, prop))</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/make namespace object */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// define __esModule on exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">r</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Module&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&#x27;__esModule&#x27;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/main.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);</span><br><span class=\"line\"><span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _tmp2__WEBPACK_IMPORTED_MODULE_0__ = <span class=\"title function_\">__webpack_require__</span>(<span class=\"comment\">/*! ./tmp2 */</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0</span>,_tmp2__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">default</span>)(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)()</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=build.js.map</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看不懂不要紧，看完下面的分块分析，再看看整体代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关键分析\"><a href=\"#关键分析\" class=\"headerlink\" title=\"关键分析\"></a>关键分析</h3><ul>\n<li>整体是一个立即执行函数（防止变量污染作用域）</li>\n<li>内部先分析定义的一些函数</li>\n<li>再分析模块数组</li>\n<li>最后分析入口模块的执行</li>\n</ul>\n<h3 id=\"webpack-require-函数\"><a href=\"#webpack-require-函数\" class=\"headerlink\" title=\"__webpack_require__函数\"></a>__webpack_require__函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.id needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.loaded needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>缓存优化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;; <span class=\"comment\">//缓存数组</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId]; <span class=\"comment\">//从缓存中找出模块</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;<span class=\"comment\">//如果找到了就直接返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逻辑很简单的优化机制</li>\n</ul>\n</li>\n<li><p>require 模仿</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同时创建了缓存</span></span><br><span class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行模块代码</span></span><br><span class=\"line\">    __webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);<span class=\"comment\">//模块数组中每一个模块都是一个函数，下面会看到模块内部怎么对传入的module进行组装</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回模块抛出的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用于在浏览器中模仿commonjs或者ES6 module</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"webpack-require-工具函数\"><a href=\"#webpack-require-工具函数\" class=\"headerlink\" title=\"__webpack_require__工具函数\"></a>__webpack_require__工具函数</h3><ul>\n<li><p>hasOwnProperty 封装 __webpack_require__.o</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">o</span> = <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, prop);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只是个简单的封装，功能基本不变</li>\n</ul>\n</li>\n<li><p><strong>定义函数 __webpack_require__.d</strong></p>\n<ul>\n<li>核心功能函数，成功模仿Commonjs规范，抛出了模块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 即将抛出的exports上定义代码</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">d</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span>, definition</span>) =&gt;</span> &#123;<span class=\"comment\">//传入exports和定义</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> definition) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                __webpack_require__.<span class=\"title function_\">o</span>(definition, key) &amp;&amp;</span><br><span class=\"line\">                !__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, key)</span><br><span class=\"line\">            ) <span class=\"comment\">//上面提到的封装函数，判定属性是否存在以及是否发生覆盖</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, key, &#123;</span><br><span class=\"line\">                    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">get</span>: definition[key],</span><br><span class=\"line\">                &#125;);<span class=\"comment\">//exports上定义getter，也就是module.exports访问时，利用get定位到模块中抛出的同名属性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结合下面的模块解析会更清晰</li>\n</ul>\n</li>\n<li><p>标记函数 __webpack_require__.r</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标记这是个模块</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">r</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>) &#123;<span class=\"comment\">//Symbol.toStringTag可以修改typeof的返回值</span></span><br><span class=\"line\">            <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;Module&quot;</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&quot;__esModule&quot;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);<span class=\"comment\">//不支持Symbol的替代品</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模块数组\"><a href=\"#模块数组\" class=\"headerlink\" title=\"模块数组\"></a>模块数组</h3><ul>\n<li><p>此处只有一个依赖模块（main.js作为入口模块，webpack5不归类为模块数组）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>:<span class=\"comment\">//本身是个键值对,键就是引用路径,值是一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/tmp2.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">    <span class=\"comment\">/***/</span> <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __unused_webpack_module,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __webpack_exports__,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __webpack_require__</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        __webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);<span class=\"comment\">//首先标记模块</span></span><br><span class=\"line\">        <span class=\"comment\">/* harmony export */</span> __webpack_require__.<span class=\"title function_\">d</span>(__webpack_exports__, &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* harmony export */</span> <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> <span class=\"comment\">/* binding */</span> show,</span><br><span class=\"line\">            <span class=\"comment\">/* harmony export */</span></span><br><span class=\"line\">        &#125;);<span class=\"comment\">//这一步利用定义函数，将本模块抛出的属性定义在module.exports上，从而使外部能够正常访问</span></span><br><span class=\"line\">        <span class=\"comment\">//下面就是源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/***/</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"入口模块\"><a href=\"#入口模块\" class=\"headerlink\" title=\"入口模块\"></a>入口模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/main.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _tmp2__WEBPACK_IMPORTED_MODULE_0__ = <span class=\"title function_\">__webpack_require__</span>(</span><br><span class=\"line\">        <span class=\"comment\">/*! ./tmp2 */</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span></span><br><span class=\"line\">    );<span class=\"comment\">//利用__webpack_require__函数模仿require读取了tmp2模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"number\">0</span>, _tmp2__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">default</span>)(<span class=\"number\">123</span>);<span class=\"comment\">//调用tmp2抛出的show函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);<span class=\"comment\">//入口源代码</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关键是 __webpack_require__ 函数成功返回了模块抛出的属性，这一点必须理解，之后的内容就很简单了</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"webpack-5-37-0-的输出文件分析\"><a href=\"#webpack-5-37-0-的输出文件分析\" class=\"headerlink\" title=\"webpack 5.37.0 的输出文件分析\"></a>webpack 5.37.0 的输出文件分析</h2><ul>\n<li><p>入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//main.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> show <span class=\"keyword\">from</span> <span class=\"string\">&quot;./tmp2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">show</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依赖文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tmp2.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.config.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>=&#123;</span><br><span class=\"line\">    <span class=\"comment\">//其余配置省略</span></span><br><span class=\"line\">    <span class=\"attr\">devtool</span>:<span class=\"string\">&quot;sourcce-map&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输出文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> (<span class=\"function\">() =&gt;</span> &#123; <span class=\"comment\">// webpackBootstrap</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"string\">&quot;use strict&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_modules__ = (&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>:</span><br><span class=\"line\"><span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/tmp2.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\"><span class=\"comment\">/***/</span> (<span class=\"function\">(<span class=\"params\">__unused_webpack_module, __webpack_exports__, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span> __webpack_require__.<span class=\"title function_\">d</span>(__webpack_exports__, &#123;</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span>   <span class=\"string\">&quot;default&quot;</span>: <span class=\"function\">() =&gt;</span> (<span class=\"comment\">/* binding */</span> show)</span><br><span class=\"line\"><span class=\"comment\">/* harmony export */</span> &#125;);</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/***/</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;);</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.id needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.loaded needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/define property getters */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// define getter functions for harmony exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">d</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span>, definition</span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> definition) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"keyword\">if</span>(__webpack_require__.<span class=\"title function_\">o</span>(definition, key) &amp;&amp; !__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, key)) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, key, &#123; <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>, <span class=\"attr\">get</span>: definition[key] &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">o</span> = <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, prop))</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">/* webpack/runtime/make namespace object */</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// define __esModule on exports</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_require__.<span class=\"property\">r</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> !== <span class=\"string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&#x27;Module&#x27;</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&#x27;__esModule&#x27;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;)();</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/************************************************************************/</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> __webpack_exports__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.</span></span><br><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/main.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">__webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);</span><br><span class=\"line\"><span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _tmp2__WEBPACK_IMPORTED_MODULE_0__ = <span class=\"title function_\">__webpack_require__</span>(<span class=\"comment\">/*! ./tmp2 */</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">0</span>,_tmp2__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">default</span>)(<span class=\"number\">123</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/******/</span> &#125;)()</span><br><span class=\"line\">;</span><br><span class=\"line\"><span class=\"comment\">//# sourceMappingURL=build.js.map</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>看不懂不要紧，看完下面的分块分析，再看看整体代码</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关键分析\"><a href=\"#关键分析\" class=\"headerlink\" title=\"关键分析\"></a>关键分析</h3><ul>\n<li>整体是一个立即执行函数（防止变量污染作用域）</li>\n<li>内部先分析定义的一些函数</li>\n<li>再分析模块数组</li>\n<li>最后分析入口模块的执行</li>\n</ul>\n<h3 id=\"webpack-require-函数\"><a href=\"#webpack-require-函数\" class=\"headerlink\" title=\"__webpack_require__函数\"></a>__webpack_require__函数</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The module cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"comment\">// The require function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t<span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Check if module is in cache</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Create a new module (and put it into the cache)</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.id needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"comment\">// no module.loaded needed</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t\t<span class=\"attr\">exports</span>: &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t&#125;;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Execute the module function</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t__webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"comment\">// Return the exports of the module</span></span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\"><span class=\"comment\">/******/</span> \t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>缓存优化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __webpack_module_cache__ = &#123;&#125;; <span class=\"comment\">//缓存数组</span></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId]; <span class=\"comment\">//从缓存中找出模块</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (cachedModule !== <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cachedModule.<span class=\"property\">exports</span>;<span class=\"comment\">//如果找到了就直接返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>逻辑很简单的优化机制</li>\n</ul>\n</li>\n<li><p>require 模仿</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">__webpack_require__</span>(<span class=\"params\">moduleId</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"comment\">// 创建一个模块</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> <span class=\"variable language_\">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同时创建了缓存</span></span><br><span class=\"line\">        <span class=\"attr\">exports</span>: &#123;&#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 执行模块代码</span></span><br><span class=\"line\">    __webpack_modules__[moduleId](<span class=\"variable language_\">module</span>, <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>, __webpack_require__);<span class=\"comment\">//模块数组中每一个模块都是一个函数，下面会看到模块内部怎么对传入的module进行组装</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 返回模块抛出的内容</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">module</span>.<span class=\"property\">exports</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用于在浏览器中模仿commonjs或者ES6 module</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"webpack-require-工具函数\"><a href=\"#webpack-require-工具函数\" class=\"headerlink\" title=\"__webpack_require__工具函数\"></a>__webpack_require__工具函数</h3><ul>\n<li><p>hasOwnProperty 封装 __webpack_require__.o</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">o</span> = <span class=\"function\">(<span class=\"params\">obj, prop</span>) =&gt;</span></span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(obj, prop);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只是个简单的封装，功能基本不变</li>\n</ul>\n</li>\n<li><p><strong>定义函数 __webpack_require__.d</strong></p>\n<ul>\n<li>核心功能函数，成功模仿Commonjs规范，抛出了模块</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 即将抛出的exports上定义代码</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">d</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span>, definition</span>) =&gt;</span> &#123;<span class=\"comment\">//传入exports和定义</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> definition) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (</span><br><span class=\"line\">                __webpack_require__.<span class=\"title function_\">o</span>(definition, key) &amp;&amp;</span><br><span class=\"line\">                !__webpack_require__.<span class=\"title function_\">o</span>(<span class=\"built_in\">exports</span>, key)</span><br><span class=\"line\">            ) <span class=\"comment\">//上面提到的封装函数，判定属性是否存在以及是否发生覆盖</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, key, &#123;</span><br><span class=\"line\">                    <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">get</span>: definition[key],</span><br><span class=\"line\">                &#125;);<span class=\"comment\">//exports上定义getter，也就是module.exports访问时，利用get定位到模块中抛出的同名属性</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结合下面的模块解析会更清晰</li>\n</ul>\n</li>\n<li><p>标记函数 __webpack_require__.r</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 标记这是个模块</span></span><br><span class=\"line\">    __webpack_require__.<span class=\"property\">r</span> = <span class=\"function\">(<span class=\"params\"><span class=\"built_in\">exports</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"title class_\">Symbol</span> !== <span class=\"string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>) &#123;<span class=\"comment\">//Symbol.toStringTag可以修改typeof的返回值</span></span><br><span class=\"line\">            <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"title class_\">Symbol</span>.<span class=\"property\">toStringTag</span>, &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;Module&quot;</span> &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(<span class=\"built_in\">exports</span>, <span class=\"string\">&quot;__esModule&quot;</span>, &#123; <span class=\"attr\">value</span>: <span class=\"literal\">true</span> &#125;);<span class=\"comment\">//不支持Symbol的替代品</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"模块数组\"><a href=\"#模块数组\" class=\"headerlink\" title=\"模块数组\"></a>模块数组</h3><ul>\n<li><p>此处只有一个依赖模块（main.js作为入口模块，webpack5不归类为模块数组）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> __webpack_modules__ = &#123;</span><br><span class=\"line\">    <span class=\"comment\">/***/</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span>:<span class=\"comment\">//本身是个键值对,键就是引用路径,值是一个函数</span></span><br><span class=\"line\">    <span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/tmp2.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">    <span class=\"comment\">/***/</span> <span class=\"function\">(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __unused_webpack_module,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __webpack_exports__,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">        __webpack_require__</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">    </span>) =&gt;</span> &#123;</span><br><span class=\"line\">        __webpack_require__.<span class=\"title function_\">r</span>(__webpack_exports__);<span class=\"comment\">//首先标记模块</span></span><br><span class=\"line\">        <span class=\"comment\">/* harmony export */</span> __webpack_require__.<span class=\"title function_\">d</span>(__webpack_exports__, &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* harmony export */</span> <span class=\"attr\">default</span>: <span class=\"function\">() =&gt;</span> <span class=\"comment\">/* binding */</span> show,</span><br><span class=\"line\">            <span class=\"comment\">/* harmony export */</span></span><br><span class=\"line\">        &#125;);<span class=\"comment\">//这一步利用定义函数，将本模块抛出的属性定义在module.exports上，从而使外部能够正常访问</span></span><br><span class=\"line\">        <span class=\"comment\">//下面就是源代码</span></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">show</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;show me!&quot;</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`arg is <span class=\"subst\">$&#123;arg&#125;</span>`</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/***/</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"入口模块\"><a href=\"#入口模块\" class=\"headerlink\" title=\"入口模块\"></a>入口模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*!**************************!*\\</span></span><br><span class=\"line\"><span class=\"comment\">  !*** ./mySrc/js/main.js ***!</span></span><br><span class=\"line\"><span class=\"comment\">  \\**************************/</span></span><br><span class=\"line\">    <span class=\"comment\">/* harmony import */</span> <span class=\"keyword\">var</span> _tmp2__WEBPACK_IMPORTED_MODULE_0__ = <span class=\"title function_\">__webpack_require__</span>(</span><br><span class=\"line\">        <span class=\"comment\">/*! ./tmp2 */</span> <span class=\"string\">&quot;./mySrc/js/tmp2.js&quot;</span></span><br><span class=\"line\">    );<span class=\"comment\">//利用__webpack_require__函数模仿require读取了tmp2模块</span></span><br><span class=\"line\"></span><br><span class=\"line\">    (<span class=\"number\">0</span>, _tmp2__WEBPACK_IMPORTED_MODULE_0__.<span class=\"property\">default</span>)(<span class=\"number\">123</span>);<span class=\"comment\">//调用tmp2抛出的show函数</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;1111&quot;</span>);<span class=\"comment\">//入口源代码</span></span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关键是 __webpack_require__ 函数成功返回了模块抛出的属性，这一点必须理解，之后的内容就很简单了</li>\n</ul>\n"},{"title":"Vue响应式原理的简单探索","date":"2021-06-04T01:06:01.000Z","comments":1,"description":"Vue响应式原理的实现原理，以及用JavaScript书写一个简单的响应式数据","cover":"/img/cover_2.webp","top_image":"https://pic2.zhimg.com/v2-db7221c0d7ca752b2f88d7ca94939976_1440w.jpg?source=172ae18b","_content":"## 引入\n\n_Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统_——Vue官方文档\n\n- 第一个例子（只保留核心代码）\n\n  ```html\n  <div id=\"app\">\n    {{ message }}\n  </div>\n  \n  <script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n      message: 'Hello Vue!'\n    }\n  })\n  </script>\n  ```\n\n  - 之后在页面上会看见`Hello Vue!`，而且**数据是具有响应式的**，也就是说修改`app.message`，页面上的值也会发生变化\n  - 下面来分析如何简单实现`Vue`的响应式\n\n## 分析\n\n### 数据渲染\n\n- 先思考怎么把数据渲染到视图上，一般我们的方法都是通过JavaScript操作DOM，例如\n\n  ```javascript\n  let msg = '123';\n  document.querySelector('#app').innerHTML = msg;\n  ```\n\n  效果如下：\n\n  ![](1.png)\n\n- 之后修改变量时，想要修改视图，明显需要继续利用JavaScript操作DOM，**重复的操作明显可以使用函数封装**，可以先把JavaScript修改DOM的操作封装为一个函数，然后在适当地时候调用即可，例如\n\n  ```javascript\n  let msg = '123';\n  update();\n  //异步操作效果更清晰\n  setTimeout(() => {\n      msg = '456';\n      update();\n  }, 1000);\n  //update函数\n  function update() {\n      document.querySelector('#app').innerHTML = msg;\n  }\n  ```\n\n效果如下（1秒后数据变化，DOM也变化）：\n\n![](2.gif)\n\n### 数据劫持\n\n- 那我们想做到变量`msg`变化，视图就变化（Vue所做到的），该怎么办呢？答案很清晰使用某种办法，**在`msg`变化之后立即调用`update`函数，那么这里就要使用数据劫持**\n\n#### getter和setter\n\n- 在JavaScript的属性描述符中有这两种特殊的描述符`setter`和`getter`，它们的作用如下\n\n  ```javascript\n  let obj = {\n      _a: 1\n  }\n  Object.defineProperty(obj, 'a', {\n      get() {\n          return this._a\n      },\n      set(val) {\n          this._a = val\n      }\n  })\n  ```\n\n  效果如下：\n\n  ![](3.gif)\n\n  - 可以看到`setter`和`getter`代理了`obj._a`（**ES6提出了`Proxy`来规范代理同时也是Vue3数据劫持所采用的方案**）\n\n### 实现同步更新\n\n- 利用属性描述符，我们就可以做到数据和视图同步更新\n\n  ```javascript\n  //data数据\n  let data = {\n      _msg: ''\n  };\n  //数据劫持\n  Object.defineProperty(data, 'msg', {\n      set(val) {\n          this._msg = val;\n          //数据更新完成后更新视图\n          update();\n      },\n      get() {\n          return this._msg;\n      }\n  })\n  \n  function update() {\n      document.querySelector('#app').innerHTML = data.msg;\n  }\n  \n  //测试代码\n  data.msg = '123';\n  setTimeout(() => {\n      data.msg = '456'\n  }, 1000);\n  ```\n\n  效果如下：\n\n  ![](4.gif)\n\n  - 至此最基础简单的响应式就完成了\n\n### 依赖收集\n\n- 由于数据可能会和其他数据产生互动，可能渲染到多个组件中，确保它的正确渲染Vue采用了观察者模式设计了依赖收集机制\n\n- 订阅者（简化版）\n\n  ```javascript\n  class Dep {\n      constructor() {\n          this.subs = [];//订阅数组\n      }\n      addSub(watcher) {\n          this.subs.push(watcher)//添加一个watcher\n      }\n      notify() {\n          this.subs.forEach((watcher) => {\n              watcher.update()//执行所有watcher的update\n          })\n      }\n  }\n  ```\n\n  - 订阅者收集所有watcher，并在合适的时候通知所有watcher更新视图\n\n- 观察者（简化版）\n\n  ```javascript\n  class Watcher {\n      constructor(obj, key, cb) {\n          Dep.target = this;//确保Dep的对象是这个watcher\n          this.val = obj[key];//获取值，主要为了触发getter\n          this.obj = obj;\n          this.key = key;\n          this.cb = cb;//更新逻辑\n          Dep.target = null//防止watcher重复\n      }\n      update() {\n          this.val = this.obj[this.key];//获取最新的值\n          this.cb(this.val)//根据回调函数的逻辑更新视图\n      }\n  }\n  ```\n\n  - 注意每个watcher的构造函数实例化调用一次，触发一次getter，则每个watcher都可以负责一个值的视图更新逻辑\n\n- 数据劫持（简化版）\n\n  ```javascript\n  let dep = new Dep();\n  for (const key in data) {//遍历data，劫持每一个属性\n      if (Object.hasOwnProperty.call(data, key)) {//确保在data上\n          let value = data[key];//获取原值\n          Object.defineProperty(data, key, {\n              get() {\n                  if (Dep.target) {//配合watcher的构造函数\n                      dep.addSub(Dep.target)\n                  }\n                  return value\n              },\n              set(val) {\n                  value = val;\n                  dep.notify();//值发生了变化，通知所有watcher进行更新\n              }\n          })\n      }\n  }\n  //生成观察者\n  new Watcher(data, 'pri1', (val) => {\n      //pri1的更新逻辑\n      document.querySelector('.pri1').innerHTML = 'pri1:' + val;\n      document.querySelector('.total').innerHTML = 'total:' + (val + data.pri2);\n  })\n  new Watcher(data, 'pri2', (val) => {\n      //pri2的更新逻辑\n      document.querySelector('.pri2').innerHTML = 'pri2:' + val;\n      document.querySelector('.total').innerHTML = 'total:' + (val + data.pri1)\n  })\n  ```\n\n  - 实际Vue当中不会一个一个手动生成watcher，会根据表达式推断视图更新逻辑\n\n  效果如下：\n\n  ![](5.gif)\n\n- 至此Vue响应式最基础的原理就差不多了，但Vue对此做了很多优化以匹配很多机制\n","source":"_posts/vueReactive.md","raw":"---\ntitle: Vue响应式原理的简单探索\ndate: 2021-6-4 09:06:01\ncomments: true\ntags:\n- Vue\ncategories:\n- Vue\ndescription: Vue响应式原理的实现原理，以及用JavaScript书写一个简单的响应式数据\ncover: /img/cover_2.webp\ntop_image: https://pic2.zhimg.com/v2-db7221c0d7ca752b2f88d7ca94939976_1440w.jpg?source=172ae18b\n\n---\n## 引入\n\n_Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统_——Vue官方文档\n\n- 第一个例子（只保留核心代码）\n\n  ```html\n  <div id=\"app\">\n    {{ message }}\n  </div>\n  \n  <script>\n  var app = new Vue({\n    el: '#app',\n    data: {\n      message: 'Hello Vue!'\n    }\n  })\n  </script>\n  ```\n\n  - 之后在页面上会看见`Hello Vue!`，而且**数据是具有响应式的**，也就是说修改`app.message`，页面上的值也会发生变化\n  - 下面来分析如何简单实现`Vue`的响应式\n\n## 分析\n\n### 数据渲染\n\n- 先思考怎么把数据渲染到视图上，一般我们的方法都是通过JavaScript操作DOM，例如\n\n  ```javascript\n  let msg = '123';\n  document.querySelector('#app').innerHTML = msg;\n  ```\n\n  效果如下：\n\n  ![](1.png)\n\n- 之后修改变量时，想要修改视图，明显需要继续利用JavaScript操作DOM，**重复的操作明显可以使用函数封装**，可以先把JavaScript修改DOM的操作封装为一个函数，然后在适当地时候调用即可，例如\n\n  ```javascript\n  let msg = '123';\n  update();\n  //异步操作效果更清晰\n  setTimeout(() => {\n      msg = '456';\n      update();\n  }, 1000);\n  //update函数\n  function update() {\n      document.querySelector('#app').innerHTML = msg;\n  }\n  ```\n\n效果如下（1秒后数据变化，DOM也变化）：\n\n![](2.gif)\n\n### 数据劫持\n\n- 那我们想做到变量`msg`变化，视图就变化（Vue所做到的），该怎么办呢？答案很清晰使用某种办法，**在`msg`变化之后立即调用`update`函数，那么这里就要使用数据劫持**\n\n#### getter和setter\n\n- 在JavaScript的属性描述符中有这两种特殊的描述符`setter`和`getter`，它们的作用如下\n\n  ```javascript\n  let obj = {\n      _a: 1\n  }\n  Object.defineProperty(obj, 'a', {\n      get() {\n          return this._a\n      },\n      set(val) {\n          this._a = val\n      }\n  })\n  ```\n\n  效果如下：\n\n  ![](3.gif)\n\n  - 可以看到`setter`和`getter`代理了`obj._a`（**ES6提出了`Proxy`来规范代理同时也是Vue3数据劫持所采用的方案**）\n\n### 实现同步更新\n\n- 利用属性描述符，我们就可以做到数据和视图同步更新\n\n  ```javascript\n  //data数据\n  let data = {\n      _msg: ''\n  };\n  //数据劫持\n  Object.defineProperty(data, 'msg', {\n      set(val) {\n          this._msg = val;\n          //数据更新完成后更新视图\n          update();\n      },\n      get() {\n          return this._msg;\n      }\n  })\n  \n  function update() {\n      document.querySelector('#app').innerHTML = data.msg;\n  }\n  \n  //测试代码\n  data.msg = '123';\n  setTimeout(() => {\n      data.msg = '456'\n  }, 1000);\n  ```\n\n  效果如下：\n\n  ![](4.gif)\n\n  - 至此最基础简单的响应式就完成了\n\n### 依赖收集\n\n- 由于数据可能会和其他数据产生互动，可能渲染到多个组件中，确保它的正确渲染Vue采用了观察者模式设计了依赖收集机制\n\n- 订阅者（简化版）\n\n  ```javascript\n  class Dep {\n      constructor() {\n          this.subs = [];//订阅数组\n      }\n      addSub(watcher) {\n          this.subs.push(watcher)//添加一个watcher\n      }\n      notify() {\n          this.subs.forEach((watcher) => {\n              watcher.update()//执行所有watcher的update\n          })\n      }\n  }\n  ```\n\n  - 订阅者收集所有watcher，并在合适的时候通知所有watcher更新视图\n\n- 观察者（简化版）\n\n  ```javascript\n  class Watcher {\n      constructor(obj, key, cb) {\n          Dep.target = this;//确保Dep的对象是这个watcher\n          this.val = obj[key];//获取值，主要为了触发getter\n          this.obj = obj;\n          this.key = key;\n          this.cb = cb;//更新逻辑\n          Dep.target = null//防止watcher重复\n      }\n      update() {\n          this.val = this.obj[this.key];//获取最新的值\n          this.cb(this.val)//根据回调函数的逻辑更新视图\n      }\n  }\n  ```\n\n  - 注意每个watcher的构造函数实例化调用一次，触发一次getter，则每个watcher都可以负责一个值的视图更新逻辑\n\n- 数据劫持（简化版）\n\n  ```javascript\n  let dep = new Dep();\n  for (const key in data) {//遍历data，劫持每一个属性\n      if (Object.hasOwnProperty.call(data, key)) {//确保在data上\n          let value = data[key];//获取原值\n          Object.defineProperty(data, key, {\n              get() {\n                  if (Dep.target) {//配合watcher的构造函数\n                      dep.addSub(Dep.target)\n                  }\n                  return value\n              },\n              set(val) {\n                  value = val;\n                  dep.notify();//值发生了变化，通知所有watcher进行更新\n              }\n          })\n      }\n  }\n  //生成观察者\n  new Watcher(data, 'pri1', (val) => {\n      //pri1的更新逻辑\n      document.querySelector('.pri1').innerHTML = 'pri1:' + val;\n      document.querySelector('.total').innerHTML = 'total:' + (val + data.pri2);\n  })\n  new Watcher(data, 'pri2', (val) => {\n      //pri2的更新逻辑\n      document.querySelector('.pri2').innerHTML = 'pri2:' + val;\n      document.querySelector('.total').innerHTML = 'total:' + (val + data.pri1)\n  })\n  ```\n\n  - 实际Vue当中不会一个一个手动生成watcher，会根据表达式推断视图更新逻辑\n\n  效果如下：\n\n  ![](5.gif)\n\n- 至此Vue响应式最基础的原理就差不多了，但Vue对此做了很多优化以匹配很多机制\n","slug":"vueReactive","published":1,"updated":"2022-04-12T07:38:30.024Z","layout":"post","photos":[],"link":"","_id":"cl1xc3ouw000a1wuqf9p84d1l","content":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>_Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统_——Vue官方文档</p>\n<ul>\n<li><p>第一个例子（只保留核心代码）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello Vue!&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>之后在页面上会看见<code>Hello Vue!</code>，而且<strong>数据是具有响应式的</strong>，也就是说修改<code>app.message</code>，页面上的值也会发生变化</li>\n<li>下面来分析如何简单实现<code>Vue</code>的响应式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数据渲染\"><a href=\"#数据渲染\" class=\"headerlink\" title=\"数据渲染\"></a>数据渲染</h3><ul>\n<li><p>先思考怎么把数据渲染到视图上，一般我们的方法都是通过JavaScript操作DOM，例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = msg;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/1.png\"></p>\n</li>\n<li><p>之后修改变量时，想要修改视图，明显需要继续利用JavaScript操作DOM，<strong>重复的操作明显可以使用函数封装</strong>，可以先把JavaScript修改DOM的操作封装为一个函数，然后在适当地时候调用即可，例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">update</span>();</span><br><span class=\"line\"><span class=\"comment\">//异步操作效果更清晰</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    msg = <span class=\"string\">&#x27;456&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">//update函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>效果如下（1秒后数据变化，DOM也变化）：</p>\n<p><img src=\"/2.gif\"></p>\n<h3 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h3><ul>\n<li>那我们想做到变量<code>msg</code>变化，视图就变化（Vue所做到的），该怎么办呢？答案很清晰使用某种办法，<strong>在<code>msg</code>变化之后立即调用<code>update</code>函数，那么这里就要使用数据劫持</strong></li>\n</ul>\n<h4 id=\"getter和setter\"><a href=\"#getter和setter\" class=\"headerlink\" title=\"getter和setter\"></a>getter和setter</h4><ul>\n<li><p>在JavaScript的属性描述符中有这两种特殊的描述符<code>setter</code>和<code>getter</code>，它们的作用如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_a</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_a</span> = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/3.gif\"></p>\n<ul>\n<li>可以看到<code>setter</code>和<code>getter</code>代理了<code>obj._a</code>（<strong>ES6提出了<code>Proxy</code>来规范代理同时也是Vue3数据劫持所采用的方案</strong>）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现同步更新\"><a href=\"#实现同步更新\" class=\"headerlink\" title=\"实现同步更新\"></a>实现同步更新</h3><ul>\n<li><p>利用属性描述符，我们就可以做到数据和视图同步更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//data数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_msg</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//数据劫持</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, <span class=\"string\">&#x27;msg&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_msg</span> = val;</span><br><span class=\"line\">        <span class=\"comment\">//数据更新完成后更新视图</span></span><br><span class=\"line\">        <span class=\"title function_\">update</span>();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_msg</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = data.<span class=\"property\">msg</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\">data.<span class=\"property\">msg</span> = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    data.<span class=\"property\">msg</span> = <span class=\"string\">&#x27;456&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/4.gif\"></p>\n<ul>\n<li>至此最基础简单的响应式就完成了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"依赖收集\"><a href=\"#依赖收集\" class=\"headerlink\" title=\"依赖收集\"></a>依赖收集</h3><ul>\n<li><p>由于数据可能会和其他数据产生互动，可能渲染到多个组件中，确保它的正确渲染Vue采用了观察者模式设计了依赖收集机制</p>\n</li>\n<li><p>订阅者（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];<span class=\"comment\">//订阅数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">addSub</span>(<span class=\"params\">watcher</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(watcher)<span class=\"comment\">//添加一个watcher</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            watcher.<span class=\"title function_\">update</span>()<span class=\"comment\">//执行所有watcher的update</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>订阅者收集所有watcher，并在合适的时候通知所有watcher更新视图</li>\n</ul>\n</li>\n<li><p>观察者（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">obj, key, cb</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span>;<span class=\"comment\">//确保Dep的对象是这个watcher</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = obj[key];<span class=\"comment\">//获取值，主要为了触发getter</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span> = obj;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb;<span class=\"comment\">//更新逻辑</span></span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span><span class=\"comment\">//防止watcher重复</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">key</span>];<span class=\"comment\">//获取最新的值</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>)<span class=\"comment\">//根据回调函数的逻辑更新视图</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意每个watcher的构造函数实例化调用一次，触发一次getter，则每个watcher都可以负责一个值的视图更新逻辑</li>\n</ul>\n</li>\n<li><p>数据劫持（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> data) &#123;<span class=\"comment\">//遍历data，劫持每一个属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(data, key)) &#123;<span class=\"comment\">//确保在data上</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = data[key];<span class=\"comment\">//获取原值</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;<span class=\"comment\">//配合watcher的构造函数</span></span><br><span class=\"line\">                    dep.<span class=\"title function_\">addSub</span>(<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                value = val;</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>();<span class=\"comment\">//值发生了变化，通知所有watcher进行更新</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成观察者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(data, <span class=\"string\">&#x27;pri1&#x27;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//pri1的更新逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.pri1&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;pri1:&#x27;</span> + val;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.total&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;total:&#x27;</span> + (val + data.<span class=\"property\">pri2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(data, <span class=\"string\">&#x27;pri2&#x27;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//pri2的更新逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.pri2&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;pri2:&#x27;</span> + val;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.total&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;total:&#x27;</span> + (val + data.<span class=\"property\">pri1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实际Vue当中不会一个一个手动生成watcher，会根据表达式推断视图更新逻辑</li>\n</ul>\n<p>效果如下：</p>\n<p><img src=\"/5.gif\"></p>\n</li>\n<li><p>至此Vue响应式最基础的原理就差不多了，但Vue对此做了很多优化以匹配很多机制</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>_Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统_——Vue官方文档</p>\n<ul>\n<li><p>第一个例子（只保留核心代码）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">el</span>: <span class=\"string\">&#x27;#app&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Hello Vue!&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>之后在页面上会看见<code>Hello Vue!</code>，而且<strong>数据是具有响应式的</strong>，也就是说修改<code>app.message</code>，页面上的值也会发生变化</li>\n<li>下面来分析如何简单实现<code>Vue</code>的响应式</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><h3 id=\"数据渲染\"><a href=\"#数据渲染\" class=\"headerlink\" title=\"数据渲染\"></a>数据渲染</h3><ul>\n<li><p>先思考怎么把数据渲染到视图上，一般我们的方法都是通过JavaScript操作DOM，例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = msg;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/1.png\"></p>\n</li>\n<li><p>之后修改变量时，想要修改视图，明显需要继续利用JavaScript操作DOM，<strong>重复的操作明显可以使用函数封装</strong>，可以先把JavaScript修改DOM的操作封装为一个函数，然后在适当地时候调用即可，例如</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> msg = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"title function_\">update</span>();</span><br><span class=\"line\"><span class=\"comment\">//异步操作效果更清晰</span></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    msg = <span class=\"string\">&#x27;456&#x27;</span>;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">//update函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = msg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>效果如下（1秒后数据变化，DOM也变化）：</p>\n<p><img src=\"/2.gif\"></p>\n<h3 id=\"数据劫持\"><a href=\"#数据劫持\" class=\"headerlink\" title=\"数据劫持\"></a>数据劫持</h3><ul>\n<li>那我们想做到变量<code>msg</code>变化，视图就变化（Vue所做到的），该怎么办呢？答案很清晰使用某种办法，<strong>在<code>msg</code>变化之后立即调用<code>update</code>函数，那么这里就要使用数据劫持</strong></li>\n</ul>\n<h4 id=\"getter和setter\"><a href=\"#getter和setter\" class=\"headerlink\" title=\"getter和setter\"></a>getter和setter</h4><ul>\n<li><p>在JavaScript的属性描述符中有这两种特殊的描述符<code>setter</code>和<code>getter</code>，它们的作用如下</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_a</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, <span class=\"string\">&#x27;a&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_a</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_a</span> = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/3.gif\"></p>\n<ul>\n<li>可以看到<code>setter</code>和<code>getter</code>代理了<code>obj._a</code>（<strong>ES6提出了<code>Proxy</code>来规范代理同时也是Vue3数据劫持所采用的方案</strong>）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"实现同步更新\"><a href=\"#实现同步更新\" class=\"headerlink\" title=\"实现同步更新\"></a>实现同步更新</h3><ul>\n<li><p>利用属性描述符，我们就可以做到数据和视图同步更新</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//data数据</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data = &#123;</span><br><span class=\"line\">    <span class=\"attr\">_msg</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//数据劫持</span></span><br><span class=\"line\"><span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, <span class=\"string\">&#x27;msg&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">_msg</span> = val;</span><br><span class=\"line\">        <span class=\"comment\">//数据更新完成后更新视图</span></span><br><span class=\"line\">        <span class=\"title function_\">update</span>();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_msg</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;#app&#x27;</span>).<span class=\"property\">innerHTML</span> = data.<span class=\"property\">msg</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//测试代码</span></span><br><span class=\"line\">data.<span class=\"property\">msg</span> = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    data.<span class=\"property\">msg</span> = <span class=\"string\">&#x27;456&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"/4.gif\"></p>\n<ul>\n<li>至此最基础简单的响应式就完成了</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"依赖收集\"><a href=\"#依赖收集\" class=\"headerlink\" title=\"依赖收集\"></a>依赖收集</h3><ul>\n<li><p>由于数据可能会和其他数据产生互动，可能渲染到多个组件中，确保它的正确渲染Vue采用了观察者模式设计了依赖收集机制</p>\n</li>\n<li><p>订阅者（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dep</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span> = [];<span class=\"comment\">//订阅数组</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">addSub</span>(<span class=\"params\">watcher</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">push</span>(watcher)<span class=\"comment\">//添加一个watcher</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">notify</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">subs</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">watcher</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            watcher.<span class=\"title function_\">update</span>()<span class=\"comment\">//执行所有watcher的update</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>订阅者收集所有watcher，并在合适的时候通知所有watcher更新视图</li>\n</ul>\n</li>\n<li><p>观察者（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Watcher</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">obj, key, cb</span>) &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"variable language_\">this</span>;<span class=\"comment\">//确保Dep的对象是这个watcher</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = obj[key];<span class=\"comment\">//获取值，主要为了触发getter</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span> = obj;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">key</span> = key;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">cb</span> = cb;<span class=\"comment\">//更新逻辑</span></span><br><span class=\"line\">        <span class=\"title class_\">Dep</span>.<span class=\"property\">target</span> = <span class=\"literal\">null</span><span class=\"comment\">//防止watcher重复</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">update</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">obj</span>[<span class=\"variable language_\">this</span>.<span class=\"property\">key</span>];<span class=\"comment\">//获取最新的值</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">cb</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>)<span class=\"comment\">//根据回调函数的逻辑更新视图</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注意每个watcher的构造函数实例化调用一次，触发一次getter，则每个watcher都可以负责一个值的视图更新逻辑</li>\n</ul>\n</li>\n<li><p>数据劫持（简化版）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dep = <span class=\"keyword\">new</span> <span class=\"title class_\">Dep</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">in</span> data) &#123;<span class=\"comment\">//遍历data，劫持每一个属性</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\">hasOwnProperty</span>.<span class=\"title function_\">call</span>(data, key)) &#123;<span class=\"comment\">//确保在data上</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> value = data[key];<span class=\"comment\">//获取原值</span></span><br><span class=\"line\">        <span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(data, key, &#123;</span><br><span class=\"line\">            <span class=\"title function_\">get</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>) &#123;<span class=\"comment\">//配合watcher的构造函数</span></span><br><span class=\"line\">                    dep.<span class=\"title function_\">addSub</span>(<span class=\"title class_\">Dep</span>.<span class=\"property\">target</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> value</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"title function_\">set</span>(<span class=\"params\">val</span>) &#123;</span><br><span class=\"line\">                value = val;</span><br><span class=\"line\">                dep.<span class=\"title function_\">notify</span>();<span class=\"comment\">//值发生了变化，通知所有watcher进行更新</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//生成观察者</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(data, <span class=\"string\">&#x27;pri1&#x27;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//pri1的更新逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.pri1&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;pri1:&#x27;</span> + val;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.total&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;total:&#x27;</span> + (val + data.<span class=\"property\">pri2</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Watcher</span>(data, <span class=\"string\">&#x27;pri2&#x27;</span>, <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//pri2的更新逻辑</span></span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.pri2&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;pri2:&#x27;</span> + val;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(<span class=\"string\">&#x27;.total&#x27;</span>).<span class=\"property\">innerHTML</span> = <span class=\"string\">&#x27;total:&#x27;</span> + (val + data.<span class=\"property\">pri1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>实际Vue当中不会一个一个手动生成watcher，会根据表达式推断视图更新逻辑</li>\n</ul>\n<p>效果如下：</p>\n<p><img src=\"/5.gif\"></p>\n</li>\n<li><p>至此Vue响应式最基础的原理就差不多了，但Vue对此做了很多优化以匹配很多机制</p>\n</li>\n</ul>\n"},{"title":"手动实现一个简单的Promise","date":"2021-05-19T04:26:11.000Z","description":"手动实现ES6的Promise的简化版，重点是理解并实现Promise的链式调用","cover":"img/cover_3.webp","_content":"- 自定义的promise\n\n  ```javascript\n  function myPromise(fn) {\n      this.state = 'pending'; //记录状态，只有三种可能pending resolved rejected\n      this.val = null; //promise携带值\n      this.onResolvedCallback = []; //待调用的回调函数，pending状态下调用then时需要 \n      this.onRejectedCallback = [];\n  \n      this.resolve = (val) => {\n          if (this.state === 'pending') { //保证状态确定后不会改变\n              this.state = 'resolved';\n              this.val = val;\n              //状态变化后，取出所有待调用的回调函数，进行处理。例如：then的第一个回调函数\n              for (let i = 0; i < this.onResolvedCallback.length; i++) {\n                  this.onResolvedCallback[i](val);\n              }\n          }\n      }\n  \n      this.reject = (reason) => {\n          if (this.state === 'pending') { //保证状态确定后不会改变\n              this.state = 'rejected';\n              this.val = reason;\n              //和resolve类似\n              for (let i = 0; i < this.onRejectedCallback.length; i++) {\n                  this.onRejectedCallback[i](reason);\n              }\n          }\n      }\n  \n      this.then = (resolveFn, rejectFn) => {\n          //promise值穿透，并保证默认处理函数\n          resolveFn = typeof resolveFn === 'function' ? resolveFn : function (v) { return v };\n          rejectFn = typeof rejectFn === 'function' ? rejectFn : function (r) { return r };\n  \n          if (this.state === 'resolved') { //调用then时状态是resolved\n              return new myPromise((resolve, reject) => { //then永远返回一个promise，用于链式调用\n                  try { //try捕获错误，用来reject\n                      let next = resolveFn(this.val); //调用用户自定义的resolve处理函数，把值传出去，并获取用户返回的值\n                      if (next instanceof myPromise) { //resolve处理函数返回的是promise时，调用then解包\n                          next.then(resolve, reject)\n                          //注意，此处将外部（then函数定义）即将返回的promise的resolve传入了用户自定义的resolve处理函数返回的promise中，当用户的promise状态改变时，就会调用此处的resolve并将值传给外部的promise，从而可以使用最外部的then接收，构成返回 new promise 的promise链式调用\n                      }\n                      else {\n                          resolve(next) //否则直接resolve用户传进来的值\n                      }\n                  } catch (e) {\n                      rejectFn(e)\n                  }\n              })\n          }\n  \n          if (this.state === 'rejected') { //reject的状态，逻辑和上面差不多\n              return new myPromise((resolve, reject) => {\n                  try {\n                      let next = rejectFn(this.val);\n                      if (next instanceof myPromise) {\n                          next.then(resolve, reject)\n                      }\n                  } catch (e) {\n                      rejectFn(e)\n                  }\n              })\n          }\n  \n          if (this.state === 'pending') { //调用then时，状态未确定\n              return new myPromise((resolve, reject) => {\n                  //由于状态未确定，先把状态确定时要执行的逻辑保存起来，等到状态确定时，执行\n                  this.onResolvedCallback.push(function (val) { //resolved逻辑保存\n                      try {\n                          let next = resolveFn(val);\n                          if (next instanceof myPromise) {\n                              next.then(resolve, reject)\n                          };\n                          resolve(next);\n                      } catch (e) {\n                          reject(e)\n                      }\n                  })\n  \n                  this.onRejectedCallback.push(function (reason) { //reject逻辑保存\n                      try {\n                          let next = rejectFn(reason);\n                          if (next instanceof myPromise) {\n                              next.then(resolve, reject)\n                          }\n                          reject(next)\n                      } catch (e) {\n                          reject(e)\n                      }\n                  })\n              })\n          }\n      }\n  \n      try { //尝试执行promise构造函数的代码，并将自身定义好的resolve,reject传入\n          fn(this.resolve, this.reject);\n      } catch (e) {\n          this.reject(e)\n      }\n  }\n  ```\n  \n  测试样例\n  \n  ```javascript\n  new myPromise((resolve, reject) => {\n      resolve(1)\n  }).then((val) => {\n      console.log(val);\n      return new myPromise((resolve) => {\n          setTimeout(() => {\n              resolve(2)\n          }, 1000);\n      })\n  }).then((val) => {\n      console.log(val);\n  })\n  ```\n  \n  + 异步throw无法捕获\n  + 通过this定义函数，导致每个promise实例不共用方法，性能影响\n  \n- all,race手写\n\n  ```javascript\n  Promise.myAll = (promiseArr) => {\n      return new Promise((resolve, reject) => {\n          let count = 0, all = promiseArr.length;\n          let resArr = [];\n          for (let i = 0; i < all; i++) {\n              promiseArr[i].then((val) => {\n                  count++;\n                  resArr[i] = val;\n                  if (count === all) { //主要通过promise数量确定是否结束\n                      resolve(resArr)\n                  }\n              }, (err) => {\n                  reject(err)\n              })\n          }\n      })\n  }\n  ```\n\n  ```javascript\n  //race更简单 待会写....\n  ```\n\n  \n","source":"_posts/wirteMyPromise.md","raw":"---\ntitle: 手动实现一个简单的Promise\ndate: 2021-05-19 12:26:11\ntags: \n - javascript\n - promise\ncategories:\n - javascript\ndescription: 手动实现ES6的Promise的简化版，重点是理解并实现Promise的链式调用\ncover: img/cover_3.webp\n\n---\n- 自定义的promise\n\n  ```javascript\n  function myPromise(fn) {\n      this.state = 'pending'; //记录状态，只有三种可能pending resolved rejected\n      this.val = null; //promise携带值\n      this.onResolvedCallback = []; //待调用的回调函数，pending状态下调用then时需要 \n      this.onRejectedCallback = [];\n  \n      this.resolve = (val) => {\n          if (this.state === 'pending') { //保证状态确定后不会改变\n              this.state = 'resolved';\n              this.val = val;\n              //状态变化后，取出所有待调用的回调函数，进行处理。例如：then的第一个回调函数\n              for (let i = 0; i < this.onResolvedCallback.length; i++) {\n                  this.onResolvedCallback[i](val);\n              }\n          }\n      }\n  \n      this.reject = (reason) => {\n          if (this.state === 'pending') { //保证状态确定后不会改变\n              this.state = 'rejected';\n              this.val = reason;\n              //和resolve类似\n              for (let i = 0; i < this.onRejectedCallback.length; i++) {\n                  this.onRejectedCallback[i](reason);\n              }\n          }\n      }\n  \n      this.then = (resolveFn, rejectFn) => {\n          //promise值穿透，并保证默认处理函数\n          resolveFn = typeof resolveFn === 'function' ? resolveFn : function (v) { return v };\n          rejectFn = typeof rejectFn === 'function' ? rejectFn : function (r) { return r };\n  \n          if (this.state === 'resolved') { //调用then时状态是resolved\n              return new myPromise((resolve, reject) => { //then永远返回一个promise，用于链式调用\n                  try { //try捕获错误，用来reject\n                      let next = resolveFn(this.val); //调用用户自定义的resolve处理函数，把值传出去，并获取用户返回的值\n                      if (next instanceof myPromise) { //resolve处理函数返回的是promise时，调用then解包\n                          next.then(resolve, reject)\n                          //注意，此处将外部（then函数定义）即将返回的promise的resolve传入了用户自定义的resolve处理函数返回的promise中，当用户的promise状态改变时，就会调用此处的resolve并将值传给外部的promise，从而可以使用最外部的then接收，构成返回 new promise 的promise链式调用\n                      }\n                      else {\n                          resolve(next) //否则直接resolve用户传进来的值\n                      }\n                  } catch (e) {\n                      rejectFn(e)\n                  }\n              })\n          }\n  \n          if (this.state === 'rejected') { //reject的状态，逻辑和上面差不多\n              return new myPromise((resolve, reject) => {\n                  try {\n                      let next = rejectFn(this.val);\n                      if (next instanceof myPromise) {\n                          next.then(resolve, reject)\n                      }\n                  } catch (e) {\n                      rejectFn(e)\n                  }\n              })\n          }\n  \n          if (this.state === 'pending') { //调用then时，状态未确定\n              return new myPromise((resolve, reject) => {\n                  //由于状态未确定，先把状态确定时要执行的逻辑保存起来，等到状态确定时，执行\n                  this.onResolvedCallback.push(function (val) { //resolved逻辑保存\n                      try {\n                          let next = resolveFn(val);\n                          if (next instanceof myPromise) {\n                              next.then(resolve, reject)\n                          };\n                          resolve(next);\n                      } catch (e) {\n                          reject(e)\n                      }\n                  })\n  \n                  this.onRejectedCallback.push(function (reason) { //reject逻辑保存\n                      try {\n                          let next = rejectFn(reason);\n                          if (next instanceof myPromise) {\n                              next.then(resolve, reject)\n                          }\n                          reject(next)\n                      } catch (e) {\n                          reject(e)\n                      }\n                  })\n              })\n          }\n      }\n  \n      try { //尝试执行promise构造函数的代码，并将自身定义好的resolve,reject传入\n          fn(this.resolve, this.reject);\n      } catch (e) {\n          this.reject(e)\n      }\n  }\n  ```\n  \n  测试样例\n  \n  ```javascript\n  new myPromise((resolve, reject) => {\n      resolve(1)\n  }).then((val) => {\n      console.log(val);\n      return new myPromise((resolve) => {\n          setTimeout(() => {\n              resolve(2)\n          }, 1000);\n      })\n  }).then((val) => {\n      console.log(val);\n  })\n  ```\n  \n  + 异步throw无法捕获\n  + 通过this定义函数，导致每个promise实例不共用方法，性能影响\n  \n- all,race手写\n\n  ```javascript\n  Promise.myAll = (promiseArr) => {\n      return new Promise((resolve, reject) => {\n          let count = 0, all = promiseArr.length;\n          let resArr = [];\n          for (let i = 0; i < all; i++) {\n              promiseArr[i].then((val) => {\n                  count++;\n                  resArr[i] = val;\n                  if (count === all) { //主要通过promise数量确定是否结束\n                      resolve(resArr)\n                  }\n              }, (err) => {\n                  reject(err)\n              })\n          }\n      })\n  }\n  ```\n\n  ```javascript\n  //race更简单 待会写....\n  ```\n\n  \n","slug":"wirteMyPromise","published":1,"updated":"2022-04-12T07:38:30.642Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3ouy000e1wuqhg9530l2","content":"<ul>\n<li><p>自定义的promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myPromise</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;pending&#x27;</span>; <span class=\"comment\">//记录状态，只有三种可能pending resolved rejected</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = <span class=\"literal\">null</span>; <span class=\"comment\">//promise携带值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span> = []; <span class=\"comment\">//待调用的回调函数，pending状态下调用then时需要 </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//保证状态确定后不会改变</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;resolved&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">            <span class=\"comment\">//状态变化后，取出所有待调用的回调函数，进行处理。例如：then的第一个回调函数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>[i](val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//保证状态确定后不会改变</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = reason;</span><br><span class=\"line\">            <span class=\"comment\">//和resolve类似</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">then</span> = <span class=\"function\">(<span class=\"params\">resolveFn, rejectFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//promise值穿透，并保证默认处理函数</span></span><br><span class=\"line\">        resolveFn = <span class=\"keyword\">typeof</span> resolveFn === <span class=\"string\">&#x27;function&#x27;</span> ? resolveFn : <span class=\"keyword\">function</span> (<span class=\"params\">v</span>) &#123; <span class=\"keyword\">return</span> v &#125;;</span><br><span class=\"line\">        rejectFn = <span class=\"keyword\">typeof</span> rejectFn === <span class=\"string\">&#x27;function&#x27;</span> ? rejectFn : <span class=\"keyword\">function</span> (<span class=\"params\">r</span>) &#123; <span class=\"keyword\">return</span> r &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123; <span class=\"comment\">//调用then时状态是resolved</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">//then永远返回一个promise，用于链式调用</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//try捕获错误，用来reject</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> next = <span class=\"title function_\">resolveFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>); <span class=\"comment\">//调用用户自定义的resolve处理函数，把值传出去，并获取用户返回的值</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123; <span class=\"comment\">//resolve处理函数返回的是promise时，调用then解包</span></span><br><span class=\"line\">                        next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        <span class=\"comment\">//注意，此处将外部（then函数定义）即将返回的promise的resolve传入了用户自定义的resolve处理函数返回的promise中，当用户的promise状态改变时，就会调用此处的resolve并将值传给外部的promise，从而可以使用最外部的then接收，构成返回 new promise 的promise链式调用</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(next) <span class=\"comment\">//否则直接resolve用户传进来的值</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rejectFn</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123; <span class=\"comment\">//reject的状态，逻辑和上面差不多</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> next = <span class=\"title function_\">rejectFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                        next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rejectFn</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//调用then时，状态未确定</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//由于状态未确定，先把状态确定时要执行的逻辑保存起来，等到状态确定时，执行</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123; <span class=\"comment\">//resolved逻辑保存</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> next = <span class=\"title function_\">resolveFn</span>(val);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                            next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(next);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) &#123; <span class=\"comment\">//reject逻辑保存</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> next = <span class=\"title function_\">rejectFn</span>(reason);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                            next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(next)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//尝试执行promise构造函数的代码，并将自身定义好的resolve,reject传入</span></span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试样例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>异步throw无法捕获</li>\n<li>通过this定义函数，导致每个promise实例不共用方法，性能影响</li>\n</ul>\n</li>\n<li><p>all,race手写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">myAll</span> = <span class=\"function\">(<span class=\"params\">promiseArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>, all = promiseArr.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> resArr = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; all; i++) &#123;</span><br><span class=\"line\">            promiseArr[i].<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                resArr[i] = val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count === all) &#123; <span class=\"comment\">//主要通过promise数量确定是否结束</span></span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(resArr)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//race更简单 待会写....</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>自定义的promise</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myPromise</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;pending&#x27;</span>; <span class=\"comment\">//记录状态，只有三种可能pending resolved rejected</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = <span class=\"literal\">null</span>; <span class=\"comment\">//promise携带值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span> = []; <span class=\"comment\">//待调用的回调函数，pending状态下调用then时需要 </span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span> = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span> = <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//保证状态确定后不会改变</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;resolved&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = val;</span><br><span class=\"line\">            <span class=\"comment\">//状态变化后，取出所有待调用的回调函数，进行处理。例如：then的第一个回调函数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>[i](val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span> = <span class=\"function\">(<span class=\"params\">reason</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//保证状态确定后不会改变</span></span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = <span class=\"string\">&#x27;rejected&#x27;</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">val</span> = reason;</span><br><span class=\"line\">            <span class=\"comment\">//和resolve类似</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>[i](reason);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">then</span> = <span class=\"function\">(<span class=\"params\">resolveFn, rejectFn</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//promise值穿透，并保证默认处理函数</span></span><br><span class=\"line\">        resolveFn = <span class=\"keyword\">typeof</span> resolveFn === <span class=\"string\">&#x27;function&#x27;</span> ? resolveFn : <span class=\"keyword\">function</span> (<span class=\"params\">v</span>) &#123; <span class=\"keyword\">return</span> v &#125;;</span><br><span class=\"line\">        rejectFn = <span class=\"keyword\">typeof</span> rejectFn === <span class=\"string\">&#x27;function&#x27;</span> ? rejectFn : <span class=\"keyword\">function</span> (<span class=\"params\">r</span>) &#123; <span class=\"keyword\">return</span> r &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;resolved&#x27;</span>) &#123; <span class=\"comment\">//调用then时状态是resolved</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">//then永远返回一个promise，用于链式调用</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//try捕获错误，用来reject</span></span><br><span class=\"line\">                    <span class=\"keyword\">let</span> next = <span class=\"title function_\">resolveFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>); <span class=\"comment\">//调用用户自定义的resolve处理函数，把值传出去，并获取用户返回的值</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123; <span class=\"comment\">//resolve处理函数返回的是promise时，调用then解包</span></span><br><span class=\"line\">                        next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        <span class=\"comment\">//注意，此处将外部（then函数定义）即将返回的promise的resolve传入了用户自定义的resolve处理函数返回的promise中，当用户的promise状态改变时，就会调用此处的resolve并将值传给外部的promise，从而可以使用最外部的then接收，构成返回 new promise 的promise链式调用</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(next) <span class=\"comment\">//否则直接resolve用户传进来的值</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rejectFn</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;rejected&#x27;</span>) &#123; <span class=\"comment\">//reject的状态，逻辑和上面差不多</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">let</span> next = <span class=\"title function_\">rejectFn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">val</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                        next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                    <span class=\"title function_\">rejectFn</span>(e)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">state</span> === <span class=\"string\">&#x27;pending&#x27;</span>) &#123; <span class=\"comment\">//调用then时，状态未确定</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//由于状态未确定，先把状态确定时要执行的逻辑保存起来，等到状态确定时，执行</span></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onResolvedCallback</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\">val</span>) &#123; <span class=\"comment\">//resolved逻辑保存</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> next = <span class=\"title function_\">resolveFn</span>(val);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                            next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        &#125;;</span><br><span class=\"line\">                        <span class=\"title function_\">resolve</span>(next);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">onRejectedCallback</span>.<span class=\"title function_\">push</span>(<span class=\"keyword\">function</span> (<span class=\"params\">reason</span>) &#123; <span class=\"comment\">//reject逻辑保存</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">let</span> next = <span class=\"title function_\">rejectFn</span>(reason);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (next <span class=\"keyword\">instanceof</span> myPromise) &#123;</span><br><span class=\"line\">                            next.<span class=\"title function_\">then</span>(resolve, reject)</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(next)</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">                        <span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123; <span class=\"comment\">//尝试执行promise构造函数的代码，并将自身定义好的resolve,reject传入</span></span><br><span class=\"line\">        <span class=\"title function_\">fn</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">resolve</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">reject</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">reject</span>(e)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试样例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">myPromise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"title function_\">resolve</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(val);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>异步throw无法捕获</li>\n<li>通过this定义函数，导致每个promise实例不共用方法，性能影响</li>\n</ul>\n</li>\n<li><p>all,race手写</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title class_\">Promise</span>.<span class=\"property\">myAll</span> = <span class=\"function\">(<span class=\"params\">promiseArr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>, all = promiseArr.<span class=\"property\">length</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> resArr = [];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; all; i++) &#123;</span><br><span class=\"line\">            promiseArr[i].<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">                resArr[i] = val;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (count === all) &#123; <span class=\"comment\">//主要通过promise数量确定是否结束</span></span><br><span class=\"line\">                    <span class=\"title function_\">resolve</span>(resArr)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                <span class=\"title function_\">reject</span>(err)</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//race更简单 待会写....</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"手动实现一个简单的async","date":"2021-05-31T08:30:00.000Z","description":"async的出现宣告了ECMAscript对Promise+Generator异步编程的标准支持，可它背后的原理是什么呢？","cover":"/img/cover_1.webp","_content":"\n## 基本概念\n\n- **async函数只是promise+generator函数的语法糖**\n  - 具体可见《你不懂的JavaScript》中卷\n\n- promise+generator函数可以使用同步计划书写异步逻辑，更符合人类习惯去书写异步代码\n  - **async函数进一步简化了上述代码**\n\n## 手写源码连接\n\n[来自晨曦时梦见兮大佬](https://juejin.cn/post/6844904102053281806)\n\n## 使用示例\n\n```javascript\nconst getData = () => new Promise(resolve => setTimeout(() => resolve(\"data\"), 1000))\n\nasync function test() {\n  const data = await getData()\n  console.log('data: ', data);\n  const data2 = await getData()\n  console.log('data2: ', data2);\n  return 'success'\n}\n\n// 这样的一个函数 应该再1秒后打印data 再过一秒打印data2 最后打印success\ntest().then(res => console.log(res))\n```\n\n代码效果\n\n![](1.gif)\n\n- 可以看到使用async函数，await标识出异步代码，js执行时就会在进行异步阻塞，整个async函数会停止下来\n  - 关于async函数具体使用见[阮一峰大佬的教学](https://es6.ruanyifeng.com/#docs/async)\n\n## 实现思路\n\n### generator函数形式\n\n```javascript\nconst getData = () =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"haha\");\n    }, 1000);\n  });\n\nfunction* testG() {\n  const data = yield getData();\n  console.log(\"data:\", data);\n  const data2 = yield getData();\n  console.log(\"data2:\", data2);\n  return \"success\";\n}\n```\n\n- getData函数不变\n- **test函数async使用generator函数标识符*代替，所有await使用yield代替**\n\n### 手动实现\n\n```javascript\nvar gen = testG()//获取迭代器实例\n\nvar dataPromise = gen.next()//获取第一个promise\n\ndataPromise.then((value1) => {\n    // data1的value被拿到了 继续调用next并且传递给data 并获取第二个promise\n    var data2Promise = gen.next(value1)\n    \n    // console.log('data: ', data);\n    // 此时就会打印出data\n    \n    data2Promise.value.then((value2) => {\n        // data2的value拿到了 继续调用next并且传递value2\n         gen.next(value2)\n         \n        // console.log('data2: ', data2);\n        // 此时就会打印出data2\n    })\n})\n```\n\n- 手动调用generator函数，实现异步操作\n\n### 利用高阶函数实现自动执行\n\n- 期望的终极形态\n\n  ```javascript\n  asyncToGenerator(testG).then((res) => console.log(res));\n  //传入一个生成器函数，asyncToGenerator函数会自动执行完，并返回一个promise\n  ```\n\n  - 那么asyncToGenerator函数最后应该返回一个promise\n\n- **连续的promise调用**\n\n  ```javascript\n  function* testG() {\n    const data = yield getData();\n    console.log(\"data:\", data);\n    const data2 = yield getData();\n    console.log(\"data2:\", data2);\n    return \"success\";\n  }\n  ```\n\n  - generator函数可能存在多个promise，需要一步一步自己调用解包\n\n  - 怎么重复调用是重点，而解决思路是找到链式调用的节点\n\n  ```javascript\n  //retPromise就是generator函数返回的promise\n  retPromise.then((res)=>{\n      //it就是迭代器 即在一个promise状态确定后，根据状态进行下一步。例如resolve下，应该将值返回去，接受下一个promise\n      it.next(res);\n  })\n  ```\n\n  - 将这里的逻辑抽离出来形成函数，然后在合适的时间调用即可\n\n- 最终实现的代码\n\n  ```javascript\n  function asyncToGenerator(generatorFunc) {\n    //获取generator函数的迭代器\n    let it = generatorFunc();\n    //返回一个新的promise\n    return new Promise((resolve, reject) => {\n      //step函数用于调用下一个promise\n      //key为迭代器运行方式，val为迭代器要传递进去的参数\n      function step(key, val) {\n        //generator函数返回的value，由于try属于特殊的上下文，变量需要定义在外部\n        let retPromise;\n  \n        try {\n          retPromise = it[key](val); //迭代器运行\n        } catch (e) {\n          return reject(e); //出错直接由外部捕获\n        }\n  \n        const { value, done } = retPromise; //从generator函数返回的值\n        //value即是promise,done用于确定迭代器是否迭代完毕\n  \n        if (done) {\n          //如果迭代完毕了，直接向外部抛出最后的值\n          return resolve(value);\n        } else {\n          //如果没有，调用generator函数返回的promise，注册then事件\n          return value.then(\n            (val) => {\n              //generator函数返回的promise变为resolve时，把获取的值传入step函数，并指示迭代器进行下一步\n              step(\"next\", val);\n            },\n            (err) => {\n              //逻辑同上\n              step(\"throw\", err);\n            }\n          );\n        }\n      }\n      //开始迭代，第一个不需要参数，直接下一步即可\n      step(\"next\");\n    });\n  }\n  ```\n\n- 最终效果\n\n  ![](2.gif)\n\n--\n\n","source":"_posts/wirteMyAsync.md","raw":"---\ntitle: 手动实现一个简单的async\ndate: 2021-5-31 16:30:00\ncategories:\n- javascript\ntags:\n- javascript\n- async\ndescription: async的出现宣告了ECMAscript对Promise+Generator异步编程的标准支持，可它背后的原理是什么呢？\ncover: /img/cover_1.webp\n\n---\n\n## 基本概念\n\n- **async函数只是promise+generator函数的语法糖**\n  - 具体可见《你不懂的JavaScript》中卷\n\n- promise+generator函数可以使用同步计划书写异步逻辑，更符合人类习惯去书写异步代码\n  - **async函数进一步简化了上述代码**\n\n## 手写源码连接\n\n[来自晨曦时梦见兮大佬](https://juejin.cn/post/6844904102053281806)\n\n## 使用示例\n\n```javascript\nconst getData = () => new Promise(resolve => setTimeout(() => resolve(\"data\"), 1000))\n\nasync function test() {\n  const data = await getData()\n  console.log('data: ', data);\n  const data2 = await getData()\n  console.log('data2: ', data2);\n  return 'success'\n}\n\n// 这样的一个函数 应该再1秒后打印data 再过一秒打印data2 最后打印success\ntest().then(res => console.log(res))\n```\n\n代码效果\n\n![](1.gif)\n\n- 可以看到使用async函数，await标识出异步代码，js执行时就会在进行异步阻塞，整个async函数会停止下来\n  - 关于async函数具体使用见[阮一峰大佬的教学](https://es6.ruanyifeng.com/#docs/async)\n\n## 实现思路\n\n### generator函数形式\n\n```javascript\nconst getData = () =>\n  new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(\"haha\");\n    }, 1000);\n  });\n\nfunction* testG() {\n  const data = yield getData();\n  console.log(\"data:\", data);\n  const data2 = yield getData();\n  console.log(\"data2:\", data2);\n  return \"success\";\n}\n```\n\n- getData函数不变\n- **test函数async使用generator函数标识符*代替，所有await使用yield代替**\n\n### 手动实现\n\n```javascript\nvar gen = testG()//获取迭代器实例\n\nvar dataPromise = gen.next()//获取第一个promise\n\ndataPromise.then((value1) => {\n    // data1的value被拿到了 继续调用next并且传递给data 并获取第二个promise\n    var data2Promise = gen.next(value1)\n    \n    // console.log('data: ', data);\n    // 此时就会打印出data\n    \n    data2Promise.value.then((value2) => {\n        // data2的value拿到了 继续调用next并且传递value2\n         gen.next(value2)\n         \n        // console.log('data2: ', data2);\n        // 此时就会打印出data2\n    })\n})\n```\n\n- 手动调用generator函数，实现异步操作\n\n### 利用高阶函数实现自动执行\n\n- 期望的终极形态\n\n  ```javascript\n  asyncToGenerator(testG).then((res) => console.log(res));\n  //传入一个生成器函数，asyncToGenerator函数会自动执行完，并返回一个promise\n  ```\n\n  - 那么asyncToGenerator函数最后应该返回一个promise\n\n- **连续的promise调用**\n\n  ```javascript\n  function* testG() {\n    const data = yield getData();\n    console.log(\"data:\", data);\n    const data2 = yield getData();\n    console.log(\"data2:\", data2);\n    return \"success\";\n  }\n  ```\n\n  - generator函数可能存在多个promise，需要一步一步自己调用解包\n\n  - 怎么重复调用是重点，而解决思路是找到链式调用的节点\n\n  ```javascript\n  //retPromise就是generator函数返回的promise\n  retPromise.then((res)=>{\n      //it就是迭代器 即在一个promise状态确定后，根据状态进行下一步。例如resolve下，应该将值返回去，接受下一个promise\n      it.next(res);\n  })\n  ```\n\n  - 将这里的逻辑抽离出来形成函数，然后在合适的时间调用即可\n\n- 最终实现的代码\n\n  ```javascript\n  function asyncToGenerator(generatorFunc) {\n    //获取generator函数的迭代器\n    let it = generatorFunc();\n    //返回一个新的promise\n    return new Promise((resolve, reject) => {\n      //step函数用于调用下一个promise\n      //key为迭代器运行方式，val为迭代器要传递进去的参数\n      function step(key, val) {\n        //generator函数返回的value，由于try属于特殊的上下文，变量需要定义在外部\n        let retPromise;\n  \n        try {\n          retPromise = it[key](val); //迭代器运行\n        } catch (e) {\n          return reject(e); //出错直接由外部捕获\n        }\n  \n        const { value, done } = retPromise; //从generator函数返回的值\n        //value即是promise,done用于确定迭代器是否迭代完毕\n  \n        if (done) {\n          //如果迭代完毕了，直接向外部抛出最后的值\n          return resolve(value);\n        } else {\n          //如果没有，调用generator函数返回的promise，注册then事件\n          return value.then(\n            (val) => {\n              //generator函数返回的promise变为resolve时，把获取的值传入step函数，并指示迭代器进行下一步\n              step(\"next\", val);\n            },\n            (err) => {\n              //逻辑同上\n              step(\"throw\", err);\n            }\n          );\n        }\n      }\n      //开始迭代，第一个不需要参数，直接下一步即可\n      step(\"next\");\n    });\n  }\n  ```\n\n- 最终效果\n\n  ![](2.gif)\n\n--\n\n","slug":"wirteMyAsync","published":1,"updated":"2022-04-12T07:38:29.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl1xc3ouz000f1wuqdewk4az0","content":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p><strong>async函数只是promise+generator函数的语法糖</strong></p>\n<ul>\n<li>具体可见《你不懂的JavaScript》中卷</li>\n</ul>\n</li>\n<li><p>promise+generator函数可以使用同步计划书写异步逻辑，更符合人类习惯去书写异步代码</p>\n<ul>\n<li><strong>async函数进一步简化了上述代码</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"手写源码连接\"><a href=\"#手写源码连接\" class=\"headerlink\" title=\"手写源码连接\"></a>手写源码连接</h2><p><a href=\"https://juejin.cn/post/6844904102053281806\">来自晨曦时梦见兮大佬</a></p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;data&quot;</span>), <span class=\"number\">1000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;data: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;data2: &#x27;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样的一个函数 应该再1秒后打印data 再过一秒打印data2 最后打印success</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>代码效果</p>\n<p><img src=\"/1.gif\"></p>\n<ul>\n<li>可以看到使用async函数，await标识出异步代码，js执行时就会在进行异步阻塞，整个async函数会停止下来<ul>\n<li>关于async函数具体使用见<a href=\"https://es6.ruanyifeng.com/#docs/async\">阮一峰大佬的教学</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"generator函数形式\"><a href=\"#generator函数形式\" class=\"headerlink\" title=\"generator函数形式\"></a>generator函数形式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getData</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;haha&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">testG</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data2:&quot;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getData函数不变</li>\n<li><strong>test函数async使用generator函数标识符*代替，所有await使用yield代替</strong></li>\n</ul>\n<h3 id=\"手动实现\"><a href=\"#手动实现\" class=\"headerlink\" title=\"手动实现\"></a>手动实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"title function_\">testG</span>()<span class=\"comment\">//获取迭代器实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataPromise = gen.<span class=\"title function_\">next</span>()<span class=\"comment\">//获取第一个promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">dataPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data1的value被拿到了 继续调用next并且传递给data 并获取第二个promise</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data2Promise = gen.<span class=\"title function_\">next</span>(value1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;data: &#x27;, data);</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时就会打印出data</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data2Promise.<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data2的value拿到了 继续调用next并且传递value2</span></span><br><span class=\"line\">         gen.<span class=\"title function_\">next</span>(value2)</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// console.log(&#x27;data2: &#x27;, data2);</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时就会打印出data2</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>手动调用generator函数，实现异步操作</li>\n</ul>\n<h3 id=\"利用高阶函数实现自动执行\"><a href=\"#利用高阶函数实现自动执行\" class=\"headerlink\" title=\"利用高阶函数实现自动执行\"></a>利用高阶函数实现自动执行</h3><ul>\n<li><p>期望的终极形态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">asyncToGenerator</span>(testG).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res));</span><br><span class=\"line\"><span class=\"comment\">//传入一个生成器函数，asyncToGenerator函数会自动执行完，并返回一个promise</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>那么asyncToGenerator函数最后应该返回一个promise</li>\n</ul>\n</li>\n<li><p><strong>连续的promise调用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">testG</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data2:&quot;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>generator函数可能存在多个promise，需要一步一步自己调用解包</p>\n</li>\n<li><p>怎么重复调用是重点，而解决思路是找到链式调用的节点</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//retPromise就是generator函数返回的promise</span></span><br><span class=\"line\">retPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//it就是迭代器 即在一个promise状态确定后，根据状态进行下一步。例如resolve下，应该将值返回去，接受下一个promise</span></span><br><span class=\"line\">    it.<span class=\"title function_\">next</span>(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将这里的逻辑抽离出来形成函数，然后在合适的时间调用即可</li>\n</ul>\n</li>\n<li><p>最终实现的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asyncToGenerator</span>(<span class=\"params\">generatorFunc</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取generator函数的迭代器</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> it = <span class=\"title function_\">generatorFunc</span>();</span><br><span class=\"line\">  <span class=\"comment\">//返回一个新的promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//step函数用于调用下一个promise</span></span><br><span class=\"line\">    <span class=\"comment\">//key为迭代器运行方式，val为迭代器要传递进去的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">key, val</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//generator函数返回的value，由于try属于特殊的上下文，变量需要定义在外部</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> retPromise;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        retPromise = it[key](val); <span class=\"comment\">//迭代器运行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e); <span class=\"comment\">//出错直接由外部捕获</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; value, done &#125; = retPromise; <span class=\"comment\">//从generator函数返回的值</span></span><br><span class=\"line\">      <span class=\"comment\">//value即是promise,done用于确定迭代器是否迭代完毕</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (done) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果迭代完毕了，直接向外部抛出最后的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有，调用generator函数返回的promise，注册then事件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//generator函数返回的promise变为resolve时，把获取的值传入step函数，并指示迭代器进行下一步</span></span><br><span class=\"line\">            <span class=\"title function_\">step</span>(<span class=\"string\">&quot;next&quot;</span>, val);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//逻辑同上</span></span><br><span class=\"line\">            <span class=\"title function_\">step</span>(<span class=\"string\">&quot;throw&quot;</span>, err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开始迭代，第一个不需要参数，直接下一步即可</span></span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"string\">&quot;next&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最终效果</p>\n<p><img src=\"/2.gif\"></p>\n</li>\n</ul>\n<p>–</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><ul>\n<li><p><strong>async函数只是promise+generator函数的语法糖</strong></p>\n<ul>\n<li>具体可见《你不懂的JavaScript》中卷</li>\n</ul>\n</li>\n<li><p>promise+generator函数可以使用同步计划书写异步逻辑，更符合人类习惯去书写异步代码</p>\n<ul>\n<li><strong>async函数进一步简化了上述代码</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"手写源码连接\"><a href=\"#手写源码连接\" class=\"headerlink\" title=\"手写源码连接\"></a>手写源码连接</h2><p><a href=\"https://juejin.cn/post/6844904102053281806\">来自晨曦时梦见兮大佬</a></p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getData</span> = (<span class=\"params\"></span>) =&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;data&quot;</span>), <span class=\"number\">1000</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">test</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;data: &#x27;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">await</span> <span class=\"title function_\">getData</span>()</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;data2: &#x27;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;success&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这样的一个函数 应该再1秒后打印data 再过一秒打印data2 最后打印success</span></span><br><span class=\"line\"><span class=\"title function_\">test</span>().<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res))</span><br></pre></td></tr></table></figure>\n\n<p>代码效果</p>\n<p><img src=\"/1.gif\"></p>\n<ul>\n<li>可以看到使用async函数，await标识出异步代码，js执行时就会在进行异步阻塞，整个async函数会停止下来<ul>\n<li>关于async函数具体使用见<a href=\"https://es6.ruanyifeng.com/#docs/async\">阮一峰大佬的教学</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现思路\"><a href=\"#实现思路\" class=\"headerlink\" title=\"实现思路\"></a>实现思路</h2><h3 id=\"generator函数形式\"><a href=\"#generator函数形式\" class=\"headerlink\" title=\"generator函数形式\"></a>generator函数形式</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getData</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"title function_\">resolve</span>(<span class=\"string\">&quot;haha&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">testG</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data2:&quot;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getData函数不变</li>\n<li><strong>test函数async使用generator函数标识符*代替，所有await使用yield代替</strong></li>\n</ul>\n<h3 id=\"手动实现\"><a href=\"#手动实现\" class=\"headerlink\" title=\"手动实现\"></a>手动实现</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> gen = <span class=\"title function_\">testG</span>()<span class=\"comment\">//获取迭代器实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dataPromise = gen.<span class=\"title function_\">next</span>()<span class=\"comment\">//获取第一个promise</span></span><br><span class=\"line\"></span><br><span class=\"line\">dataPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value1</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// data1的value被拿到了 继续调用next并且传递给data 并获取第二个promise</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> data2Promise = gen.<span class=\"title function_\">next</span>(value1)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// console.log(&#x27;data: &#x27;, data);</span></span><br><span class=\"line\">    <span class=\"comment\">// 此时就会打印出data</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    data2Promise.<span class=\"property\">value</span>.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">value2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// data2的value拿到了 继续调用next并且传递value2</span></span><br><span class=\"line\">         gen.<span class=\"title function_\">next</span>(value2)</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"comment\">// console.log(&#x27;data2: &#x27;, data2);</span></span><br><span class=\"line\">        <span class=\"comment\">// 此时就会打印出data2</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>手动调用generator函数，实现异步操作</li>\n</ul>\n<h3 id=\"利用高阶函数实现自动执行\"><a href=\"#利用高阶函数实现自动执行\" class=\"headerlink\" title=\"利用高阶函数实现自动执行\"></a>利用高阶函数实现自动执行</h3><ul>\n<li><p>期望的终极形态</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">asyncToGenerator</span>(testG).<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res));</span><br><span class=\"line\"><span class=\"comment\">//传入一个生成器函数，asyncToGenerator函数会自动执行完，并返回一个promise</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>那么asyncToGenerator函数最后应该返回一个promise</li>\n</ul>\n</li>\n<li><p><strong>连续的promise调用</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span>* <span class=\"title function_\">testG</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data:&quot;</span>, data);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data2 = <span class=\"keyword\">yield</span> <span class=\"title function_\">getData</span>();</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;data2:&quot;</span>, data2);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>generator函数可能存在多个promise，需要一步一步自己调用解包</p>\n</li>\n<li><p>怎么重复调用是重点，而解决思路是找到链式调用的节点</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//retPromise就是generator函数返回的promise</span></span><br><span class=\"line\">retPromise.<span class=\"title function_\">then</span>(<span class=\"function\">(<span class=\"params\">res</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//it就是迭代器 即在一个promise状态确定后，根据状态进行下一步。例如resolve下，应该将值返回去，接受下一个promise</span></span><br><span class=\"line\">    it.<span class=\"title function_\">next</span>(res);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>将这里的逻辑抽离出来形成函数，然后在合适的时间调用即可</li>\n</ul>\n</li>\n<li><p>最终实现的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">asyncToGenerator</span>(<span class=\"params\">generatorFunc</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//获取generator函数的迭代器</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> it = <span class=\"title function_\">generatorFunc</span>();</span><br><span class=\"line\">  <span class=\"comment\">//返回一个新的promise</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//step函数用于调用下一个promise</span></span><br><span class=\"line\">    <span class=\"comment\">//key为迭代器运行方式，val为迭代器要传递进去的参数</span></span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">step</span>(<span class=\"params\">key, val</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//generator函数返回的value，由于try属于特殊的上下文，变量需要定义在外部</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> retPromise;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        retPromise = it[key](val); <span class=\"comment\">//迭代器运行</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">reject</span>(e); <span class=\"comment\">//出错直接由外部捕获</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> &#123; value, done &#125; = retPromise; <span class=\"comment\">//从generator函数返回的值</span></span><br><span class=\"line\">      <span class=\"comment\">//value即是promise,done用于确定迭代器是否迭代完毕</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (done) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果迭代完毕了，直接向外部抛出最后的值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title function_\">resolve</span>(value);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//如果没有，调用generator函数返回的promise，注册then事件</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.<span class=\"title function_\">then</span>(</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">val</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//generator函数返回的promise变为resolve时，把获取的值传入step函数，并指示迭代器进行下一步</span></span><br><span class=\"line\">            <span class=\"title function_\">step</span>(<span class=\"string\">&quot;next&quot;</span>, val);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//逻辑同上</span></span><br><span class=\"line\">            <span class=\"title function_\">step</span>(<span class=\"string\">&quot;throw&quot;</span>, err);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//开始迭代，第一个不需要参数，直接下一步即可</span></span><br><span class=\"line\">    <span class=\"title function_\">step</span>(<span class=\"string\">&quot;next&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最终效果</p>\n<p><img src=\"/2.gif\"></p>\n</li>\n</ul>\n<p>–</p>\n"}],"PostAsset":[{"_id":"source/_posts/ReactSourceDebug/1.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceDebug/2.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"2.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceDebug/3.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"3.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceDebug/4.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"4.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceDebug/5.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"5.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceDebug/6.png","post":"cl1xc3oug00001wuq65hpdyv8","slug":"6.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceHookDebug/11.png","post":"cl1xc3our00041wuq03n6far8","slug":"11.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceHookDebug/22.png","post":"cl1xc3our00041wuq03n6far8","slug":"22.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceHookDebug/33.png","post":"cl1xc3our00041wuq03n6far8","slug":"33.png","modified":1,"renderable":1},{"_id":"source/_posts/ReactSourceHookDebug/44.png","post":"cl1xc3our00041wuq03n6far8","slug":"44.png","modified":1,"renderable":1},{"_id":"source/_posts/vueReactive/1.png","post":"cl1xc3ouw000a1wuqf9p84d1l","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/vueReactive/2.gif","post":"cl1xc3ouw000a1wuqf9p84d1l","slug":"2.gif","modified":1,"renderable":1},{"_id":"source/_posts/vueReactive/3.gif","post":"cl1xc3ouw000a1wuqf9p84d1l","slug":"3.gif","modified":1,"renderable":1},{"_id":"source/_posts/vueReactive/4.gif","post":"cl1xc3ouw000a1wuqf9p84d1l","slug":"4.gif","modified":1,"renderable":1},{"_id":"source/_posts/vueReactive/5.gif","post":"cl1xc3ouw000a1wuqf9p84d1l","slug":"5.gif","modified":1,"renderable":1},{"_id":"source/_posts/wirteMyAsync/1.gif","post":"cl1xc3ouz000f1wuqdewk4az0","slug":"1.gif","modified":1,"renderable":1},{"_id":"source/_posts/wirteMyAsync/2.gif","post":"cl1xc3ouz000f1wuqdewk4az0","slug":"2.gif","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl1xc3oug00001wuq65hpdyv8","category_id":"cl1xc3oup00021wuq550686h7","_id":"cl1xc3oux000c1wuqfeozclog"},{"post_id":"cl1xc3oum00011wuqfpjy4fhc","category_id":"cl1xc3oup00021wuq550686h7","_id":"cl1xc3ov1000h1wuq8pmc3ax2"},{"post_id":"cl1xc3our00041wuq03n6far8","category_id":"cl1xc3oup00021wuq550686h7","_id":"cl1xc3ov3000k1wuq2nnrck0k"},{"post_id":"cl1xc3ous00051wuq6kw3744q","category_id":"cl1xc3ov1000g1wuq7u90cbrs","_id":"cl1xc3ov4000p1wuq7ax7b5u1"},{"post_id":"cl1xc3out00061wuqetrp1ubp","category_id":"cl1xc3ov3000l1wuq9unz59lo","_id":"cl1xc3ov5000t1wuq566t63fn"},{"post_id":"cl1xc3ouv00091wuq8hhp0x8x","category_id":"cl1xc3ov4000q1wuq27ig6xn6","_id":"cl1xc3ov6000y1wuqewf00lk4"},{"post_id":"cl1xc3ouw000a1wuqf9p84d1l","category_id":"cl1xc3ov3000l1wuq9unz59lo","_id":"cl1xc3ov700111wuqgbu1b26s"},{"post_id":"cl1xc3ouy000e1wuqhg9530l2","category_id":"cl1xc3ov4000q1wuq27ig6xn6","_id":"cl1xc3ov800141wuqaehxbozg"},{"post_id":"cl1xc3ouz000f1wuqdewk4az0","category_id":"cl1xc3ov4000q1wuq27ig6xn6","_id":"cl1xc3ov800181wuq4s28cr0d"}],"PostTag":[{"post_id":"cl1xc3oug00001wuq65hpdyv8","tag_id":"cl1xc3ouq00031wuqdh7oafn3","_id":"cl1xc3ov2000j1wuq4vrh018l"},{"post_id":"cl1xc3oug00001wuq65hpdyv8","tag_id":"cl1xc3ouu00081wuq5ba7d1y9","_id":"cl1xc3ov3000m1wuq0eqlfi7n"},{"post_id":"cl1xc3oug00001wuq65hpdyv8","tag_id":"cl1xc3oux000d1wuqdb210xji","_id":"cl1xc3ov4000o1wuq8y8o6tfp"},{"post_id":"cl1xc3oum00011wuqfpjy4fhc","tag_id":"cl1xc3ouq00031wuqdh7oafn3","_id":"cl1xc3ov5000s1wuqeevscoti"},{"post_id":"cl1xc3oum00011wuqfpjy4fhc","tag_id":"cl1xc3ov3000n1wuq4mpp6h8v","_id":"cl1xc3ov5000u1wuq8qs23oht"},{"post_id":"cl1xc3our00041wuq03n6far8","tag_id":"cl1xc3ouq00031wuqdh7oafn3","_id":"cl1xc3ov800131wuq1exffymz"},{"post_id":"cl1xc3our00041wuq03n6far8","tag_id":"cl1xc3oux000d1wuqdb210xji","_id":"cl1xc3ov800151wuqa7g9d81x"},{"post_id":"cl1xc3our00041wuq03n6far8","tag_id":"cl1xc3ov6000z1wuqhn5q4vyt","_id":"cl1xc3ov800171wuqhv703u8i"},{"post_id":"cl1xc3ous00051wuq6kw3744q","tag_id":"cl1xc3ov700121wuq5nen3gwx","_id":"cl1xc3ov9001a1wuqfluj5s8y"},{"post_id":"cl1xc3ous00051wuq6kw3744q","tag_id":"cl1xc3ov800161wuqg7taglj2","_id":"cl1xc3ov9001b1wuqgn3gd24s"},{"post_id":"cl1xc3out00061wuqetrp1ubp","tag_id":"cl1xc3ov800191wuq4zcq4fxn","_id":"cl1xc3ov9001e1wuq5uclc7o1"},{"post_id":"cl1xc3out00061wuqetrp1ubp","tag_id":"cl1xc3oux000d1wuqdb210xji","_id":"cl1xc3ova001f1wuq75f4f9z5"},{"post_id":"cl1xc3ouv00091wuq8hhp0x8x","tag_id":"cl1xc3ov9001d1wuq5if1hq6w","_id":"cl1xc3ova001h1wuq6jt277wo"},{"post_id":"cl1xc3ouw000a1wuqf9p84d1l","tag_id":"cl1xc3ov800191wuq4zcq4fxn","_id":"cl1xc3ova001j1wuq2nby9tjn"},{"post_id":"cl1xc3ouy000e1wuqhg9530l2","tag_id":"cl1xc3ov6000z1wuqhn5q4vyt","_id":"cl1xc3ovb001m1wuq1pbd2ear"},{"post_id":"cl1xc3ouy000e1wuqhg9530l2","tag_id":"cl1xc3ova001k1wuqghem9odv","_id":"cl1xc3ovb001n1wuq37o4gqzi"},{"post_id":"cl1xc3ouz000f1wuqdewk4az0","tag_id":"cl1xc3ov6000z1wuqhn5q4vyt","_id":"cl1xc3ovb001p1wuqdeboeprh"},{"post_id":"cl1xc3ouz000f1wuqdewk4az0","tag_id":"cl1xc3ovb001o1wuqcg6of553","_id":"cl1xc3ovb001q1wuqev0p36ms"}],"Tag":[{"name":"React","_id":"cl1xc3ouq00031wuqdh7oafn3"},{"name":"Javascript","_id":"cl1xc3ouu00081wuq5ba7d1y9"},{"name":"source","_id":"cl1xc3oux000d1wuqdb210xji"},{"name":"Diff","_id":"cl1xc3ov3000n1wuq4mpp6h8v"},{"name":"javascript","_id":"cl1xc3ov6000z1wuqhn5q4vyt"},{"name":"Rust","_id":"cl1xc3ov700121wuq5nen3gwx"},{"name":"basic","_id":"cl1xc3ov800161wuqg7taglj2"},{"name":"Vue","_id":"cl1xc3ov800191wuq4zcq4fxn"},{"name":"webpack","_id":"cl1xc3ov9001d1wuq5if1hq6w"},{"name":"promise","_id":"cl1xc3ova001k1wuqghem9odv"},{"name":"async","_id":"cl1xc3ovb001o1wuqcg6of553"}]}}